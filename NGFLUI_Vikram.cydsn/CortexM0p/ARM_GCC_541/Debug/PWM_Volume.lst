ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0plus
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM_Volume.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM_Volume_Stop,"ax",%progbits
  20              		.align	2
  21              		.global	PWM_Volume_Stop
  22              		.code	16
  23              		.thumb_func
  24              		.type	PWM_Volume_Stop, %function
  25              	PWM_Volume_Stop:
  26              	.LFB4:
  27              		.file 1 "Generated_Source\\PSoC4\\PWM_Volume.c"
   1:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/PWM_Volume.c **** * File Name: PWM_Volume.c
   3:Generated_Source\PSoC4/PWM_Volume.c **** * Version 2.10
   4:Generated_Source\PSoC4/PWM_Volume.c **** *
   5:Generated_Source\PSoC4/PWM_Volume.c **** * Description:
   6:Generated_Source\PSoC4/PWM_Volume.c **** *  This file provides the source code to the API for the PWM_Volume
   7:Generated_Source\PSoC4/PWM_Volume.c **** *  component
   8:Generated_Source\PSoC4/PWM_Volume.c **** *
   9:Generated_Source\PSoC4/PWM_Volume.c **** * Note:
  10:Generated_Source\PSoC4/PWM_Volume.c **** *  None
  11:Generated_Source\PSoC4/PWM_Volume.c **** *
  12:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
  13:Generated_Source\PSoC4/PWM_Volume.c **** * Copyright 2013-2015, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/PWM_Volume.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/PWM_Volume.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/PWM_Volume.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/PWM_Volume.c **** 
  19:Generated_Source\PSoC4/PWM_Volume.c **** #include "PWM_Volume.h"
  20:Generated_Source\PSoC4/PWM_Volume.c **** 
  21:Generated_Source\PSoC4/PWM_Volume.c **** uint8 PWM_Volume_initVar = 0u;
  22:Generated_Source\PSoC4/PWM_Volume.c **** 
  23:Generated_Source\PSoC4/PWM_Volume.c **** 
  24:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_Init
  26:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
  27:Generated_Source\PSoC4/PWM_Volume.c **** *
  28:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
  29:Generated_Source\PSoC4/PWM_Volume.c **** *  Initialize/Restore default PWM_Volume configuration.
  30:Generated_Source\PSoC4/PWM_Volume.c **** *
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 2


  31:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
  32:Generated_Source\PSoC4/PWM_Volume.c **** *  None
  33:Generated_Source\PSoC4/PWM_Volume.c **** *
  34:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
  35:Generated_Source\PSoC4/PWM_Volume.c **** *  None
  36:Generated_Source\PSoC4/PWM_Volume.c **** *
  37:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
  38:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_Init(void)
  39:Generated_Source\PSoC4/PWM_Volume.c **** {
  40:Generated_Source\PSoC4/PWM_Volume.c **** 
  41:Generated_Source\PSoC4/PWM_Volume.c ****     /* Set values from customizer to CTRL */
  42:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__QUAD == PWM_Volume_CONFIG)
  43:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_CONTROL_REG = PWM_Volume_CTRL_QUAD_BASE_CONFIG;
  44:Generated_Source\PSoC4/PWM_Volume.c ****         
  45:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to CTRL1 */
  46:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_TRIG_CONTROL1_REG  = PWM_Volume_QUAD_SIGNALS_MODES;
  47:Generated_Source\PSoC4/PWM_Volume.c **** 
  48:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to INTR */
  49:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_SetInterruptMode(PWM_Volume_QUAD_INTERRUPT_MASK);
  50:Generated_Source\PSoC4/PWM_Volume.c ****         
  51:Generated_Source\PSoC4/PWM_Volume.c ****          /* Set other values */
  52:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_SetCounterMode(PWM_Volume_COUNT_DOWN);
  53:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WritePeriod(PWM_Volume_QUAD_PERIOD_INIT_VALUE);
  54:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WriteCounter(PWM_Volume_QUAD_PERIOD_INIT_VALUE);
  55:Generated_Source\PSoC4/PWM_Volume.c ****     #endif  /* (PWM_Volume__QUAD == PWM_Volume_CONFIG) */
  56:Generated_Source\PSoC4/PWM_Volume.c **** 
  57:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__TIMER == PWM_Volume_CONFIG)
  58:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_CONTROL_REG = PWM_Volume_CTRL_TIMER_BASE_CONFIG;
  59:Generated_Source\PSoC4/PWM_Volume.c ****         
  60:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to CTRL1 */
  61:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_TRIG_CONTROL1_REG  = PWM_Volume_TIMER_SIGNALS_MODES;
  62:Generated_Source\PSoC4/PWM_Volume.c ****     
  63:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to INTR */
  64:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_SetInterruptMode(PWM_Volume_TC_INTERRUPT_MASK);
  65:Generated_Source\PSoC4/PWM_Volume.c ****         
  66:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set other values from customizer */
  67:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WritePeriod(PWM_Volume_TC_PERIOD_VALUE );
  68:Generated_Source\PSoC4/PWM_Volume.c **** 
  69:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume__COMPARE == PWM_Volume_TC_COMP_CAP_MODE)
  70:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCompare(PWM_Volume_TC_COMPARE_VALUE);
  71:Generated_Source\PSoC4/PWM_Volume.c **** 
  72:Generated_Source\PSoC4/PWM_Volume.c ****             #if (1u == PWM_Volume_TC_COMPARE_SWAP)
  73:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_SetCompareSwap(1u);
  74:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_WriteCompareBuf(PWM_Volume_TC_COMPARE_BUF_VALUE);
  75:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* (1u == PWM_Volume_TC_COMPARE_SWAP) */
  76:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__COMPARE == PWM_Volume_TC_COMP_CAP_MODE) */
  77:Generated_Source\PSoC4/PWM_Volume.c **** 
  78:Generated_Source\PSoC4/PWM_Volume.c ****         /* Initialize counter value */
  79:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume_CY_TCPWM_V2 && PWM_Volume_TIMER_UPDOWN_CNT_USED && !PWM_Volume_CY_TCPWM_400
  80:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCounter(1u);
  81:Generated_Source\PSoC4/PWM_Volume.c ****         #elif(PWM_Volume__COUNT_DOWN == PWM_Volume_TC_COUNTER_MODE)
  82:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCounter(PWM_Volume_TC_PERIOD_VALUE);
  83:Generated_Source\PSoC4/PWM_Volume.c ****         #else
  84:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCounter(0u);
  85:Generated_Source\PSoC4/PWM_Volume.c ****         #endif /* (PWM_Volume_CY_TCPWM_V2 && PWM_Volume_TIMER_UPDOWN_CNT_USED && !PWM_Volume_CY_TCP
  86:Generated_Source\PSoC4/PWM_Volume.c ****     #endif  /* (PWM_Volume__TIMER == PWM_Volume_CONFIG) */
  87:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 3


  88:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__PWM_SEL == PWM_Volume_CONFIG)
  89:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_CONTROL_REG = PWM_Volume_CTRL_PWM_BASE_CONFIG;
  90:Generated_Source\PSoC4/PWM_Volume.c **** 
  91:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume__PWM_PR == PWM_Volume_PWM_MODE)
  92:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_CONTROL_REG |= PWM_Volume_CTRL_PWM_RUN_MODE;
  93:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCounter(PWM_Volume_PWM_PR_INIT_VALUE);
  94:Generated_Source\PSoC4/PWM_Volume.c ****         #else
  95:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_CONTROL_REG |= PWM_Volume_CTRL_PWM_ALIGN | PWM_Volume_CTRL_PWM_KILL_EVENT;
  96:Generated_Source\PSoC4/PWM_Volume.c ****             
  97:Generated_Source\PSoC4/PWM_Volume.c ****             /* Initialize counter value */
  98:Generated_Source\PSoC4/PWM_Volume.c ****             #if (PWM_Volume_CY_TCPWM_V2 && PWM_Volume_PWM_UPDOWN_CNT_USED && !PWM_Volume_CY_TCPWM_4
  99:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_WriteCounter(1u);
 100:Generated_Source\PSoC4/PWM_Volume.c ****             #elif (PWM_Volume__RIGHT == PWM_Volume_PWM_ALIGN)
 101:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_WriteCounter(PWM_Volume_PWM_PERIOD_VALUE);
 102:Generated_Source\PSoC4/PWM_Volume.c ****             #else 
 103:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_WriteCounter(0u);
 104:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* (PWM_Volume_CY_TCPWM_V2 && PWM_Volume_PWM_UPDOWN_CNT_USED && !PWM_Volume_CY_
 105:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__PWM_PR == PWM_Volume_PWM_MODE) */
 106:Generated_Source\PSoC4/PWM_Volume.c **** 
 107:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume__PWM_DT == PWM_Volume_PWM_MODE)
 108:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_CONTROL_REG |= PWM_Volume_CTRL_PWM_DEAD_TIME_CYCLE;
 109:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__PWM_DT == PWM_Volume_PWM_MODE) */
 110:Generated_Source\PSoC4/PWM_Volume.c **** 
 111:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume__PWM == PWM_Volume_PWM_MODE)
 112:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_CONTROL_REG |= PWM_Volume_CTRL_PWM_PRESCALER;
 113:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__PWM == PWM_Volume_PWM_MODE) */
 114:Generated_Source\PSoC4/PWM_Volume.c **** 
 115:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to CTRL1 */
 116:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_TRIG_CONTROL1_REG  = PWM_Volume_PWM_SIGNALS_MODES;
 117:Generated_Source\PSoC4/PWM_Volume.c ****     
 118:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to INTR */
 119:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_SetInterruptMode(PWM_Volume_PWM_INTERRUPT_MASK);
 120:Generated_Source\PSoC4/PWM_Volume.c **** 
 121:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set values from customizer to CTRL2 */
 122:Generated_Source\PSoC4/PWM_Volume.c ****         #if (PWM_Volume__PWM_PR == PWM_Volume_PWM_MODE)
 123:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_TRIG_CONTROL2_REG =
 124:Generated_Source\PSoC4/PWM_Volume.c ****                     (PWM_Volume_CC_MATCH_NO_CHANGE    |
 125:Generated_Source\PSoC4/PWM_Volume.c ****                     PWM_Volume_OVERLOW_NO_CHANGE      |
 126:Generated_Source\PSoC4/PWM_Volume.c ****                     PWM_Volume_UNDERFLOW_NO_CHANGE);
 127:Generated_Source\PSoC4/PWM_Volume.c ****         #else
 128:Generated_Source\PSoC4/PWM_Volume.c ****             #if (PWM_Volume__LEFT == PWM_Volume_PWM_ALIGN)
 129:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_TRIG_CONTROL2_REG = PWM_Volume_PWM_MODE_LEFT;
 130:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* ( PWM_Volume_PWM_LEFT == PWM_Volume_PWM_ALIGN) */
 131:Generated_Source\PSoC4/PWM_Volume.c **** 
 132:Generated_Source\PSoC4/PWM_Volume.c ****             #if (PWM_Volume__RIGHT == PWM_Volume_PWM_ALIGN)
 133:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_TRIG_CONTROL2_REG = PWM_Volume_PWM_MODE_RIGHT;
 134:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* ( PWM_Volume_PWM_RIGHT == PWM_Volume_PWM_ALIGN) */
 135:Generated_Source\PSoC4/PWM_Volume.c **** 
 136:Generated_Source\PSoC4/PWM_Volume.c ****             #if (PWM_Volume__CENTER == PWM_Volume_PWM_ALIGN)
 137:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_TRIG_CONTROL2_REG = PWM_Volume_PWM_MODE_CENTER;
 138:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* ( PWM_Volume_PWM_CENTER == PWM_Volume_PWM_ALIGN) */
 139:Generated_Source\PSoC4/PWM_Volume.c **** 
 140:Generated_Source\PSoC4/PWM_Volume.c ****             #if (PWM_Volume__ASYMMETRIC == PWM_Volume_PWM_ALIGN)
 141:Generated_Source\PSoC4/PWM_Volume.c ****                 PWM_Volume_TRIG_CONTROL2_REG = PWM_Volume_PWM_MODE_ASYM;
 142:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* (PWM_Volume__ASYMMETRIC == PWM_Volume_PWM_ALIGN) */
 143:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__PWM_PR == PWM_Volume_PWM_MODE) */
 144:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 4


 145:Generated_Source\PSoC4/PWM_Volume.c ****         /* Set other values from customizer */
 146:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WritePeriod(PWM_Volume_PWM_PERIOD_VALUE );
 147:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WriteCompare(PWM_Volume_PWM_COMPARE_VALUE);
 148:Generated_Source\PSoC4/PWM_Volume.c **** 
 149:Generated_Source\PSoC4/PWM_Volume.c ****         #if (1u == PWM_Volume_PWM_COMPARE_SWAP)
 150:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_SetCompareSwap(1u);
 151:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WriteCompareBuf(PWM_Volume_PWM_COMPARE_BUF_VALUE);
 152:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (1u == PWM_Volume_PWM_COMPARE_SWAP) */
 153:Generated_Source\PSoC4/PWM_Volume.c **** 
 154:Generated_Source\PSoC4/PWM_Volume.c ****         #if (1u == PWM_Volume_PWM_PERIOD_SWAP)
 155:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_SetPeriodSwap(1u);
 156:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_WritePeriodBuf(PWM_Volume_PWM_PERIOD_BUF_VALUE);
 157:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (1u == PWM_Volume_PWM_PERIOD_SWAP) */
 158:Generated_Source\PSoC4/PWM_Volume.c ****     #endif  /* (PWM_Volume__PWM_SEL == PWM_Volume_CONFIG) */
 159:Generated_Source\PSoC4/PWM_Volume.c ****     
 160:Generated_Source\PSoC4/PWM_Volume.c **** }
 161:Generated_Source\PSoC4/PWM_Volume.c **** 
 162:Generated_Source\PSoC4/PWM_Volume.c **** 
 163:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_Enable
 165:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 166:Generated_Source\PSoC4/PWM_Volume.c **** *
 167:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 168:Generated_Source\PSoC4/PWM_Volume.c **** *  Enables the PWM_Volume.
 169:Generated_Source\PSoC4/PWM_Volume.c **** *
 170:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 171:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 172:Generated_Source\PSoC4/PWM_Volume.c **** *
 173:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 174:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 175:Generated_Source\PSoC4/PWM_Volume.c **** *
 176:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 177:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_Enable(void)
 178:Generated_Source\PSoC4/PWM_Volume.c **** {
 179:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 180:Generated_Source\PSoC4/PWM_Volume.c **** 
 181:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 182:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_BLOCK_CONTROL_REG |= PWM_Volume_MASK;
 183:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 184:Generated_Source\PSoC4/PWM_Volume.c **** 
 185:Generated_Source\PSoC4/PWM_Volume.c ****     /* Start Timer or PWM if start input is absent */
 186:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__PWM_SEL == PWM_Volume_CONFIG)
 187:Generated_Source\PSoC4/PWM_Volume.c ****         #if (0u == PWM_Volume_PWM_START_SIGNAL_PRESENT)
 188:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_TriggerCommand(PWM_Volume_MASK, PWM_Volume_CMD_START);
 189:Generated_Source\PSoC4/PWM_Volume.c ****         #endif /* (0u == PWM_Volume_PWM_START_SIGNAL_PRESENT) */
 190:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume__PWM_SEL == PWM_Volume_CONFIG) */
 191:Generated_Source\PSoC4/PWM_Volume.c **** 
 192:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__TIMER == PWM_Volume_CONFIG)
 193:Generated_Source\PSoC4/PWM_Volume.c ****         #if (0u == PWM_Volume_TC_START_SIGNAL_PRESENT)
 194:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_TriggerCommand(PWM_Volume_MASK, PWM_Volume_CMD_START);
 195:Generated_Source\PSoC4/PWM_Volume.c ****         #endif /* (0u == PWM_Volume_TC_START_SIGNAL_PRESENT) */
 196:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume__TIMER == PWM_Volume_CONFIG) */
 197:Generated_Source\PSoC4/PWM_Volume.c ****     
 198:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume__QUAD == PWM_Volume_CONFIG)
 199:Generated_Source\PSoC4/PWM_Volume.c ****         #if (0u != PWM_Volume_QUAD_AUTO_START)
 200:Generated_Source\PSoC4/PWM_Volume.c ****             PWM_Volume_TriggerCommand(PWM_Volume_MASK, PWM_Volume_CMD_RELOAD);
 201:Generated_Source\PSoC4/PWM_Volume.c ****         #endif /* (0u != PWM_Volume_QUAD_AUTO_START) */
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 5


 202:Generated_Source\PSoC4/PWM_Volume.c ****     #endif  /* (PWM_Volume__QUAD == PWM_Volume_CONFIG) */
 203:Generated_Source\PSoC4/PWM_Volume.c **** }
 204:Generated_Source\PSoC4/PWM_Volume.c **** 
 205:Generated_Source\PSoC4/PWM_Volume.c **** 
 206:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 207:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_Start
 208:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 209:Generated_Source\PSoC4/PWM_Volume.c **** *
 210:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 211:Generated_Source\PSoC4/PWM_Volume.c **** *  Initializes the PWM_Volume with default customizer
 212:Generated_Source\PSoC4/PWM_Volume.c **** *  values when called the first time and enables the PWM_Volume.
 213:Generated_Source\PSoC4/PWM_Volume.c **** *  For subsequent calls the configuration is left unchanged and the component is
 214:Generated_Source\PSoC4/PWM_Volume.c **** *  just enabled.
 215:Generated_Source\PSoC4/PWM_Volume.c **** *
 216:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 217:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 218:Generated_Source\PSoC4/PWM_Volume.c **** *
 219:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 220:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 221:Generated_Source\PSoC4/PWM_Volume.c **** *
 222:Generated_Source\PSoC4/PWM_Volume.c **** * Global variables:
 223:Generated_Source\PSoC4/PWM_Volume.c **** *  PWM_Volume_initVar: global variable is used to indicate initial
 224:Generated_Source\PSoC4/PWM_Volume.c **** *  configuration of this component.  The variable is initialized to zero and set
 225:Generated_Source\PSoC4/PWM_Volume.c **** *  to 1 the first time PWM_Volume_Start() is called. This allows
 226:Generated_Source\PSoC4/PWM_Volume.c **** *  enabling/disabling a component without re-initialization in all subsequent
 227:Generated_Source\PSoC4/PWM_Volume.c **** *  calls to the PWM_Volume_Start() routine.
 228:Generated_Source\PSoC4/PWM_Volume.c **** *
 229:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 230:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_Start(void)
 231:Generated_Source\PSoC4/PWM_Volume.c **** {
 232:Generated_Source\PSoC4/PWM_Volume.c ****     if (0u == PWM_Volume_initVar)
 233:Generated_Source\PSoC4/PWM_Volume.c ****     {
 234:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_Init();
 235:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_initVar = 1u;
 236:Generated_Source\PSoC4/PWM_Volume.c ****     }
 237:Generated_Source\PSoC4/PWM_Volume.c **** 
 238:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_Enable();
 239:Generated_Source\PSoC4/PWM_Volume.c **** }
 240:Generated_Source\PSoC4/PWM_Volume.c **** 
 241:Generated_Source\PSoC4/PWM_Volume.c **** 
 242:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 243:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_Stop
 244:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 245:Generated_Source\PSoC4/PWM_Volume.c **** *
 246:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 247:Generated_Source\PSoC4/PWM_Volume.c **** *  Disables the PWM_Volume.
 248:Generated_Source\PSoC4/PWM_Volume.c **** *
 249:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 250:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 251:Generated_Source\PSoC4/PWM_Volume.c **** *
 252:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 253:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 254:Generated_Source\PSoC4/PWM_Volume.c **** *
 255:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 256:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_Stop(void)
 257:Generated_Source\PSoC4/PWM_Volume.c **** {
  28              		.loc 1 257 0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 6


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 4, -8
  35              		.cfi_offset 14, -4
 258:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 259:Generated_Source\PSoC4/PWM_Volume.c **** 
 260:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
  36              		.loc 1 260 0
  37 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  38              	.LVL0:
 261:Generated_Source\PSoC4/PWM_Volume.c **** 
 262:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_BLOCK_CONTROL_REG &= (uint32)~PWM_Volume_MASK;
  39              		.loc 1 262 0
  40 0006 044A     		ldr	r2, .L2
  41 0008 1368     		ldr	r3, [r2]
  42 000a 0821     		movs	r1, #8
  43 000c 8B43     		bics	r3, r1
  44 000e 1360     		str	r3, [r2]
 263:Generated_Source\PSoC4/PWM_Volume.c **** 
 264:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
  45              		.loc 1 264 0
  46 0010 FFF7FEFF 		bl	CyExitCriticalSection
  47              	.LVL1:
 265:Generated_Source\PSoC4/PWM_Volume.c **** }
  48              		.loc 1 265 0
  49              		@ sp needed
  50 0014 10BD     		pop	{r4, pc}
  51              	.L3:
  52 0016 C046     		.align	2
  53              	.L2:
  54 0018 00002040 		.word	1075838976
  55              		.cfi_endproc
  56              	.LFE4:
  57              		.size	PWM_Volume_Stop, .-PWM_Volume_Stop
  58              		.section	.text.PWM_Volume_SetMode,"ax",%progbits
  59              		.align	2
  60              		.global	PWM_Volume_SetMode
  61              		.code	16
  62              		.thumb_func
  63              		.type	PWM_Volume_SetMode, %function
  64              	PWM_Volume_SetMode:
  65              	.LFB5:
 266:Generated_Source\PSoC4/PWM_Volume.c **** 
 267:Generated_Source\PSoC4/PWM_Volume.c **** 
 268:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 269:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetMode
 270:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 271:Generated_Source\PSoC4/PWM_Volume.c **** *
 272:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 273:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the operation mode of the PWM_Volume. This function is used when
 274:Generated_Source\PSoC4/PWM_Volume.c **** *  configured as a generic PWM_Volume and the actual mode of operation is
 275:Generated_Source\PSoC4/PWM_Volume.c **** *  set at runtime. The mode must be set while the component is disabled.
 276:Generated_Source\PSoC4/PWM_Volume.c **** *
 277:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 7


 278:Generated_Source\PSoC4/PWM_Volume.c **** *  mode: Mode for the PWM_Volume to operate in
 279:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 280:Generated_Source\PSoC4/PWM_Volume.c **** *   - PWM_Volume_MODE_TIMER_COMPARE - Timer / Counter with
 281:Generated_Source\PSoC4/PWM_Volume.c **** *                                                 compare capability
 282:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_TIMER_CAPTURE - Timer / Counter with
 283:Generated_Source\PSoC4/PWM_Volume.c **** *                                                 capture capability
 284:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_QUAD - Quadrature decoder
 285:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_PWM - PWM
 286:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_PWM_DT - PWM with dead time
 287:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_PWM_PR - PWM with pseudo random capability
 288:Generated_Source\PSoC4/PWM_Volume.c **** *
 289:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 290:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 291:Generated_Source\PSoC4/PWM_Volume.c **** *
 292:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 293:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetMode(uint32 mode)
 294:Generated_Source\PSoC4/PWM_Volume.c **** {
  66              		.loc 1 294 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL2:
  71 0000 10B5     		push	{r4, lr}
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
  75 0002 0400     		movs	r4, r0
 295:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 296:Generated_Source\PSoC4/PWM_Volume.c **** 
 297:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
  76              		.loc 1 297 0
  77 0004 FFF7FEFF 		bl	CyEnterCriticalSection
  78              	.LVL3:
 298:Generated_Source\PSoC4/PWM_Volume.c **** 
 299:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_MODE_MASK;
  79              		.loc 1 299 0
  80 0008 054B     		ldr	r3, .L5
  81 000a 1968     		ldr	r1, [r3]
  82 000c 054A     		ldr	r2, .L5+4
  83 000e 0A40     		ands	r2, r1
  84 0010 1A60     		str	r2, [r3]
 300:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= mode;
  85              		.loc 1 300 0
  86 0012 1A68     		ldr	r2, [r3]
  87 0014 1443     		orrs	r4, r2
  88              	.LVL4:
  89 0016 1C60     		str	r4, [r3]
 301:Generated_Source\PSoC4/PWM_Volume.c **** 
 302:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
  90              		.loc 1 302 0
  91 0018 FFF7FEFF 		bl	CyExitCriticalSection
  92              	.LVL5:
 303:Generated_Source\PSoC4/PWM_Volume.c **** }
  93              		.loc 1 303 0
  94              		@ sp needed
  95 001c 10BD     		pop	{r4, pc}
  96              	.L6:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 8


  97 001e C046     		.align	2
  98              	.L5:
  99 0020 C0012040 		.word	1075839424
 100 0024 FFFFFFF8 		.word	-117440513
 101              		.cfi_endproc
 102              	.LFE5:
 103              		.size	PWM_Volume_SetMode, .-PWM_Volume_SetMode
 104              		.section	.text.PWM_Volume_SetQDMode,"ax",%progbits
 105              		.align	2
 106              		.global	PWM_Volume_SetQDMode
 107              		.code	16
 108              		.thumb_func
 109              		.type	PWM_Volume_SetQDMode, %function
 110              	PWM_Volume_SetQDMode:
 111              	.LFB6:
 304:Generated_Source\PSoC4/PWM_Volume.c **** 
 305:Generated_Source\PSoC4/PWM_Volume.c **** 
 306:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 307:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetQDMode
 308:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 309:Generated_Source\PSoC4/PWM_Volume.c **** *
 310:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 311:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 312:Generated_Source\PSoC4/PWM_Volume.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 313:Generated_Source\PSoC4/PWM_Volume.c **** *
 314:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 315:Generated_Source\PSoC4/PWM_Volume.c **** *  qdMode: Quadrature Decoder mode
 316:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 317:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_X1 - Counts on phi 1 rising
 318:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_X2 - Counts on both edges of phi1 (2x faster)
 319:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_MODE_X4 - Counts on both edges of phi1 and phi2
 320:Generated_Source\PSoC4/PWM_Volume.c **** *                                        (4x faster)
 321:Generated_Source\PSoC4/PWM_Volume.c **** *
 322:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 323:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 324:Generated_Source\PSoC4/PWM_Volume.c **** *
 325:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 326:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetQDMode(uint32 qdMode)
 327:Generated_Source\PSoC4/PWM_Volume.c **** {
 112              		.loc 1 327 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              	.LVL6:
 117 0000 10B5     		push	{r4, lr}
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 4, -8
 120              		.cfi_offset 14, -4
 121 0002 0400     		movs	r4, r0
 328:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 329:Generated_Source\PSoC4/PWM_Volume.c **** 
 330:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 122              		.loc 1 330 0
 123 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 124              	.LVL7:
 331:Generated_Source\PSoC4/PWM_Volume.c **** 
 332:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_QUAD_MODE_MASK;
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 9


 125              		.loc 1 332 0
 126 0008 054B     		ldr	r3, .L8
 127 000a 1968     		ldr	r1, [r3]
 128 000c 054A     		ldr	r2, .L8+4
 129 000e 0A40     		ands	r2, r1
 130 0010 1A60     		str	r2, [r3]
 333:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= qdMode;
 131              		.loc 1 333 0
 132 0012 1A68     		ldr	r2, [r3]
 133 0014 1443     		orrs	r4, r2
 134              	.LVL8:
 135 0016 1C60     		str	r4, [r3]
 334:Generated_Source\PSoC4/PWM_Volume.c **** 
 335:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 136              		.loc 1 335 0
 137 0018 FFF7FEFF 		bl	CyExitCriticalSection
 138              	.LVL9:
 336:Generated_Source\PSoC4/PWM_Volume.c **** }
 139              		.loc 1 336 0
 140              		@ sp needed
 141 001c 10BD     		pop	{r4, pc}
 142              	.L9:
 143 001e C046     		.align	2
 144              	.L8:
 145 0020 C0012040 		.word	1075839424
 146 0024 FFFF8FFF 		.word	-7340033
 147              		.cfi_endproc
 148              	.LFE6:
 149              		.size	PWM_Volume_SetQDMode, .-PWM_Volume_SetQDMode
 150              		.section	.text.PWM_Volume_SetPrescaler,"ax",%progbits
 151              		.align	2
 152              		.global	PWM_Volume_SetPrescaler
 153              		.code	16
 154              		.thumb_func
 155              		.type	PWM_Volume_SetPrescaler, %function
 156              	PWM_Volume_SetPrescaler:
 157              	.LFB7:
 337:Generated_Source\PSoC4/PWM_Volume.c **** 
 338:Generated_Source\PSoC4/PWM_Volume.c **** 
 339:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 340:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPrescaler
 341:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 342:Generated_Source\PSoC4/PWM_Volume.c **** *
 343:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 344:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 345:Generated_Source\PSoC4/PWM_Volume.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 346:Generated_Source\PSoC4/PWM_Volume.c **** *
 347:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 348:Generated_Source\PSoC4/PWM_Volume.c **** *  prescaler: Prescaler divider value
 349:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 350:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 351:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY2    - Divide by 2
 352:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY4    - Divide by 4
 353:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY8    - Divide by 8
 354:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY16   - Divide by 16
 355:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY32   - Divide by 32
 356:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY64   - Divide by 64
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 10


 357:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_PRESCALE_DIVBY128  - Divide by 128
 358:Generated_Source\PSoC4/PWM_Volume.c **** *
 359:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 360:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 361:Generated_Source\PSoC4/PWM_Volume.c **** *
 362:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 363:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPrescaler(uint32 prescaler)
 364:Generated_Source\PSoC4/PWM_Volume.c **** {
 158              		.loc 1 364 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              	.LVL10:
 163 0000 10B5     		push	{r4, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 4, -8
 166              		.cfi_offset 14, -4
 167 0002 0400     		movs	r4, r0
 365:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 366:Generated_Source\PSoC4/PWM_Volume.c **** 
 367:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 168              		.loc 1 367 0
 169 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 170              	.LVL11:
 368:Generated_Source\PSoC4/PWM_Volume.c **** 
 369:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_PRESCALER_MASK;
 171              		.loc 1 369 0
 172 0008 054B     		ldr	r3, .L11
 173 000a 1968     		ldr	r1, [r3]
 174 000c 054A     		ldr	r2, .L11+4
 175 000e 0A40     		ands	r2, r1
 176 0010 1A60     		str	r2, [r3]
 370:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= prescaler;
 177              		.loc 1 370 0
 178 0012 1A68     		ldr	r2, [r3]
 179 0014 1443     		orrs	r4, r2
 180              	.LVL12:
 181 0016 1C60     		str	r4, [r3]
 371:Generated_Source\PSoC4/PWM_Volume.c **** 
 372:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 182              		.loc 1 372 0
 183 0018 FFF7FEFF 		bl	CyExitCriticalSection
 184              	.LVL13:
 373:Generated_Source\PSoC4/PWM_Volume.c **** }
 185              		.loc 1 373 0
 186              		@ sp needed
 187 001c 10BD     		pop	{r4, pc}
 188              	.L12:
 189 001e C046     		.align	2
 190              	.L11:
 191 0020 C0012040 		.word	1075839424
 192 0024 FF00FFFF 		.word	-65281
 193              		.cfi_endproc
 194              	.LFE7:
 195              		.size	PWM_Volume_SetPrescaler, .-PWM_Volume_SetPrescaler
 196              		.section	.text.PWM_Volume_SetOneShot,"ax",%progbits
 197              		.align	2
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 11


 198              		.global	PWM_Volume_SetOneShot
 199              		.code	16
 200              		.thumb_func
 201              		.type	PWM_Volume_SetOneShot, %function
 202              	PWM_Volume_SetOneShot:
 203              	.LFB8:
 374:Generated_Source\PSoC4/PWM_Volume.c **** 
 375:Generated_Source\PSoC4/PWM_Volume.c **** 
 376:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 377:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetOneShot
 378:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 379:Generated_Source\PSoC4/PWM_Volume.c **** *
 380:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 381:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the register that controls whether the PWM_Volume runs
 382:Generated_Source\PSoC4/PWM_Volume.c **** *  continuously or stops when terminal count is reached.  By default the
 383:Generated_Source\PSoC4/PWM_Volume.c **** *  PWM_Volume operates in the continuous mode.
 384:Generated_Source\PSoC4/PWM_Volume.c **** *
 385:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 386:Generated_Source\PSoC4/PWM_Volume.c **** *  oneShotEnable
 387:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 388:Generated_Source\PSoC4/PWM_Volume.c **** *     - 0 - Continuous
 389:Generated_Source\PSoC4/PWM_Volume.c **** *     - 1 - Enable One Shot
 390:Generated_Source\PSoC4/PWM_Volume.c **** *
 391:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 392:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 393:Generated_Source\PSoC4/PWM_Volume.c **** *
 394:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 395:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetOneShot(uint32 oneShotEnable)
 396:Generated_Source\PSoC4/PWM_Volume.c **** {
 204              		.loc 1 396 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              	.LVL14:
 209 0000 70B5     		push	{r4, r5, r6, lr}
 210              		.cfi_def_cfa_offset 16
 211              		.cfi_offset 4, -16
 212              		.cfi_offset 5, -12
 213              		.cfi_offset 6, -8
 214              		.cfi_offset 14, -4
 215 0002 0400     		movs	r4, r0
 397:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 398:Generated_Source\PSoC4/PWM_Volume.c **** 
 399:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 216              		.loc 1 399 0
 217 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 218              	.LVL15:
 400:Generated_Source\PSoC4/PWM_Volume.c **** 
 401:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_ONESHOT_MASK;
 219              		.loc 1 401 0
 220 0008 0749     		ldr	r1, .L14
 221 000a 0A68     		ldr	r2, [r1]
 222 000c 074B     		ldr	r3, .L14+4
 223 000e 1340     		ands	r3, r2
 224 0010 0B60     		str	r3, [r1]
 402:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_Volume_1BIT_MASK) <<
 225              		.loc 1 402 0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 12


 226 0012 0D68     		ldr	r5, [r1]
 227 0014 A304     		lsls	r3, r4, #18
 228 0016 8022     		movs	r2, #128
 229 0018 D202     		lsls	r2, r2, #11
 230 001a 1340     		ands	r3, r2
 231 001c 2B43     		orrs	r3, r5
 232 001e 0B60     		str	r3, [r1]
 403:Generated_Source\PSoC4/PWM_Volume.c ****                                                                PWM_Volume_ONESHOT_SHIFT));
 404:Generated_Source\PSoC4/PWM_Volume.c **** 
 405:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 233              		.loc 1 405 0
 234 0020 FFF7FEFF 		bl	CyExitCriticalSection
 235              	.LVL16:
 406:Generated_Source\PSoC4/PWM_Volume.c **** }
 236              		.loc 1 406 0
 237              		@ sp needed
 238              	.LVL17:
 239 0024 70BD     		pop	{r4, r5, r6, pc}
 240              	.L15:
 241 0026 C046     		.align	2
 242              	.L14:
 243 0028 C0012040 		.word	1075839424
 244 002c FFFFFBFF 		.word	-262145
 245              		.cfi_endproc
 246              	.LFE8:
 247              		.size	PWM_Volume_SetOneShot, .-PWM_Volume_SetOneShot
 248              		.section	.text.PWM_Volume_SetPWMMode,"ax",%progbits
 249              		.align	2
 250              		.global	PWM_Volume_SetPWMMode
 251              		.code	16
 252              		.thumb_func
 253              		.type	PWM_Volume_SetPWMMode, %function
 254              	PWM_Volume_SetPWMMode:
 255              	.LFB9:
 407:Generated_Source\PSoC4/PWM_Volume.c **** 
 408:Generated_Source\PSoC4/PWM_Volume.c **** 
 409:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 410:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPWMMode
 411:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 412:Generated_Source\PSoC4/PWM_Volume.c **** *
 413:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 414:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the control register that determines what mode of operation the PWM
 415:Generated_Source\PSoC4/PWM_Volume.c **** *  output lines are driven in.  There is a setting for what to do on a
 416:Generated_Source\PSoC4/PWM_Volume.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 417:Generated_Source\PSoC4/PWM_Volume.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
 418:Generated_Source\PSoC4/PWM_Volume.c **** *  the mode.
 419:Generated_Source\PSoC4/PWM_Volume.c **** *
 420:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 421:Generated_Source\PSoC4/PWM_Volume.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 422:Generated_Source\PSoC4/PWM_Volume.c **** *  for each of the three or use one of the preconfigured PWM settings.
 423:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 424:Generated_Source\PSoC4/PWM_Volume.c **** *     - CC_MATCH_SET        - Set on comparison match
 425:Generated_Source\PSoC4/PWM_Volume.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 426:Generated_Source\PSoC4/PWM_Volume.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 427:Generated_Source\PSoC4/PWM_Volume.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 428:Generated_Source\PSoC4/PWM_Volume.c **** *     - OVERLOW_SET         - Set on overflow
 429:Generated_Source\PSoC4/PWM_Volume.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 13


 430:Generated_Source\PSoC4/PWM_Volume.c **** *     - OVERLOW_INVERT      - Invert on overflow
 431:Generated_Source\PSoC4/PWM_Volume.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 432:Generated_Source\PSoC4/PWM_Volume.c **** *     - UNDERFLOW_SET       - Set on underflow
 433:Generated_Source\PSoC4/PWM_Volume.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 434:Generated_Source\PSoC4/PWM_Volume.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 435:Generated_Source\PSoC4/PWM_Volume.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 436:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 437:Generated_Source\PSoC4/PWM_Volume.c **** *                             with up counting mode
 438:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 439:Generated_Source\PSoC4/PWM_Volume.c **** *                             with down counting mode
 440:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 441:Generated_Source\PSoC4/PWM_Volume.c **** *                             combined with up/down 0 mode
 442:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 443:Generated_Source\PSoC4/PWM_Volume.c **** *                             with up/down 1 mode
 444:Generated_Source\PSoC4/PWM_Volume.c **** *
 445:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 446:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 447:Generated_Source\PSoC4/PWM_Volume.c **** *
 448:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 449:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPWMMode(uint32 modeMask)
 450:Generated_Source\PSoC4/PWM_Volume.c **** {
 256              		.loc 1 450 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL18:
 451:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL2_REG = (modeMask & PWM_Volume_6BIT_MASK);
 262              		.loc 1 451 0
 263 0000 3F23     		movs	r3, #63
 264 0002 1840     		ands	r0, r3
 265              	.LVL19:
 266 0004 014B     		ldr	r3, .L17
 267 0006 1860     		str	r0, [r3]
 452:Generated_Source\PSoC4/PWM_Volume.c **** }
 268              		.loc 1 452 0
 269              		@ sp needed
 270 0008 7047     		bx	lr
 271              	.L18:
 272 000a C046     		.align	2
 273              	.L17:
 274 000c E8012040 		.word	1075839464
 275              		.cfi_endproc
 276              	.LFE9:
 277              		.size	PWM_Volume_SetPWMMode, .-PWM_Volume_SetPWMMode
 278              		.section	.text.PWM_Volume_SetPWMSyncKill,"ax",%progbits
 279              		.align	2
 280              		.global	PWM_Volume_SetPWMSyncKill
 281              		.code	16
 282              		.thumb_func
 283              		.type	PWM_Volume_SetPWMSyncKill, %function
 284              	PWM_Volume_SetPWMSyncKill:
 285              	.LFB10:
 453:Generated_Source\PSoC4/PWM_Volume.c **** 
 454:Generated_Source\PSoC4/PWM_Volume.c **** 
 455:Generated_Source\PSoC4/PWM_Volume.c **** 
 456:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 14


 457:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPWMSyncKill
 458:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 459:Generated_Source\PSoC4/PWM_Volume.c **** *
 460:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 461:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 462:Generated_Source\PSoC4/PWM_Volume.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 463:Generated_Source\PSoC4/PWM_Volume.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 464:Generated_Source\PSoC4/PWM_Volume.c **** *  and PWM with dead time modes.
 465:Generated_Source\PSoC4/PWM_Volume.c **** *
 466:Generated_Source\PSoC4/PWM_Volume.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 467:Generated_Source\PSoC4/PWM_Volume.c **** *  signals until the next terminal count.
 468:Generated_Source\PSoC4/PWM_Volume.c **** *
 469:Generated_Source\PSoC4/PWM_Volume.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 470:Generated_Source\PSoC4/PWM_Volume.c **** *  signals when the kill signal is present.  This mode should only be used
 471:Generated_Source\PSoC4/PWM_Volume.c **** *  when the kill signal (stop input) is configured in the pass through mode
 472:Generated_Source\PSoC4/PWM_Volume.c **** *  (Level sensitive signal).
 473:Generated_Source\PSoC4/PWM_Volume.c **** 
 474:Generated_Source\PSoC4/PWM_Volume.c **** *
 475:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 476:Generated_Source\PSoC4/PWM_Volume.c **** *  syncKillEnable
 477:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 478:Generated_Source\PSoC4/PWM_Volume.c **** *     - 0 - Asynchronous
 479:Generated_Source\PSoC4/PWM_Volume.c **** *     - 1 - Synchronous
 480:Generated_Source\PSoC4/PWM_Volume.c **** *
 481:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 482:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 483:Generated_Source\PSoC4/PWM_Volume.c **** *
 484:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 485:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPWMSyncKill(uint32 syncKillEnable)
 486:Generated_Source\PSoC4/PWM_Volume.c **** {
 286              		.loc 1 486 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL20:
 291 0000 70B5     		push	{r4, r5, r6, lr}
 292              		.cfi_def_cfa_offset 16
 293              		.cfi_offset 4, -16
 294              		.cfi_offset 5, -12
 295              		.cfi_offset 6, -8
 296              		.cfi_offset 14, -4
 297 0002 0400     		movs	r4, r0
 487:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 488:Generated_Source\PSoC4/PWM_Volume.c **** 
 489:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 298              		.loc 1 489 0
 299 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 300              	.LVL21:
 490:Generated_Source\PSoC4/PWM_Volume.c **** 
 491:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_PWM_SYNC_KILL_MASK;
 301              		.loc 1 491 0
 302 0008 064A     		ldr	r2, .L20
 303 000a 1368     		ldr	r3, [r2]
 304 000c 0421     		movs	r1, #4
 305 000e 8B43     		bics	r3, r1
 306 0010 1360     		str	r3, [r2]
 492:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_Volume_1BIT_MASK)  <<
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 15


 307              		.loc 1 492 0
 308 0012 1568     		ldr	r5, [r2]
 309 0014 A300     		lsls	r3, r4, #2
 310 0016 1940     		ands	r1, r3
 311 0018 0C00     		movs	r4, r1
 312              	.LVL22:
 313 001a 2C43     		orrs	r4, r5
 314 001c 1460     		str	r4, [r2]
 493:Generated_Source\PSoC4/PWM_Volume.c ****                                                PWM_Volume_PWM_SYNC_KILL_SHIFT));
 494:Generated_Source\PSoC4/PWM_Volume.c **** 
 495:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 315              		.loc 1 495 0
 316 001e FFF7FEFF 		bl	CyExitCriticalSection
 317              	.LVL23:
 496:Generated_Source\PSoC4/PWM_Volume.c **** }
 318              		.loc 1 496 0
 319              		@ sp needed
 320 0022 70BD     		pop	{r4, r5, r6, pc}
 321              	.L21:
 322              		.align	2
 323              	.L20:
 324 0024 C0012040 		.word	1075839424
 325              		.cfi_endproc
 326              	.LFE10:
 327              		.size	PWM_Volume_SetPWMSyncKill, .-PWM_Volume_SetPWMSyncKill
 328              		.section	.text.PWM_Volume_SetPWMStopOnKill,"ax",%progbits
 329              		.align	2
 330              		.global	PWM_Volume_SetPWMStopOnKill
 331              		.code	16
 332              		.thumb_func
 333              		.type	PWM_Volume_SetPWMStopOnKill, %function
 334              	PWM_Volume_SetPWMStopOnKill:
 335              	.LFB11:
 497:Generated_Source\PSoC4/PWM_Volume.c **** 
 498:Generated_Source\PSoC4/PWM_Volume.c **** 
 499:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 500:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPWMStopOnKill
 501:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 502:Generated_Source\PSoC4/PWM_Volume.c **** *
 503:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 504:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 505:Generated_Source\PSoC4/PWM_Volume.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 506:Generated_Source\PSoC4/PWM_Volume.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 507:Generated_Source\PSoC4/PWM_Volume.c **** *
 508:Generated_Source\PSoC4/PWM_Volume.c **** *
 509:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 510:Generated_Source\PSoC4/PWM_Volume.c **** *  stopOnKillEnable
 511:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 512:Generated_Source\PSoC4/PWM_Volume.c **** *     - 0 - Don't stop
 513:Generated_Source\PSoC4/PWM_Volume.c **** *     - 1 - Stop
 514:Generated_Source\PSoC4/PWM_Volume.c **** *
 515:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 516:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 517:Generated_Source\PSoC4/PWM_Volume.c **** *
 518:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 519:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPWMStopOnKill(uint32 stopOnKillEnable)
 520:Generated_Source\PSoC4/PWM_Volume.c **** {
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 16


 336              		.loc 1 520 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              	.LVL24:
 341 0000 70B5     		push	{r4, r5, r6, lr}
 342              		.cfi_def_cfa_offset 16
 343              		.cfi_offset 4, -16
 344              		.cfi_offset 5, -12
 345              		.cfi_offset 6, -8
 346              		.cfi_offset 14, -4
 347 0002 0400     		movs	r4, r0
 521:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 522:Generated_Source\PSoC4/PWM_Volume.c **** 
 523:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 348              		.loc 1 523 0
 349 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 350              	.LVL25:
 524:Generated_Source\PSoC4/PWM_Volume.c **** 
 525:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_PWM_STOP_KILL_MASK;
 351              		.loc 1 525 0
 352 0008 064A     		ldr	r2, .L23
 353 000a 1368     		ldr	r3, [r2]
 354 000c 0821     		movs	r1, #8
 355 000e 8B43     		bics	r3, r1
 356 0010 1360     		str	r3, [r2]
 526:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_Volume_1BIT_MASK)  <<
 357              		.loc 1 526 0
 358 0012 1568     		ldr	r5, [r2]
 359 0014 E300     		lsls	r3, r4, #3
 360 0016 1940     		ands	r1, r3
 361 0018 0C00     		movs	r4, r1
 362              	.LVL26:
 363 001a 2C43     		orrs	r4, r5
 364 001c 1460     		str	r4, [r2]
 527:Generated_Source\PSoC4/PWM_Volume.c ****                                                          PWM_Volume_PWM_STOP_KILL_SHIFT));
 528:Generated_Source\PSoC4/PWM_Volume.c **** 
 529:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 365              		.loc 1 529 0
 366 001e FFF7FEFF 		bl	CyExitCriticalSection
 367              	.LVL27:
 530:Generated_Source\PSoC4/PWM_Volume.c **** }
 368              		.loc 1 530 0
 369              		@ sp needed
 370 0022 70BD     		pop	{r4, r5, r6, pc}
 371              	.L24:
 372              		.align	2
 373              	.L23:
 374 0024 C0012040 		.word	1075839424
 375              		.cfi_endproc
 376              	.LFE11:
 377              		.size	PWM_Volume_SetPWMStopOnKill, .-PWM_Volume_SetPWMStopOnKill
 378              		.section	.text.PWM_Volume_SetPWMDeadTime,"ax",%progbits
 379              		.align	2
 380              		.global	PWM_Volume_SetPWMDeadTime
 381              		.code	16
 382              		.thumb_func
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 17


 383              		.type	PWM_Volume_SetPWMDeadTime, %function
 384              	PWM_Volume_SetPWMDeadTime:
 385              	.LFB12:
 531:Generated_Source\PSoC4/PWM_Volume.c **** 
 532:Generated_Source\PSoC4/PWM_Volume.c **** 
 533:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 534:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPWMDeadTime
 535:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 536:Generated_Source\PSoC4/PWM_Volume.c **** *
 537:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 538:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the dead time control value.  This value delays the rising edge of
 539:Generated_Source\PSoC4/PWM_Volume.c **** *  both the line and line_n signals the designated number of cycles resulting
 540:Generated_Source\PSoC4/PWM_Volume.c **** *  in both signals being inactive for that many cycles.  This functionality is
 541:Generated_Source\PSoC4/PWM_Volume.c **** *  only applicable to the PWM in the dead time mode.
 542:Generated_Source\PSoC4/PWM_Volume.c **** 
 543:Generated_Source\PSoC4/PWM_Volume.c **** *
 544:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 545:Generated_Source\PSoC4/PWM_Volume.c **** *  Dead time to insert
 546:Generated_Source\PSoC4/PWM_Volume.c **** *   Values: 0 to 255
 547:Generated_Source\PSoC4/PWM_Volume.c **** *
 548:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 549:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 550:Generated_Source\PSoC4/PWM_Volume.c **** *
 551:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 552:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPWMDeadTime(uint32 deadTime)
 553:Generated_Source\PSoC4/PWM_Volume.c **** {
 386              		.loc 1 553 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              	.LVL28:
 391 0000 10B5     		push	{r4, lr}
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 4, -8
 394              		.cfi_offset 14, -4
 395 0002 0400     		movs	r4, r0
 554:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 555:Generated_Source\PSoC4/PWM_Volume.c **** 
 556:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 396              		.loc 1 556 0
 397 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 398              	.LVL29:
 557:Generated_Source\PSoC4/PWM_Volume.c **** 
 558:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_PRESCALER_MASK;
 399              		.loc 1 558 0
 400 0008 064B     		ldr	r3, .L26
 401 000a 1968     		ldr	r1, [r3]
 402 000c 064A     		ldr	r2, .L26+4
 403 000e 0A40     		ands	r2, r1
 404 0010 1A60     		str	r2, [r3]
 559:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= ((uint32)((deadTime & PWM_Volume_8BIT_MASK) <<
 405              		.loc 1 559 0
 406 0012 1A68     		ldr	r2, [r3]
 407 0014 2406     		lsls	r4, r4, #24
 408              	.LVL30:
 409 0016 240C     		lsrs	r4, r4, #16
 410 0018 1443     		orrs	r4, r2
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 18


 411 001a 1C60     		str	r4, [r3]
 560:Generated_Source\PSoC4/PWM_Volume.c ****                                                           PWM_Volume_PRESCALER_SHIFT));
 561:Generated_Source\PSoC4/PWM_Volume.c **** 
 562:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 412              		.loc 1 562 0
 413 001c FFF7FEFF 		bl	CyExitCriticalSection
 414              	.LVL31:
 563:Generated_Source\PSoC4/PWM_Volume.c **** }
 415              		.loc 1 563 0
 416              		@ sp needed
 417 0020 10BD     		pop	{r4, pc}
 418              	.L27:
 419 0022 C046     		.align	2
 420              	.L26:
 421 0024 C0012040 		.word	1075839424
 422 0028 FF00FFFF 		.word	-65281
 423              		.cfi_endproc
 424              	.LFE12:
 425              		.size	PWM_Volume_SetPWMDeadTime, .-PWM_Volume_SetPWMDeadTime
 426              		.section	.text.PWM_Volume_SetPWMInvert,"ax",%progbits
 427              		.align	2
 428              		.global	PWM_Volume_SetPWMInvert
 429              		.code	16
 430              		.thumb_func
 431              		.type	PWM_Volume_SetPWMInvert, %function
 432              	PWM_Volume_SetPWMInvert:
 433              	.LFB13:
 564:Generated_Source\PSoC4/PWM_Volume.c **** 
 565:Generated_Source\PSoC4/PWM_Volume.c **** 
 566:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 567:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPWMInvert
 568:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 569:Generated_Source\PSoC4/PWM_Volume.c **** *
 570:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 571:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the bits that control whether the line and line_n outputs are
 572:Generated_Source\PSoC4/PWM_Volume.c **** *  inverted from their normal output values.  This functionality is only
 573:Generated_Source\PSoC4/PWM_Volume.c **** *  applicable to the three PWM modes.
 574:Generated_Source\PSoC4/PWM_Volume.c **** *
 575:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 576:Generated_Source\PSoC4/PWM_Volume.c **** *  mask: Mask of outputs to invert.
 577:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 578:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_INVERT_LINE   - Inverts the line output
 579:Generated_Source\PSoC4/PWM_Volume.c **** *         - PWM_Volume_INVERT_LINE_N - Inverts the line_n output
 580:Generated_Source\PSoC4/PWM_Volume.c **** *
 581:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 582:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 583:Generated_Source\PSoC4/PWM_Volume.c **** *
 584:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 585:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPWMInvert(uint32 mask)
 586:Generated_Source\PSoC4/PWM_Volume.c **** {
 434              		.loc 1 586 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL32:
 439 0000 10B5     		push	{r4, lr}
 440              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 19


 441              		.cfi_offset 4, -8
 442              		.cfi_offset 14, -4
 443 0002 0400     		movs	r4, r0
 587:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 588:Generated_Source\PSoC4/PWM_Volume.c **** 
 589:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 444              		.loc 1 589 0
 445 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 446              	.LVL33:
 590:Generated_Source\PSoC4/PWM_Volume.c **** 
 591:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_INV_OUT_MASK;
 447              		.loc 1 591 0
 448 0008 054B     		ldr	r3, .L29
 449 000a 1968     		ldr	r1, [r3]
 450 000c 054A     		ldr	r2, .L29+4
 451 000e 0A40     		ands	r2, r1
 452 0010 1A60     		str	r2, [r3]
 592:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= mask;
 453              		.loc 1 592 0
 454 0012 1A68     		ldr	r2, [r3]
 455 0014 1443     		orrs	r4, r2
 456              	.LVL34:
 457 0016 1C60     		str	r4, [r3]
 593:Generated_Source\PSoC4/PWM_Volume.c **** 
 594:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 458              		.loc 1 594 0
 459 0018 FFF7FEFF 		bl	CyExitCriticalSection
 460              	.LVL35:
 595:Generated_Source\PSoC4/PWM_Volume.c **** }
 461              		.loc 1 595 0
 462              		@ sp needed
 463 001c 10BD     		pop	{r4, pc}
 464              	.L30:
 465 001e C046     		.align	2
 466              	.L29:
 467 0020 C0012040 		.word	1075839424
 468 0024 FFFFCFFF 		.word	-3145729
 469              		.cfi_endproc
 470              	.LFE13:
 471              		.size	PWM_Volume_SetPWMInvert, .-PWM_Volume_SetPWMInvert
 472              		.section	.text.PWM_Volume_WriteCounter,"ax",%progbits
 473              		.align	2
 474              		.global	PWM_Volume_WriteCounter
 475              		.code	16
 476              		.thumb_func
 477              		.type	PWM_Volume_WriteCounter, %function
 478              	PWM_Volume_WriteCounter:
 479              	.LFB14:
 596:Generated_Source\PSoC4/PWM_Volume.c **** 
 597:Generated_Source\PSoC4/PWM_Volume.c **** 
 598:Generated_Source\PSoC4/PWM_Volume.c **** 
 599:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 600:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_WriteCounter
 601:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 602:Generated_Source\PSoC4/PWM_Volume.c **** *
 603:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 604:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes a new 16bit counter value directly into the counter register, thus
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 20


 605:Generated_Source\PSoC4/PWM_Volume.c **** *  setting the counter (not the period) to the value written. It is not
 606:Generated_Source\PSoC4/PWM_Volume.c **** *  advised to write to this field when the counter is running.
 607:Generated_Source\PSoC4/PWM_Volume.c **** *
 608:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 609:Generated_Source\PSoC4/PWM_Volume.c **** *  count: value to write
 610:Generated_Source\PSoC4/PWM_Volume.c **** *
 611:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 612:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 613:Generated_Source\PSoC4/PWM_Volume.c **** *
 614:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 615:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_WriteCounter(uint32 count)
 616:Generated_Source\PSoC4/PWM_Volume.c **** {
 480              		.loc 1 616 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485              	.LVL36:
 617:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_COUNTER_REG = (count & PWM_Volume_16BIT_MASK);
 486              		.loc 1 617 0
 487 0000 0004     		lsls	r0, r0, #16
 488              	.LVL37:
 489 0002 000C     		lsrs	r0, r0, #16
 490 0004 014B     		ldr	r3, .L32
 491 0006 1860     		str	r0, [r3]
 618:Generated_Source\PSoC4/PWM_Volume.c **** }
 492              		.loc 1 618 0
 493              		@ sp needed
 494 0008 7047     		bx	lr
 495              	.L33:
 496 000a C046     		.align	2
 497              	.L32:
 498 000c C8012040 		.word	1075839432
 499              		.cfi_endproc
 500              	.LFE14:
 501              		.size	PWM_Volume_WriteCounter, .-PWM_Volume_WriteCounter
 502              		.section	.text.PWM_Volume_ReadCounter,"ax",%progbits
 503              		.align	2
 504              		.global	PWM_Volume_ReadCounter
 505              		.code	16
 506              		.thumb_func
 507              		.type	PWM_Volume_ReadCounter, %function
 508              	PWM_Volume_ReadCounter:
 509              	.LFB15:
 619:Generated_Source\PSoC4/PWM_Volume.c **** 
 620:Generated_Source\PSoC4/PWM_Volume.c **** 
 621:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 622:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadCounter
 623:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 624:Generated_Source\PSoC4/PWM_Volume.c **** *
 625:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 626:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the current counter value.
 627:Generated_Source\PSoC4/PWM_Volume.c **** *
 628:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 629:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 630:Generated_Source\PSoC4/PWM_Volume.c **** *
 631:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 21


 632:Generated_Source\PSoC4/PWM_Volume.c **** *  Current counter value
 633:Generated_Source\PSoC4/PWM_Volume.c **** *
 634:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 635:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadCounter(void)
 636:Generated_Source\PSoC4/PWM_Volume.c **** {
 510              		.loc 1 636 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 637:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_COUNTER_REG & PWM_Volume_16BIT_MASK);
 515              		.loc 1 637 0
 516 0000 024B     		ldr	r3, .L35
 517 0002 1868     		ldr	r0, [r3]
 518 0004 0004     		lsls	r0, r0, #16
 519 0006 000C     		lsrs	r0, r0, #16
 638:Generated_Source\PSoC4/PWM_Volume.c **** }
 520              		.loc 1 638 0
 521              		@ sp needed
 522 0008 7047     		bx	lr
 523              	.L36:
 524 000a C046     		.align	2
 525              	.L35:
 526 000c C8012040 		.word	1075839432
 527              		.cfi_endproc
 528              	.LFE15:
 529              		.size	PWM_Volume_ReadCounter, .-PWM_Volume_ReadCounter
 530              		.section	.text.PWM_Volume_SetCounterMode,"ax",%progbits
 531              		.align	2
 532              		.global	PWM_Volume_SetCounterMode
 533              		.code	16
 534              		.thumb_func
 535              		.type	PWM_Volume_SetCounterMode, %function
 536              	PWM_Volume_SetCounterMode:
 537              	.LFB16:
 639:Generated_Source\PSoC4/PWM_Volume.c **** 
 640:Generated_Source\PSoC4/PWM_Volume.c **** 
 641:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 642:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetCounterMode
 643:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 644:Generated_Source\PSoC4/PWM_Volume.c **** *
 645:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 646:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 647:Generated_Source\PSoC4/PWM_Volume.c **** *  and the PWM with a pseudo random output.
 648:Generated_Source\PSoC4/PWM_Volume.c **** *
 649:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 650:Generated_Source\PSoC4/PWM_Volume.c **** *  counterMode: Enumerated counter type values
 651:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 652:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_COUNT_UP       - Counts up
 653:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_COUNT_DOWN     - Counts down
 654:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_COUNT_UPDOWN0  - Counts up and down. Terminal count
 655:Generated_Source\PSoC4/PWM_Volume.c **** *                                         generated when counter reaches 0
 656:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_COUNT_UPDOWN1  - Counts up and down. Terminal count
 657:Generated_Source\PSoC4/PWM_Volume.c **** *                                         generated both when counter reaches 0
 658:Generated_Source\PSoC4/PWM_Volume.c **** *                                         and period
 659:Generated_Source\PSoC4/PWM_Volume.c **** *
 660:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 22


 661:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 662:Generated_Source\PSoC4/PWM_Volume.c **** *
 663:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 664:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetCounterMode(uint32 counterMode)
 665:Generated_Source\PSoC4/PWM_Volume.c **** {
 538              		.loc 1 665 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              	.LVL38:
 543 0000 10B5     		push	{r4, lr}
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 4, -8
 546              		.cfi_offset 14, -4
 547 0002 0400     		movs	r4, r0
 666:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 667:Generated_Source\PSoC4/PWM_Volume.c **** 
 668:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 548              		.loc 1 668 0
 549 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 550              	.LVL39:
 669:Generated_Source\PSoC4/PWM_Volume.c **** 
 670:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_UPDOWN_MASK;
 551              		.loc 1 670 0
 552 0008 054B     		ldr	r3, .L38
 553 000a 1968     		ldr	r1, [r3]
 554 000c 054A     		ldr	r2, .L38+4
 555 000e 0A40     		ands	r2, r1
 556 0010 1A60     		str	r2, [r3]
 671:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= counterMode;
 557              		.loc 1 671 0
 558 0012 1A68     		ldr	r2, [r3]
 559 0014 1443     		orrs	r4, r2
 560              	.LVL40:
 561 0016 1C60     		str	r4, [r3]
 672:Generated_Source\PSoC4/PWM_Volume.c **** 
 673:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 562              		.loc 1 673 0
 563 0018 FFF7FEFF 		bl	CyExitCriticalSection
 564              	.LVL41:
 674:Generated_Source\PSoC4/PWM_Volume.c **** }
 565              		.loc 1 674 0
 566              		@ sp needed
 567 001c 10BD     		pop	{r4, pc}
 568              	.L39:
 569 001e C046     		.align	2
 570              	.L38:
 571 0020 C0012040 		.word	1075839424
 572 0024 FFFFFCFF 		.word	-196609
 573              		.cfi_endproc
 574              	.LFE16:
 575              		.size	PWM_Volume_SetCounterMode, .-PWM_Volume_SetCounterMode
 576              		.section	.text.PWM_Volume_WritePeriod,"ax",%progbits
 577              		.align	2
 578              		.global	PWM_Volume_WritePeriod
 579              		.code	16
 580              		.thumb_func
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 23


 581              		.type	PWM_Volume_WritePeriod, %function
 582              	PWM_Volume_WritePeriod:
 583              	.LFB17:
 675:Generated_Source\PSoC4/PWM_Volume.c **** 
 676:Generated_Source\PSoC4/PWM_Volume.c **** 
 677:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 678:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_WritePeriod
 679:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 680:Generated_Source\PSoC4/PWM_Volume.c **** *
 681:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 682:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the 16 bit period register with the new period value.
 683:Generated_Source\PSoC4/PWM_Volume.c **** *  To cause the counter to count for N cycles this register should be written
 684:Generated_Source\PSoC4/PWM_Volume.c **** *  with N-1 (counts from 0 to period inclusive).
 685:Generated_Source\PSoC4/PWM_Volume.c **** *
 686:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 687:Generated_Source\PSoC4/PWM_Volume.c **** *  period: Period value
 688:Generated_Source\PSoC4/PWM_Volume.c **** *
 689:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 690:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 691:Generated_Source\PSoC4/PWM_Volume.c **** *
 692:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 693:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_WritePeriod(uint32 period)
 694:Generated_Source\PSoC4/PWM_Volume.c **** {
 584              		.loc 1 694 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589              	.LVL42:
 695:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_PERIOD_REG = (period & PWM_Volume_16BIT_MASK);
 590              		.loc 1 695 0
 591 0000 0004     		lsls	r0, r0, #16
 592              	.LVL43:
 593 0002 000C     		lsrs	r0, r0, #16
 594 0004 014B     		ldr	r3, .L41
 595 0006 1860     		str	r0, [r3]
 696:Generated_Source\PSoC4/PWM_Volume.c **** }
 596              		.loc 1 696 0
 597              		@ sp needed
 598 0008 7047     		bx	lr
 599              	.L42:
 600 000a C046     		.align	2
 601              	.L41:
 602 000c D4012040 		.word	1075839444
 603              		.cfi_endproc
 604              	.LFE17:
 605              		.size	PWM_Volume_WritePeriod, .-PWM_Volume_WritePeriod
 606              		.section	.text.PWM_Volume_ReadPeriod,"ax",%progbits
 607              		.align	2
 608              		.global	PWM_Volume_ReadPeriod
 609              		.code	16
 610              		.thumb_func
 611              		.type	PWM_Volume_ReadPeriod, %function
 612              	PWM_Volume_ReadPeriod:
 613              	.LFB18:
 697:Generated_Source\PSoC4/PWM_Volume.c **** 
 698:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 24


 699:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 700:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadPeriod
 701:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 702:Generated_Source\PSoC4/PWM_Volume.c **** *
 703:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 704:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the 16 bit period register.
 705:Generated_Source\PSoC4/PWM_Volume.c **** *
 706:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 707:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 708:Generated_Source\PSoC4/PWM_Volume.c **** *
 709:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 710:Generated_Source\PSoC4/PWM_Volume.c **** *  Period value
 711:Generated_Source\PSoC4/PWM_Volume.c **** *
 712:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 713:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadPeriod(void)
 714:Generated_Source\PSoC4/PWM_Volume.c **** {
 614              		.loc 1 714 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 715:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_PERIOD_REG & PWM_Volume_16BIT_MASK);
 619              		.loc 1 715 0
 620 0000 024B     		ldr	r3, .L44
 621 0002 1868     		ldr	r0, [r3]
 622 0004 0004     		lsls	r0, r0, #16
 623 0006 000C     		lsrs	r0, r0, #16
 716:Generated_Source\PSoC4/PWM_Volume.c **** }
 624              		.loc 1 716 0
 625              		@ sp needed
 626 0008 7047     		bx	lr
 627              	.L45:
 628 000a C046     		.align	2
 629              	.L44:
 630 000c D4012040 		.word	1075839444
 631              		.cfi_endproc
 632              	.LFE18:
 633              		.size	PWM_Volume_ReadPeriod, .-PWM_Volume_ReadPeriod
 634              		.section	.text.PWM_Volume_SetCompareSwap,"ax",%progbits
 635              		.align	2
 636              		.global	PWM_Volume_SetCompareSwap
 637              		.code	16
 638              		.thumb_func
 639              		.type	PWM_Volume_SetCompareSwap, %function
 640              	PWM_Volume_SetCompareSwap:
 641              	.LFB19:
 717:Generated_Source\PSoC4/PWM_Volume.c **** 
 718:Generated_Source\PSoC4/PWM_Volume.c **** 
 719:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 720:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetCompareSwap
 721:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 722:Generated_Source\PSoC4/PWM_Volume.c **** *
 723:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 724:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the register that controls whether the compare registers are
 725:Generated_Source\PSoC4/PWM_Volume.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 726:Generated_Source\PSoC4/PWM_Volume.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 727:Generated_Source\PSoC4/PWM_Volume.c **** *  following a hardware switch event.
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 25


 728:Generated_Source\PSoC4/PWM_Volume.c **** *
 729:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 730:Generated_Source\PSoC4/PWM_Volume.c **** *  swapEnable
 731:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 732:Generated_Source\PSoC4/PWM_Volume.c **** *     - 0 - Disable swap
 733:Generated_Source\PSoC4/PWM_Volume.c **** *     - 1 - Enable swap
 734:Generated_Source\PSoC4/PWM_Volume.c **** *
 735:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 736:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 737:Generated_Source\PSoC4/PWM_Volume.c **** *
 738:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 739:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetCompareSwap(uint32 swapEnable)
 740:Generated_Source\PSoC4/PWM_Volume.c **** {
 642              		.loc 1 740 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              	.LVL44:
 647 0000 10B5     		push	{r4, lr}
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 4, -8
 650              		.cfi_offset 14, -4
 651 0002 0400     		movs	r4, r0
 741:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 742:Generated_Source\PSoC4/PWM_Volume.c **** 
 743:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 652              		.loc 1 743 0
 653 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 654              	.LVL45:
 744:Generated_Source\PSoC4/PWM_Volume.c **** 
 745:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_RELOAD_CC_MASK;
 655              		.loc 1 745 0
 656 0008 054B     		ldr	r3, .L47
 657 000a 1A68     		ldr	r2, [r3]
 658 000c 0121     		movs	r1, #1
 659 000e 8A43     		bics	r2, r1
 660 0010 1A60     		str	r2, [r3]
 746:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= (swapEnable & PWM_Volume_1BIT_MASK);
 661              		.loc 1 746 0
 662 0012 1A68     		ldr	r2, [r3]
 663 0014 0C40     		ands	r4, r1
 664              	.LVL46:
 665 0016 1443     		orrs	r4, r2
 666 0018 1C60     		str	r4, [r3]
 747:Generated_Source\PSoC4/PWM_Volume.c **** 
 748:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 667              		.loc 1 748 0
 668 001a FFF7FEFF 		bl	CyExitCriticalSection
 669              	.LVL47:
 749:Generated_Source\PSoC4/PWM_Volume.c **** }
 670              		.loc 1 749 0
 671              		@ sp needed
 672 001e 10BD     		pop	{r4, pc}
 673              	.L48:
 674              		.align	2
 675              	.L47:
 676 0020 C0012040 		.word	1075839424
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 26


 677              		.cfi_endproc
 678              	.LFE19:
 679              		.size	PWM_Volume_SetCompareSwap, .-PWM_Volume_SetCompareSwap
 680              		.section	.text.PWM_Volume_WritePeriodBuf,"ax",%progbits
 681              		.align	2
 682              		.global	PWM_Volume_WritePeriodBuf
 683              		.code	16
 684              		.thumb_func
 685              		.type	PWM_Volume_WritePeriodBuf, %function
 686              	PWM_Volume_WritePeriodBuf:
 687              	.LFB20:
 750:Generated_Source\PSoC4/PWM_Volume.c **** 
 751:Generated_Source\PSoC4/PWM_Volume.c **** 
 752:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 753:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_WritePeriodBuf
 754:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 755:Generated_Source\PSoC4/PWM_Volume.c **** *
 756:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 757:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the 16 bit period buf register with the new period value.
 758:Generated_Source\PSoC4/PWM_Volume.c **** *
 759:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 760:Generated_Source\PSoC4/PWM_Volume.c **** *  periodBuf: Period value
 761:Generated_Source\PSoC4/PWM_Volume.c **** *
 762:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 763:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 764:Generated_Source\PSoC4/PWM_Volume.c **** *
 765:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 766:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_WritePeriodBuf(uint32 periodBuf)
 767:Generated_Source\PSoC4/PWM_Volume.c **** {
 688              		.loc 1 767 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692              		@ link register save eliminated.
 693              	.LVL48:
 768:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_PERIOD_BUF_REG = (periodBuf & PWM_Volume_16BIT_MASK);
 694              		.loc 1 768 0
 695 0000 0004     		lsls	r0, r0, #16
 696              	.LVL49:
 697 0002 000C     		lsrs	r0, r0, #16
 698 0004 014B     		ldr	r3, .L50
 699 0006 1860     		str	r0, [r3]
 769:Generated_Source\PSoC4/PWM_Volume.c **** }
 700              		.loc 1 769 0
 701              		@ sp needed
 702 0008 7047     		bx	lr
 703              	.L51:
 704 000a C046     		.align	2
 705              	.L50:
 706 000c D8012040 		.word	1075839448
 707              		.cfi_endproc
 708              	.LFE20:
 709              		.size	PWM_Volume_WritePeriodBuf, .-PWM_Volume_WritePeriodBuf
 710              		.section	.text.PWM_Volume_ReadPeriodBuf,"ax",%progbits
 711              		.align	2
 712              		.global	PWM_Volume_ReadPeriodBuf
 713              		.code	16
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 27


 714              		.thumb_func
 715              		.type	PWM_Volume_ReadPeriodBuf, %function
 716              	PWM_Volume_ReadPeriodBuf:
 717              	.LFB21:
 770:Generated_Source\PSoC4/PWM_Volume.c **** 
 771:Generated_Source\PSoC4/PWM_Volume.c **** 
 772:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 773:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadPeriodBuf
 774:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 775:Generated_Source\PSoC4/PWM_Volume.c **** *
 776:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 777:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the 16 bit period buf register.
 778:Generated_Source\PSoC4/PWM_Volume.c **** *
 779:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 780:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 781:Generated_Source\PSoC4/PWM_Volume.c **** *
 782:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 783:Generated_Source\PSoC4/PWM_Volume.c **** *  Period value
 784:Generated_Source\PSoC4/PWM_Volume.c **** *
 785:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 786:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadPeriodBuf(void)
 787:Generated_Source\PSoC4/PWM_Volume.c **** {
 718              		.loc 1 787 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 788:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_PERIOD_BUF_REG & PWM_Volume_16BIT_MASK);
 723              		.loc 1 788 0
 724 0000 024B     		ldr	r3, .L53
 725 0002 1868     		ldr	r0, [r3]
 726 0004 0004     		lsls	r0, r0, #16
 727 0006 000C     		lsrs	r0, r0, #16
 789:Generated_Source\PSoC4/PWM_Volume.c **** }
 728              		.loc 1 789 0
 729              		@ sp needed
 730 0008 7047     		bx	lr
 731              	.L54:
 732 000a C046     		.align	2
 733              	.L53:
 734 000c D8012040 		.word	1075839448
 735              		.cfi_endproc
 736              	.LFE21:
 737              		.size	PWM_Volume_ReadPeriodBuf, .-PWM_Volume_ReadPeriodBuf
 738              		.section	.text.PWM_Volume_SetPeriodSwap,"ax",%progbits
 739              		.align	2
 740              		.global	PWM_Volume_SetPeriodSwap
 741              		.code	16
 742              		.thumb_func
 743              		.type	PWM_Volume_SetPeriodSwap, %function
 744              	PWM_Volume_SetPeriodSwap:
 745              	.LFB22:
 790:Generated_Source\PSoC4/PWM_Volume.c **** 
 791:Generated_Source\PSoC4/PWM_Volume.c **** 
 792:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 793:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetPeriodSwap
 794:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 28


 795:Generated_Source\PSoC4/PWM_Volume.c **** *
 796:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 797:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the register that controls whether the period registers are
 798:Generated_Source\PSoC4/PWM_Volume.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
 799:Generated_Source\PSoC4/PWM_Volume.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 800:Generated_Source\PSoC4/PWM_Volume.c **** *  switch event.
 801:Generated_Source\PSoC4/PWM_Volume.c **** *
 802:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 803:Generated_Source\PSoC4/PWM_Volume.c **** *  swapEnable
 804:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
 805:Generated_Source\PSoC4/PWM_Volume.c **** *     - 0 - Disable swap
 806:Generated_Source\PSoC4/PWM_Volume.c **** *     - 1 - Enable swap
 807:Generated_Source\PSoC4/PWM_Volume.c **** *
 808:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 809:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 810:Generated_Source\PSoC4/PWM_Volume.c **** *
 811:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 812:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetPeriodSwap(uint32 swapEnable)
 813:Generated_Source\PSoC4/PWM_Volume.c **** {
 746              		.loc 1 813 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              	.LVL50:
 751 0000 70B5     		push	{r4, r5, r6, lr}
 752              		.cfi_def_cfa_offset 16
 753              		.cfi_offset 4, -16
 754              		.cfi_offset 5, -12
 755              		.cfi_offset 6, -8
 756              		.cfi_offset 14, -4
 757 0002 0400     		movs	r4, r0
 814:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 815:Generated_Source\PSoC4/PWM_Volume.c **** 
 816:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 758              		.loc 1 816 0
 759 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 760              	.LVL51:
 817:Generated_Source\PSoC4/PWM_Volume.c **** 
 818:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG &= (uint32)~PWM_Volume_RELOAD_PERIOD_MASK;
 761              		.loc 1 818 0
 762 0008 064A     		ldr	r2, .L56
 763 000a 1368     		ldr	r3, [r2]
 764 000c 0221     		movs	r1, #2
 765 000e 8B43     		bics	r3, r1
 766 0010 1360     		str	r3, [r2]
 819:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_CONTROL_REG |= ((uint32)((swapEnable & PWM_Volume_1BIT_MASK) <<
 767              		.loc 1 819 0
 768 0012 1568     		ldr	r5, [r2]
 769 0014 6300     		lsls	r3, r4, #1
 770 0016 1940     		ands	r1, r3
 771 0018 0C00     		movs	r4, r1
 772              	.LVL52:
 773 001a 2C43     		orrs	r4, r5
 774 001c 1460     		str	r4, [r2]
 820:Generated_Source\PSoC4/PWM_Volume.c ****                                                             PWM_Volume_RELOAD_PERIOD_SHIFT));
 821:Generated_Source\PSoC4/PWM_Volume.c **** 
 822:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 29


 775              		.loc 1 822 0
 776 001e FFF7FEFF 		bl	CyExitCriticalSection
 777              	.LVL53:
 823:Generated_Source\PSoC4/PWM_Volume.c **** }
 778              		.loc 1 823 0
 779              		@ sp needed
 780 0022 70BD     		pop	{r4, r5, r6, pc}
 781              	.L57:
 782              		.align	2
 783              	.L56:
 784 0024 C0012040 		.word	1075839424
 785              		.cfi_endproc
 786              	.LFE22:
 787              		.size	PWM_Volume_SetPeriodSwap, .-PWM_Volume_SetPeriodSwap
 788              		.section	.text.PWM_Volume_WriteCompare,"ax",%progbits
 789              		.align	2
 790              		.global	PWM_Volume_WriteCompare
 791              		.code	16
 792              		.thumb_func
 793              		.type	PWM_Volume_WriteCompare, %function
 794              	PWM_Volume_WriteCompare:
 795              	.LFB23:
 824:Generated_Source\PSoC4/PWM_Volume.c **** 
 825:Generated_Source\PSoC4/PWM_Volume.c **** 
 826:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 827:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_WriteCompare
 828:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 829:Generated_Source\PSoC4/PWM_Volume.c **** *
 830:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 831:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the 16 bit compare register with the new compare value. Not
 832:Generated_Source\PSoC4/PWM_Volume.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 833:Generated_Source\PSoC4/PWM_Volume.c **** *
 834:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 835:Generated_Source\PSoC4/PWM_Volume.c **** *  compare: Compare value
 836:Generated_Source\PSoC4/PWM_Volume.c **** *
 837:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 838:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 839:Generated_Source\PSoC4/PWM_Volume.c **** *
 840:Generated_Source\PSoC4/PWM_Volume.c **** * Note:
 841:Generated_Source\PSoC4/PWM_Volume.c **** *  It is not recommended to use the value equal to "0" or equal to 
 842:Generated_Source\PSoC4/PWM_Volume.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 843:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4100/PSoC 4200 devices.
 844:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
 845:Generated_Source\PSoC4/PWM_Volume.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 846:Generated_Source\PSoC4/PWM_Volume.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 847:Generated_Source\PSoC4/PWM_Volume.c **** *
 848:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 849:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_WriteCompare(uint32 compare)
 850:Generated_Source\PSoC4/PWM_Volume.c **** {
 796              		.loc 1 850 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 0
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800              		@ link register save eliminated.
 801              	.LVL54:
 851:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 852:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 currentMode;
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 30


 853:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 854:Generated_Source\PSoC4/PWM_Volume.c **** 
 855:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 856:Generated_Source\PSoC4/PWM_Volume.c ****         currentMode = ((PWM_Volume_CONTROL_REG & PWM_Volume_UPDOWN_MASK) >> PWM_Volume_UPDOWN_SHIFT
 857:Generated_Source\PSoC4/PWM_Volume.c **** 
 858:Generated_Source\PSoC4/PWM_Volume.c ****         if (((uint32)PWM_Volume__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 859:Generated_Source\PSoC4/PWM_Volume.c ****         {
 860:Generated_Source\PSoC4/PWM_Volume.c ****             compare++;
 861:Generated_Source\PSoC4/PWM_Volume.c ****         }
 862:Generated_Source\PSoC4/PWM_Volume.c ****         else if (((uint32)PWM_Volume__COUNT_UP == currentMode) && (0u != compare))
 863:Generated_Source\PSoC4/PWM_Volume.c ****         {
 864:Generated_Source\PSoC4/PWM_Volume.c ****             compare--;
 865:Generated_Source\PSoC4/PWM_Volume.c ****         }
 866:Generated_Source\PSoC4/PWM_Volume.c ****         else
 867:Generated_Source\PSoC4/PWM_Volume.c ****         {
 868:Generated_Source\PSoC4/PWM_Volume.c ****         }
 869:Generated_Source\PSoC4/PWM_Volume.c ****         
 870:Generated_Source\PSoC4/PWM_Volume.c ****     
 871:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 872:Generated_Source\PSoC4/PWM_Volume.c ****     
 873:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_COMP_CAP_REG = (compare & PWM_Volume_16BIT_MASK);
 802              		.loc 1 873 0
 803 0000 0004     		lsls	r0, r0, #16
 804              	.LVL55:
 805 0002 000C     		lsrs	r0, r0, #16
 806 0004 014B     		ldr	r3, .L59
 807 0006 1860     		str	r0, [r3]
 874:Generated_Source\PSoC4/PWM_Volume.c **** }
 808              		.loc 1 874 0
 809              		@ sp needed
 810 0008 7047     		bx	lr
 811              	.L60:
 812 000a C046     		.align	2
 813              	.L59:
 814 000c CC012040 		.word	1075839436
 815              		.cfi_endproc
 816              	.LFE23:
 817              		.size	PWM_Volume_WriteCompare, .-PWM_Volume_WriteCompare
 818              		.section	.text.PWM_Volume_ReadCompare,"ax",%progbits
 819              		.align	2
 820              		.global	PWM_Volume_ReadCompare
 821              		.code	16
 822              		.thumb_func
 823              		.type	PWM_Volume_ReadCompare, %function
 824              	PWM_Volume_ReadCompare:
 825              	.LFB24:
 875:Generated_Source\PSoC4/PWM_Volume.c **** 
 876:Generated_Source\PSoC4/PWM_Volume.c **** 
 877:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 878:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadCompare
 879:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 880:Generated_Source\PSoC4/PWM_Volume.c **** *
 881:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 882:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 883:Generated_Source\PSoC4/PWM_Volume.c **** *  or in Quadrature Decoder modes.
 884:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 885:Generated_Source\PSoC4/PWM_Volume.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 31


 886:Generated_Source\PSoC4/PWM_Volume.c **** *  Down counting mode (except 0x0u).
 887:Generated_Source\PSoC4/PWM_Volume.c **** *
 888:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 889:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 890:Generated_Source\PSoC4/PWM_Volume.c **** *
 891:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 892:Generated_Source\PSoC4/PWM_Volume.c **** *  Compare value
 893:Generated_Source\PSoC4/PWM_Volume.c **** *
 894:Generated_Source\PSoC4/PWM_Volume.c **** * Note:
 895:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 896:Generated_Source\PSoC4/PWM_Volume.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 897:Generated_Source\PSoC4/PWM_Volume.c **** *  Down counting mode (except 0x0u).
 898:Generated_Source\PSoC4/PWM_Volume.c **** *
 899:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 900:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadCompare(void)
 901:Generated_Source\PSoC4/PWM_Volume.c **** {
 826              		.loc 1 901 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              		@ link register save eliminated.
 902:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 903:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 currentMode;
 904:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 regVal;
 905:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 906:Generated_Source\PSoC4/PWM_Volume.c **** 
 907:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 908:Generated_Source\PSoC4/PWM_Volume.c ****         currentMode = ((PWM_Volume_CONTROL_REG & PWM_Volume_UPDOWN_MASK) >> PWM_Volume_UPDOWN_SHIFT
 909:Generated_Source\PSoC4/PWM_Volume.c ****         
 910:Generated_Source\PSoC4/PWM_Volume.c ****         regVal = PWM_Volume_COMP_CAP_REG;
 911:Generated_Source\PSoC4/PWM_Volume.c ****         
 912:Generated_Source\PSoC4/PWM_Volume.c ****         if (((uint32)PWM_Volume__COUNT_DOWN == currentMode) && (0u != regVal))
 913:Generated_Source\PSoC4/PWM_Volume.c ****         {
 914:Generated_Source\PSoC4/PWM_Volume.c ****             regVal--;
 915:Generated_Source\PSoC4/PWM_Volume.c ****         }
 916:Generated_Source\PSoC4/PWM_Volume.c ****         else if (((uint32)PWM_Volume__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 917:Generated_Source\PSoC4/PWM_Volume.c ****         {
 918:Generated_Source\PSoC4/PWM_Volume.c ****             regVal++;
 919:Generated_Source\PSoC4/PWM_Volume.c ****         }
 920:Generated_Source\PSoC4/PWM_Volume.c ****         else
 921:Generated_Source\PSoC4/PWM_Volume.c ****         {
 922:Generated_Source\PSoC4/PWM_Volume.c ****         }
 923:Generated_Source\PSoC4/PWM_Volume.c **** 
 924:Generated_Source\PSoC4/PWM_Volume.c ****         return (regVal & PWM_Volume_16BIT_MASK);
 925:Generated_Source\PSoC4/PWM_Volume.c ****     #else
 926:Generated_Source\PSoC4/PWM_Volume.c ****         return (PWM_Volume_COMP_CAP_REG & PWM_Volume_16BIT_MASK);
 831              		.loc 1 926 0
 832 0000 024B     		ldr	r3, .L62
 833 0002 1868     		ldr	r0, [r3]
 834 0004 0004     		lsls	r0, r0, #16
 835 0006 000C     		lsrs	r0, r0, #16
 927:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 928:Generated_Source\PSoC4/PWM_Volume.c **** }
 836              		.loc 1 928 0
 837              		@ sp needed
 838 0008 7047     		bx	lr
 839              	.L63:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 32


 840 000a C046     		.align	2
 841              	.L62:
 842 000c CC012040 		.word	1075839436
 843              		.cfi_endproc
 844              	.LFE24:
 845              		.size	PWM_Volume_ReadCompare, .-PWM_Volume_ReadCompare
 846              		.section	.text.PWM_Volume_WriteCompareBuf,"ax",%progbits
 847              		.align	2
 848              		.global	PWM_Volume_WriteCompareBuf
 849              		.code	16
 850              		.thumb_func
 851              		.type	PWM_Volume_WriteCompareBuf, %function
 852              	PWM_Volume_WriteCompareBuf:
 853              	.LFB25:
 929:Generated_Source\PSoC4/PWM_Volume.c **** 
 930:Generated_Source\PSoC4/PWM_Volume.c **** 
 931:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 932:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_WriteCompareBuf
 933:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 934:Generated_Source\PSoC4/PWM_Volume.c **** *
 935:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 936:Generated_Source\PSoC4/PWM_Volume.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 937:Generated_Source\PSoC4/PWM_Volume.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 938:Generated_Source\PSoC4/PWM_Volume.c **** *
 939:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 940:Generated_Source\PSoC4/PWM_Volume.c **** *  compareBuf: Compare value
 941:Generated_Source\PSoC4/PWM_Volume.c **** *
 942:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 943:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 944:Generated_Source\PSoC4/PWM_Volume.c **** *
 945:Generated_Source\PSoC4/PWM_Volume.c **** * Note:
 946:Generated_Source\PSoC4/PWM_Volume.c **** *  It is not recommended to use the value equal to "0" or equal to 
 947:Generated_Source\PSoC4/PWM_Volume.c **** *  "period value" in Center or Asymmetric align PWM modes on the 
 948:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4100/PSoC 4200 devices.
 949:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4000 devices write the 16 bit compare register with the decremented 
 950:Generated_Source\PSoC4/PWM_Volume.c **** *  compare value in the Up counting mode (except 0x0u), and the incremented 
 951:Generated_Source\PSoC4/PWM_Volume.c **** *  compare value in the Down counting mode (except 0xFFFFu).
 952:Generated_Source\PSoC4/PWM_Volume.c **** *
 953:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
 954:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_WriteCompareBuf(uint32 compareBuf)
 955:Generated_Source\PSoC4/PWM_Volume.c **** {
 854              		.loc 1 955 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 859              	.LVL56:
 956:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 957:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 currentMode;
 958:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 959:Generated_Source\PSoC4/PWM_Volume.c **** 
 960:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
 961:Generated_Source\PSoC4/PWM_Volume.c ****         currentMode = ((PWM_Volume_CONTROL_REG & PWM_Volume_UPDOWN_MASK) >> PWM_Volume_UPDOWN_SHIFT
 962:Generated_Source\PSoC4/PWM_Volume.c **** 
 963:Generated_Source\PSoC4/PWM_Volume.c ****         if (((uint32)PWM_Volume__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 964:Generated_Source\PSoC4/PWM_Volume.c ****         {
 965:Generated_Source\PSoC4/PWM_Volume.c ****             compareBuf++;
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 33


 966:Generated_Source\PSoC4/PWM_Volume.c ****         }
 967:Generated_Source\PSoC4/PWM_Volume.c ****         else if (((uint32)PWM_Volume__COUNT_UP == currentMode) && (0u != compareBuf))
 968:Generated_Source\PSoC4/PWM_Volume.c ****         {
 969:Generated_Source\PSoC4/PWM_Volume.c ****             compareBuf --;
 970:Generated_Source\PSoC4/PWM_Volume.c ****         }
 971:Generated_Source\PSoC4/PWM_Volume.c ****         else
 972:Generated_Source\PSoC4/PWM_Volume.c ****         {
 973:Generated_Source\PSoC4/PWM_Volume.c ****         }
 974:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
 975:Generated_Source\PSoC4/PWM_Volume.c ****     
 976:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_COMP_CAP_BUF_REG = (compareBuf & PWM_Volume_16BIT_MASK);
 860              		.loc 1 976 0
 861 0000 0004     		lsls	r0, r0, #16
 862              	.LVL57:
 863 0002 000C     		lsrs	r0, r0, #16
 864 0004 014B     		ldr	r3, .L65
 865 0006 1860     		str	r0, [r3]
 977:Generated_Source\PSoC4/PWM_Volume.c **** }
 866              		.loc 1 977 0
 867              		@ sp needed
 868 0008 7047     		bx	lr
 869              	.L66:
 870 000a C046     		.align	2
 871              	.L65:
 872 000c D0012040 		.word	1075839440
 873              		.cfi_endproc
 874              	.LFE25:
 875              		.size	PWM_Volume_WriteCompareBuf, .-PWM_Volume_WriteCompareBuf
 876              		.section	.text.PWM_Volume_ReadCompareBuf,"ax",%progbits
 877              		.align	2
 878              		.global	PWM_Volume_ReadCompareBuf
 879              		.code	16
 880              		.thumb_func
 881              		.type	PWM_Volume_ReadCompareBuf, %function
 882              	PWM_Volume_ReadCompareBuf:
 883              	.LFB26:
 978:Generated_Source\PSoC4/PWM_Volume.c **** 
 979:Generated_Source\PSoC4/PWM_Volume.c **** 
 980:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
 981:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadCompareBuf
 982:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
 983:Generated_Source\PSoC4/PWM_Volume.c **** *
 984:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
 985:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
 986:Generated_Source\PSoC4/PWM_Volume.c **** *  Capture or in Quadrature Decoder modes.
 987:Generated_Source\PSoC4/PWM_Volume.c **** *
 988:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
 989:Generated_Source\PSoC4/PWM_Volume.c **** *  None
 990:Generated_Source\PSoC4/PWM_Volume.c **** *
 991:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
 992:Generated_Source\PSoC4/PWM_Volume.c **** *  Compare buffer value
 993:Generated_Source\PSoC4/PWM_Volume.c **** *
 994:Generated_Source\PSoC4/PWM_Volume.c **** * Note:
 995:Generated_Source\PSoC4/PWM_Volume.c **** *  PSoC 4000 devices read the incremented compare register value in the 
 996:Generated_Source\PSoC4/PWM_Volume.c **** *  Up counting mode (except 0xFFFFu), and the decremented value in the 
 997:Generated_Source\PSoC4/PWM_Volume.c **** *  Down counting mode (except 0x0u).
 998:Generated_Source\PSoC4/PWM_Volume.c **** *
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 34


 999:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1000:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadCompareBuf(void)
1001:Generated_Source\PSoC4/PWM_Volume.c **** {
 884              		.loc 1 1001 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              		@ link register save eliminated.
1002:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
1003:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 currentMode;
1004:Generated_Source\PSoC4/PWM_Volume.c ****         uint32 regVal;
1005:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
1006:Generated_Source\PSoC4/PWM_Volume.c **** 
1007:Generated_Source\PSoC4/PWM_Volume.c ****     #if (PWM_Volume_CY_TCPWM_4000)
1008:Generated_Source\PSoC4/PWM_Volume.c ****         currentMode = ((PWM_Volume_CONTROL_REG & PWM_Volume_UPDOWN_MASK) >> PWM_Volume_UPDOWN_SHIFT
1009:Generated_Source\PSoC4/PWM_Volume.c **** 
1010:Generated_Source\PSoC4/PWM_Volume.c ****         regVal = PWM_Volume_COMP_CAP_BUF_REG;
1011:Generated_Source\PSoC4/PWM_Volume.c ****         
1012:Generated_Source\PSoC4/PWM_Volume.c ****         if (((uint32)PWM_Volume__COUNT_DOWN == currentMode) && (0u != regVal))
1013:Generated_Source\PSoC4/PWM_Volume.c ****         {
1014:Generated_Source\PSoC4/PWM_Volume.c ****             regVal--;
1015:Generated_Source\PSoC4/PWM_Volume.c ****         }
1016:Generated_Source\PSoC4/PWM_Volume.c ****         else if (((uint32)PWM_Volume__COUNT_UP == currentMode) && (0xFFFFu != regVal))
1017:Generated_Source\PSoC4/PWM_Volume.c ****         {
1018:Generated_Source\PSoC4/PWM_Volume.c ****             regVal++;
1019:Generated_Source\PSoC4/PWM_Volume.c ****         }
1020:Generated_Source\PSoC4/PWM_Volume.c ****         else
1021:Generated_Source\PSoC4/PWM_Volume.c ****         {
1022:Generated_Source\PSoC4/PWM_Volume.c ****         }
1023:Generated_Source\PSoC4/PWM_Volume.c **** 
1024:Generated_Source\PSoC4/PWM_Volume.c ****         return (regVal & PWM_Volume_16BIT_MASK);
1025:Generated_Source\PSoC4/PWM_Volume.c ****     #else
1026:Generated_Source\PSoC4/PWM_Volume.c ****         return (PWM_Volume_COMP_CAP_BUF_REG & PWM_Volume_16BIT_MASK);
 889              		.loc 1 1026 0
 890 0000 024B     		ldr	r3, .L68
 891 0002 1868     		ldr	r0, [r3]
 892 0004 0004     		lsls	r0, r0, #16
 893 0006 000C     		lsrs	r0, r0, #16
1027:Generated_Source\PSoC4/PWM_Volume.c ****     #endif /* (PWM_Volume_CY_TCPWM_4000) */
1028:Generated_Source\PSoC4/PWM_Volume.c **** }
 894              		.loc 1 1028 0
 895              		@ sp needed
 896 0008 7047     		bx	lr
 897              	.L69:
 898 000a C046     		.align	2
 899              	.L68:
 900 000c D0012040 		.word	1075839440
 901              		.cfi_endproc
 902              	.LFE26:
 903              		.size	PWM_Volume_ReadCompareBuf, .-PWM_Volume_ReadCompareBuf
 904              		.section	.text.PWM_Volume_ReadCapture,"ax",%progbits
 905              		.align	2
 906              		.global	PWM_Volume_ReadCapture
 907              		.code	16
 908              		.thumb_func
 909              		.type	PWM_Volume_ReadCapture, %function
 910              	PWM_Volume_ReadCapture:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 35


 911              	.LFB27:
1029:Generated_Source\PSoC4/PWM_Volume.c **** 
1030:Generated_Source\PSoC4/PWM_Volume.c **** 
1031:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1032:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadCapture
1033:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1034:Generated_Source\PSoC4/PWM_Volume.c **** *
1035:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1036:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the captured counter value. This API is applicable only for
1037:Generated_Source\PSoC4/PWM_Volume.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1038:Generated_Source\PSoC4/PWM_Volume.c **** *
1039:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1040:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1041:Generated_Source\PSoC4/PWM_Volume.c **** *
1042:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1043:Generated_Source\PSoC4/PWM_Volume.c **** *  Capture value
1044:Generated_Source\PSoC4/PWM_Volume.c **** *
1045:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1046:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadCapture(void)
1047:Generated_Source\PSoC4/PWM_Volume.c **** {
 912              		.loc 1 1047 0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 916              		@ link register save eliminated.
1048:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_COMP_CAP_REG & PWM_Volume_16BIT_MASK);
 917              		.loc 1 1048 0
 918 0000 024B     		ldr	r3, .L71
 919 0002 1868     		ldr	r0, [r3]
 920 0004 0004     		lsls	r0, r0, #16
 921 0006 000C     		lsrs	r0, r0, #16
1049:Generated_Source\PSoC4/PWM_Volume.c **** }
 922              		.loc 1 1049 0
 923              		@ sp needed
 924 0008 7047     		bx	lr
 925              	.L72:
 926 000a C046     		.align	2
 927              	.L71:
 928 000c CC012040 		.word	1075839436
 929              		.cfi_endproc
 930              	.LFE27:
 931              		.size	PWM_Volume_ReadCapture, .-PWM_Volume_ReadCapture
 932              		.section	.text.PWM_Volume_ReadCaptureBuf,"ax",%progbits
 933              		.align	2
 934              		.global	PWM_Volume_ReadCaptureBuf
 935              		.code	16
 936              		.thumb_func
 937              		.type	PWM_Volume_ReadCaptureBuf, %function
 938              	PWM_Volume_ReadCaptureBuf:
 939              	.LFB28:
1050:Generated_Source\PSoC4/PWM_Volume.c **** 
1051:Generated_Source\PSoC4/PWM_Volume.c **** 
1052:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1053:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadCaptureBuf
1054:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1055:Generated_Source\PSoC4/PWM_Volume.c **** *
1056:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 36


1057:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the capture buffer register. This API is applicable only for
1058:Generated_Source\PSoC4/PWM_Volume.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1059:Generated_Source\PSoC4/PWM_Volume.c **** *
1060:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1061:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1062:Generated_Source\PSoC4/PWM_Volume.c **** *
1063:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1064:Generated_Source\PSoC4/PWM_Volume.c **** *  Capture buffer value
1065:Generated_Source\PSoC4/PWM_Volume.c **** *
1066:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1067:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadCaptureBuf(void)
1068:Generated_Source\PSoC4/PWM_Volume.c **** {
 940              		.loc 1 1068 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              		@ link register save eliminated.
1069:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_COMP_CAP_BUF_REG & PWM_Volume_16BIT_MASK);
 945              		.loc 1 1069 0
 946 0000 024B     		ldr	r3, .L74
 947 0002 1868     		ldr	r0, [r3]
 948 0004 0004     		lsls	r0, r0, #16
 949 0006 000C     		lsrs	r0, r0, #16
1070:Generated_Source\PSoC4/PWM_Volume.c **** }
 950              		.loc 1 1070 0
 951              		@ sp needed
 952 0008 7047     		bx	lr
 953              	.L75:
 954 000a C046     		.align	2
 955              	.L74:
 956 000c D0012040 		.word	1075839440
 957              		.cfi_endproc
 958              	.LFE28:
 959              		.size	PWM_Volume_ReadCaptureBuf, .-PWM_Volume_ReadCaptureBuf
 960              		.section	.text.PWM_Volume_SetCaptureMode,"ax",%progbits
 961              		.align	2
 962              		.global	PWM_Volume_SetCaptureMode
 963              		.code	16
 964              		.thumb_func
 965              		.type	PWM_Volume_SetCaptureMode, %function
 966              	PWM_Volume_SetCaptureMode:
 967              	.LFB29:
1071:Generated_Source\PSoC4/PWM_Volume.c **** 
1072:Generated_Source\PSoC4/PWM_Volume.c **** 
1073:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1074:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetCaptureMode
1075:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1076:Generated_Source\PSoC4/PWM_Volume.c **** *
1077:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1078:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1079:Generated_Source\PSoC4/PWM_Volume.c **** *  This input is not applicable to the Timer/Counter without Capture and
1080:Generated_Source\PSoC4/PWM_Volume.c **** *  Quadrature Decoder modes.
1081:Generated_Source\PSoC4/PWM_Volume.c **** *
1082:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1083:Generated_Source\PSoC4/PWM_Volume.c **** *  triggerMode: Enumerated trigger mode value
1084:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1085:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_LEVEL     - Level
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 37


1086:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_RISING    - Rising edge
1087:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_FALLING   - Falling edge
1088:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_BOTH      - Both rising and falling edge
1089:Generated_Source\PSoC4/PWM_Volume.c **** *
1090:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1091:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1092:Generated_Source\PSoC4/PWM_Volume.c **** *
1093:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1094:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetCaptureMode(uint32 triggerMode)
1095:Generated_Source\PSoC4/PWM_Volume.c **** {
 968              		.loc 1 1095 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 0
 971              		@ frame_needed = 0, uses_anonymous_args = 0
 972              	.LVL58:
 973 0000 10B5     		push	{r4, lr}
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 4, -8
 976              		.cfi_offset 14, -4
 977 0002 0400     		movs	r4, r0
1096:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1097:Generated_Source\PSoC4/PWM_Volume.c **** 
1098:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 978              		.loc 1 1098 0
 979 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 980              	.LVL59:
1099:Generated_Source\PSoC4/PWM_Volume.c **** 
1100:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG &= (uint32)~PWM_Volume_CAPTURE_MASK;
 981              		.loc 1 1100 0
 982 0008 054B     		ldr	r3, .L77
 983 000a 1A68     		ldr	r2, [r3]
 984 000c 0321     		movs	r1, #3
 985 000e 8A43     		bics	r2, r1
 986 0010 1A60     		str	r2, [r3]
1101:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG |= triggerMode;
 987              		.loc 1 1101 0
 988 0012 1A68     		ldr	r2, [r3]
 989 0014 1443     		orrs	r4, r2
 990              	.LVL60:
 991 0016 1C60     		str	r4, [r3]
1102:Generated_Source\PSoC4/PWM_Volume.c **** 
1103:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 992              		.loc 1 1103 0
 993 0018 FFF7FEFF 		bl	CyExitCriticalSection
 994              	.LVL61:
1104:Generated_Source\PSoC4/PWM_Volume.c **** }
 995              		.loc 1 1104 0
 996              		@ sp needed
 997 001c 10BD     		pop	{r4, pc}
 998              	.L78:
 999 001e C046     		.align	2
 1000              	.L77:
 1001 0020 E4012040 		.word	1075839460
 1002              		.cfi_endproc
 1003              	.LFE29:
 1004              		.size	PWM_Volume_SetCaptureMode, .-PWM_Volume_SetCaptureMode
 1005              		.section	.text.PWM_Volume_SetReloadMode,"ax",%progbits
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 38


 1006              		.align	2
 1007              		.global	PWM_Volume_SetReloadMode
 1008              		.code	16
 1009              		.thumb_func
 1010              		.type	PWM_Volume_SetReloadMode, %function
 1011              	PWM_Volume_SetReloadMode:
 1012              	.LFB30:
1105:Generated_Source\PSoC4/PWM_Volume.c **** 
1106:Generated_Source\PSoC4/PWM_Volume.c **** 
1107:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1108:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetReloadMode
1109:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1110:Generated_Source\PSoC4/PWM_Volume.c **** *
1111:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1112:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1113:Generated_Source\PSoC4/PWM_Volume.c **** *  input.
1114:Generated_Source\PSoC4/PWM_Volume.c **** *
1115:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1116:Generated_Source\PSoC4/PWM_Volume.c **** *  triggerMode: Enumerated trigger mode value
1117:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1118:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_LEVEL     - Level
1119:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_RISING    - Rising edge
1120:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_FALLING   - Falling edge
1121:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_BOTH      - Both rising and falling edge
1122:Generated_Source\PSoC4/PWM_Volume.c **** *
1123:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1124:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1125:Generated_Source\PSoC4/PWM_Volume.c **** *
1126:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1127:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetReloadMode(uint32 triggerMode)
1128:Generated_Source\PSoC4/PWM_Volume.c **** {
 1013              		.loc 1 1128 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017              	.LVL62:
 1018 0000 10B5     		push	{r4, lr}
 1019              		.cfi_def_cfa_offset 8
 1020              		.cfi_offset 4, -8
 1021              		.cfi_offset 14, -4
 1022 0002 0400     		movs	r4, r0
1129:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1130:Generated_Source\PSoC4/PWM_Volume.c **** 
1131:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 1023              		.loc 1 1131 0
 1024 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1025              	.LVL63:
1132:Generated_Source\PSoC4/PWM_Volume.c **** 
1133:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG &= (uint32)~PWM_Volume_RELOAD_MASK;
 1026              		.loc 1 1133 0
 1027 0008 054B     		ldr	r3, .L80
 1028 000a 1A68     		ldr	r2, [r3]
 1029 000c 3021     		movs	r1, #48
 1030 000e 8A43     		bics	r2, r1
 1031 0010 1A60     		str	r2, [r3]
1134:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Volume_RELOAD_SHIFT));
 1032              		.loc 1 1134 0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 39


 1033 0012 1A68     		ldr	r2, [r3]
 1034 0014 2401     		lsls	r4, r4, #4
 1035              	.LVL64:
 1036 0016 1443     		orrs	r4, r2
 1037 0018 1C60     		str	r4, [r3]
1135:Generated_Source\PSoC4/PWM_Volume.c **** 
1136:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1038              		.loc 1 1136 0
 1039 001a FFF7FEFF 		bl	CyExitCriticalSection
 1040              	.LVL65:
1137:Generated_Source\PSoC4/PWM_Volume.c **** }
 1041              		.loc 1 1137 0
 1042              		@ sp needed
 1043 001e 10BD     		pop	{r4, pc}
 1044              	.L81:
 1045              		.align	2
 1046              	.L80:
 1047 0020 E4012040 		.word	1075839460
 1048              		.cfi_endproc
 1049              	.LFE30:
 1050              		.size	PWM_Volume_SetReloadMode, .-PWM_Volume_SetReloadMode
 1051              		.section	.text.PWM_Volume_SetStartMode,"ax",%progbits
 1052              		.align	2
 1053              		.global	PWM_Volume_SetStartMode
 1054              		.code	16
 1055              		.thumb_func
 1056              		.type	PWM_Volume_SetStartMode, %function
 1057              	PWM_Volume_SetStartMode:
 1058              	.LFB31:
1138:Generated_Source\PSoC4/PWM_Volume.c **** 
1139:Generated_Source\PSoC4/PWM_Volume.c **** 
1140:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1141:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetStartMode
1142:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1143:Generated_Source\PSoC4/PWM_Volume.c **** *
1144:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1145:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1146:Generated_Source\PSoC4/PWM_Volume.c **** *  phiB input.
1147:Generated_Source\PSoC4/PWM_Volume.c **** *
1148:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1149:Generated_Source\PSoC4/PWM_Volume.c **** *  triggerMode: Enumerated trigger mode value
1150:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1151:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_LEVEL     - Level
1152:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_RISING    - Rising edge
1153:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_FALLING   - Falling edge
1154:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_BOTH      - Both rising and falling edge
1155:Generated_Source\PSoC4/PWM_Volume.c **** *
1156:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1157:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1158:Generated_Source\PSoC4/PWM_Volume.c **** *
1159:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1160:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetStartMode(uint32 triggerMode)
1161:Generated_Source\PSoC4/PWM_Volume.c **** {
 1059              		.loc 1 1161 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 40


 1063              	.LVL66:
 1064 0000 10B5     		push	{r4, lr}
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 4, -8
 1067              		.cfi_offset 14, -4
 1068 0002 0400     		movs	r4, r0
1162:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1163:Generated_Source\PSoC4/PWM_Volume.c **** 
1164:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 1069              		.loc 1 1164 0
 1070 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1071              	.LVL67:
1165:Generated_Source\PSoC4/PWM_Volume.c **** 
1166:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG &= (uint32)~PWM_Volume_START_MASK;
 1072              		.loc 1 1166 0
 1073 0008 054B     		ldr	r3, .L83
 1074 000a 1968     		ldr	r1, [r3]
 1075 000c 054A     		ldr	r2, .L83+4
 1076 000e 0A40     		ands	r2, r1
 1077 0010 1A60     		str	r2, [r3]
1167:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Volume_START_SHIFT));
 1078              		.loc 1 1167 0
 1079 0012 1A68     		ldr	r2, [r3]
 1080 0014 2402     		lsls	r4, r4, #8
 1081              	.LVL68:
 1082 0016 1443     		orrs	r4, r2
 1083 0018 1C60     		str	r4, [r3]
1168:Generated_Source\PSoC4/PWM_Volume.c **** 
1169:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1084              		.loc 1 1169 0
 1085 001a FFF7FEFF 		bl	CyExitCriticalSection
 1086              	.LVL69:
1170:Generated_Source\PSoC4/PWM_Volume.c **** }
 1087              		.loc 1 1170 0
 1088              		@ sp needed
 1089 001e 10BD     		pop	{r4, pc}
 1090              	.L84:
 1091              		.align	2
 1092              	.L83:
 1093 0020 E4012040 		.word	1075839460
 1094 0024 FFFCFFFF 		.word	-769
 1095              		.cfi_endproc
 1096              	.LFE31:
 1097              		.size	PWM_Volume_SetStartMode, .-PWM_Volume_SetStartMode
 1098              		.section	.text.PWM_Volume_SetStopMode,"ax",%progbits
 1099              		.align	2
 1100              		.global	PWM_Volume_SetStopMode
 1101              		.code	16
 1102              		.thumb_func
 1103              		.type	PWM_Volume_SetStopMode, %function
 1104              	PWM_Volume_SetStopMode:
 1105              	.LFB32:
1171:Generated_Source\PSoC4/PWM_Volume.c **** 
1172:Generated_Source\PSoC4/PWM_Volume.c **** 
1173:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1174:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetStopMode
1175:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 41


1176:Generated_Source\PSoC4/PWM_Volume.c **** *
1177:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1178:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1179:Generated_Source\PSoC4/PWM_Volume.c **** *
1180:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1181:Generated_Source\PSoC4/PWM_Volume.c **** *  triggerMode: Enumerated trigger mode value
1182:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1183:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_LEVEL     - Level
1184:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_RISING    - Rising edge
1185:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_FALLING   - Falling edge
1186:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_BOTH      - Both rising and falling edge
1187:Generated_Source\PSoC4/PWM_Volume.c **** *
1188:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1189:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1190:Generated_Source\PSoC4/PWM_Volume.c **** *
1191:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1192:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetStopMode(uint32 triggerMode)
1193:Generated_Source\PSoC4/PWM_Volume.c **** {
 1106              		.loc 1 1193 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110              	.LVL70:
 1111 0000 10B5     		push	{r4, lr}
 1112              		.cfi_def_cfa_offset 8
 1113              		.cfi_offset 4, -8
 1114              		.cfi_offset 14, -4
 1115 0002 0400     		movs	r4, r0
1194:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1195:Generated_Source\PSoC4/PWM_Volume.c **** 
1196:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 1116              		.loc 1 1196 0
 1117 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1118              	.LVL71:
1197:Generated_Source\PSoC4/PWM_Volume.c **** 
1198:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG &= (uint32)~PWM_Volume_STOP_MASK;
 1119              		.loc 1 1198 0
 1120 0008 054B     		ldr	r3, .L86
 1121 000a 1A68     		ldr	r2, [r3]
 1122 000c C021     		movs	r1, #192
 1123 000e 8A43     		bics	r2, r1
 1124 0010 1A60     		str	r2, [r3]
1199:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Volume_STOP_SHIFT));
 1125              		.loc 1 1199 0
 1126 0012 1A68     		ldr	r2, [r3]
 1127 0014 A401     		lsls	r4, r4, #6
 1128              	.LVL72:
 1129 0016 1443     		orrs	r4, r2
 1130 0018 1C60     		str	r4, [r3]
1200:Generated_Source\PSoC4/PWM_Volume.c **** 
1201:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1131              		.loc 1 1201 0
 1132 001a FFF7FEFF 		bl	CyExitCriticalSection
 1133              	.LVL73:
1202:Generated_Source\PSoC4/PWM_Volume.c **** }
 1134              		.loc 1 1202 0
 1135              		@ sp needed
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 42


 1136 001e 10BD     		pop	{r4, pc}
 1137              	.L87:
 1138              		.align	2
 1139              	.L86:
 1140 0020 E4012040 		.word	1075839460
 1141              		.cfi_endproc
 1142              	.LFE32:
 1143              		.size	PWM_Volume_SetStopMode, .-PWM_Volume_SetStopMode
 1144              		.section	.text.PWM_Volume_SetCountMode,"ax",%progbits
 1145              		.align	2
 1146              		.global	PWM_Volume_SetCountMode
 1147              		.code	16
 1148              		.thumb_func
 1149              		.type	PWM_Volume_SetCountMode, %function
 1150              	PWM_Volume_SetCountMode:
 1151              	.LFB33:
1203:Generated_Source\PSoC4/PWM_Volume.c **** 
1204:Generated_Source\PSoC4/PWM_Volume.c **** 
1205:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1206:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetCountMode
1207:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1208:Generated_Source\PSoC4/PWM_Volume.c **** *
1209:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1210:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1211:Generated_Source\PSoC4/PWM_Volume.c **** *  input.
1212:Generated_Source\PSoC4/PWM_Volume.c **** *
1213:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1214:Generated_Source\PSoC4/PWM_Volume.c **** *  triggerMode: Enumerated trigger mode value
1215:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1216:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_LEVEL     - Level
1217:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_RISING    - Rising edge
1218:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_FALLING   - Falling edge
1219:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_TRIG_BOTH      - Both rising and falling edge
1220:Generated_Source\PSoC4/PWM_Volume.c **** *
1221:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1222:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1223:Generated_Source\PSoC4/PWM_Volume.c **** *
1224:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1225:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetCountMode(uint32 triggerMode)
1226:Generated_Source\PSoC4/PWM_Volume.c **** {
 1152              		.loc 1 1226 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              	.LVL74:
 1157 0000 10B5     		push	{r4, lr}
 1158              		.cfi_def_cfa_offset 8
 1159              		.cfi_offset 4, -8
 1160              		.cfi_offset 14, -4
 1161 0002 0400     		movs	r4, r0
1227:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1228:Generated_Source\PSoC4/PWM_Volume.c **** 
1229:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 1162              		.loc 1 1229 0
 1163 0004 FFF7FEFF 		bl	CyEnterCriticalSection
 1164              	.LVL75:
1230:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 43


1231:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG &= (uint32)~PWM_Volume_COUNT_MASK;
 1165              		.loc 1 1231 0
 1166 0008 054B     		ldr	r3, .L89
 1167 000a 1A68     		ldr	r2, [r3]
 1168 000c 0C21     		movs	r1, #12
 1169 000e 8A43     		bics	r2, r1
 1170 0010 1A60     		str	r2, [r3]
1232:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Volume_COUNT_SHIFT));
 1171              		.loc 1 1232 0
 1172 0012 1A68     		ldr	r2, [r3]
 1173 0014 A400     		lsls	r4, r4, #2
 1174              	.LVL76:
 1175 0016 1443     		orrs	r4, r2
 1176 0018 1C60     		str	r4, [r3]
1233:Generated_Source\PSoC4/PWM_Volume.c **** 
1234:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1177              		.loc 1 1234 0
 1178 001a FFF7FEFF 		bl	CyExitCriticalSection
 1179              	.LVL77:
1235:Generated_Source\PSoC4/PWM_Volume.c **** }
 1180              		.loc 1 1235 0
 1181              		@ sp needed
 1182 001e 10BD     		pop	{r4, pc}
 1183              	.L90:
 1184              		.align	2
 1185              	.L89:
 1186 0020 E4012040 		.word	1075839460
 1187              		.cfi_endproc
 1188              	.LFE33:
 1189              		.size	PWM_Volume_SetCountMode, .-PWM_Volume_SetCountMode
 1190              		.section	.text.PWM_Volume_TriggerCommand,"ax",%progbits
 1191              		.align	2
 1192              		.global	PWM_Volume_TriggerCommand
 1193              		.code	16
 1194              		.thumb_func
 1195              		.type	PWM_Volume_TriggerCommand, %function
 1196              	PWM_Volume_TriggerCommand:
 1197              	.LFB34:
1236:Generated_Source\PSoC4/PWM_Volume.c **** 
1237:Generated_Source\PSoC4/PWM_Volume.c **** 
1238:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1239:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_TriggerCommand
1240:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1241:Generated_Source\PSoC4/PWM_Volume.c **** *
1242:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1243:Generated_Source\PSoC4/PWM_Volume.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1244:Generated_Source\PSoC4/PWM_Volume.c **** *  The mask can be used to apply this command simultaneously to more than one
1245:Generated_Source\PSoC4/PWM_Volume.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1246:Generated_Source\PSoC4/PWM_Volume.c **** *
1247:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1248:Generated_Source\PSoC4/PWM_Volume.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1249:Generated_Source\PSoC4/PWM_Volume.c **** *        command should apply to.  This function from one instance can be used
1250:Generated_Source\PSoC4/PWM_Volume.c **** *        to apply the command to any of the instances in the design.
1251:Generated_Source\PSoC4/PWM_Volume.c **** *        The mask value for a specific instance is available with the MASK
1252:Generated_Source\PSoC4/PWM_Volume.c **** *        define.
1253:Generated_Source\PSoC4/PWM_Volume.c **** *  command: Enumerated command values. Capture command only applicable for
1254:Generated_Source\PSoC4/PWM_Volume.c **** *           Timer/Counter with Capture and PWM modes.
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 44


1255:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1256:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_CMD_CAPTURE    - Trigger Capture/Switch command
1257:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_CMD_RELOAD     - Trigger Reload/Index command
1258:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_CMD_STOP       - Trigger Stop/Kill command
1259:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_CMD_START      - Trigger Start/phiB command
1260:Generated_Source\PSoC4/PWM_Volume.c **** *
1261:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1262:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1263:Generated_Source\PSoC4/PWM_Volume.c **** *
1264:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1265:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_TriggerCommand(uint32 mask, uint32 command)
1266:Generated_Source\PSoC4/PWM_Volume.c **** {
 1198              		.loc 1 1266 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              	.LVL78:
 1203 0000 70B5     		push	{r4, r5, r6, lr}
 1204              		.cfi_def_cfa_offset 16
 1205              		.cfi_offset 4, -16
 1206              		.cfi_offset 5, -12
 1207              		.cfi_offset 6, -8
 1208              		.cfi_offset 14, -4
 1209 0002 0400     		movs	r4, r0
 1210 0004 0D00     		movs	r5, r1
1267:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
1268:Generated_Source\PSoC4/PWM_Volume.c **** 
1269:Generated_Source\PSoC4/PWM_Volume.c ****     enableInterrupts = CyEnterCriticalSection();
 1211              		.loc 1 1269 0
 1212 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1213              	.LVL79:
1270:Generated_Source\PSoC4/PWM_Volume.c **** 
1271:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_COMMAND_REG = ((uint32)(mask << command));
 1214              		.loc 1 1271 0
 1215 000a AC40     		lsls	r4, r4, r5
 1216              	.LVL80:
 1217 000c 024B     		ldr	r3, .L92
 1218 000e 1C60     		str	r4, [r3]
1272:Generated_Source\PSoC4/PWM_Volume.c **** 
1273:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1219              		.loc 1 1273 0
 1220 0010 FFF7FEFF 		bl	CyExitCriticalSection
 1221              	.LVL81:
1274:Generated_Source\PSoC4/PWM_Volume.c **** }
 1222              		.loc 1 1274 0
 1223              		@ sp needed
 1224              	.LVL82:
 1225 0014 70BD     		pop	{r4, r5, r6, pc}
 1226              	.L93:
 1227 0016 C046     		.align	2
 1228              	.L92:
 1229 0018 08002040 		.word	1075838984
 1230              		.cfi_endproc
 1231              	.LFE34:
 1232              		.size	PWM_Volume_TriggerCommand, .-PWM_Volume_TriggerCommand
 1233              		.section	.text.PWM_Volume_Enable,"ax",%progbits
 1234              		.align	2
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 45


 1235              		.global	PWM_Volume_Enable
 1236              		.code	16
 1237              		.thumb_func
 1238              		.type	PWM_Volume_Enable, %function
 1239              	PWM_Volume_Enable:
 1240              	.LFB2:
 178:Generated_Source\PSoC4/PWM_Volume.c ****     uint8 enableInterrupts;
 1241              		.loc 1 178 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245 0000 10B5     		push	{r4, lr}
 1246              		.cfi_def_cfa_offset 8
 1247              		.cfi_offset 4, -8
 1248              		.cfi_offset 14, -4
 181:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_BLOCK_CONTROL_REG |= PWM_Volume_MASK;
 1249              		.loc 1 181 0
 1250 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 1251              	.LVL83:
 182:Generated_Source\PSoC4/PWM_Volume.c ****     CyExitCriticalSection(enableInterrupts);
 1252              		.loc 1 182 0
 1253 0006 064A     		ldr	r2, .L95
 1254 0008 1168     		ldr	r1, [r2]
 1255 000a 0823     		movs	r3, #8
 1256 000c 0B43     		orrs	r3, r1
 1257 000e 1360     		str	r3, [r2]
 183:Generated_Source\PSoC4/PWM_Volume.c **** 
 1258              		.loc 1 183 0
 1259 0010 FFF7FEFF 		bl	CyExitCriticalSection
 1260              	.LVL84:
 188:Generated_Source\PSoC4/PWM_Volume.c ****         #endif /* (0u == PWM_Volume_PWM_START_SIGNAL_PRESENT) */
 1261              		.loc 1 188 0
 1262 0014 1821     		movs	r1, #24
 1263 0016 0820     		movs	r0, #8
 1264 0018 FFF7FEFF 		bl	PWM_Volume_TriggerCommand
 1265              	.LVL85:
 203:Generated_Source\PSoC4/PWM_Volume.c **** 
 1266              		.loc 1 203 0
 1267              		@ sp needed
 1268 001c 10BD     		pop	{r4, pc}
 1269              	.L96:
 1270 001e C046     		.align	2
 1271              	.L95:
 1272 0020 00002040 		.word	1075838976
 1273              		.cfi_endproc
 1274              	.LFE2:
 1275              		.size	PWM_Volume_Enable, .-PWM_Volume_Enable
 1276              		.section	.text.PWM_Volume_ReadStatus,"ax",%progbits
 1277              		.align	2
 1278              		.global	PWM_Volume_ReadStatus
 1279              		.code	16
 1280              		.thumb_func
 1281              		.type	PWM_Volume_ReadStatus, %function
 1282              	PWM_Volume_ReadStatus:
 1283              	.LFB35:
1275:Generated_Source\PSoC4/PWM_Volume.c **** 
1276:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 46


1277:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1278:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ReadStatus
1279:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1280:Generated_Source\PSoC4/PWM_Volume.c **** *
1281:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1282:Generated_Source\PSoC4/PWM_Volume.c **** *  Reads the status of the PWM_Volume.
1283:Generated_Source\PSoC4/PWM_Volume.c **** *
1284:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1285:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1286:Generated_Source\PSoC4/PWM_Volume.c **** *
1287:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1288:Generated_Source\PSoC4/PWM_Volume.c **** *  Status
1289:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1290:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_STATUS_DOWN    - Set if counting down
1291:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_STATUS_RUNNING - Set if counter is running
1292:Generated_Source\PSoC4/PWM_Volume.c **** *
1293:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1294:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_ReadStatus(void)
1295:Generated_Source\PSoC4/PWM_Volume.c **** {
 1284              		.loc 1 1295 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288              		@ link register save eliminated.
1296:Generated_Source\PSoC4/PWM_Volume.c ****     return ((PWM_Volume_STATUS_REG >> PWM_Volume_RUNNING_STATUS_SHIFT) |
 1289              		.loc 1 1296 0
 1290 0000 034B     		ldr	r3, .L98
 1291 0002 1868     		ldr	r0, [r3]
 1292 0004 820F     		lsrs	r2, r0, #30
1297:Generated_Source\PSoC4/PWM_Volume.c ****             (PWM_Volume_STATUS_REG & PWM_Volume_STATUS_DOWN));
 1293              		.loc 1 1297 0
 1294 0006 1B68     		ldr	r3, [r3]
 1295 0008 0120     		movs	r0, #1
 1296 000a 1840     		ands	r0, r3
1296:Generated_Source\PSoC4/PWM_Volume.c ****     return ((PWM_Volume_STATUS_REG >> PWM_Volume_RUNNING_STATUS_SHIFT) |
 1297              		.loc 1 1296 0
 1298 000c 1043     		orrs	r0, r2
1298:Generated_Source\PSoC4/PWM_Volume.c **** }
 1299              		.loc 1 1298 0
 1300              		@ sp needed
 1301 000e 7047     		bx	lr
 1302              	.L99:
 1303              		.align	2
 1304              	.L98:
 1305 0010 C4012040 		.word	1075839428
 1306              		.cfi_endproc
 1307              	.LFE35:
 1308              		.size	PWM_Volume_ReadStatus, .-PWM_Volume_ReadStatus
 1309              		.section	.text.PWM_Volume_SetInterruptMode,"ax",%progbits
 1310              		.align	2
 1311              		.global	PWM_Volume_SetInterruptMode
 1312              		.code	16
 1313              		.thumb_func
 1314              		.type	PWM_Volume_SetInterruptMode, %function
 1315              	PWM_Volume_SetInterruptMode:
 1316              	.LFB36:
1299:Generated_Source\PSoC4/PWM_Volume.c **** 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 47


1300:Generated_Source\PSoC4/PWM_Volume.c **** 
1301:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1302:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetInterruptMode
1303:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1304:Generated_Source\PSoC4/PWM_Volume.c **** *
1305:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1306:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets the interrupt mask to control which interrupt
1307:Generated_Source\PSoC4/PWM_Volume.c **** *  requests generate the interrupt signal.
1308:Generated_Source\PSoC4/PWM_Volume.c **** *
1309:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1310:Generated_Source\PSoC4/PWM_Volume.c **** *   interruptMask: Mask of bits to be enabled
1311:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1312:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_TC       - Terminal count mask
1313:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_CC_MATCH - Compare count / capture mask
1314:Generated_Source\PSoC4/PWM_Volume.c **** *
1315:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1316:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1317:Generated_Source\PSoC4/PWM_Volume.c **** *
1318:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1319:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetInterruptMode(uint32 interruptMask)
1320:Generated_Source\PSoC4/PWM_Volume.c **** {
 1317              		.loc 1 1320 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322              	.LVL86:
1321:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_INTERRUPT_MASK_REG =  interruptMask;
 1323              		.loc 1 1321 0
 1324 0000 014B     		ldr	r3, .L101
 1325 0002 1860     		str	r0, [r3]
1322:Generated_Source\PSoC4/PWM_Volume.c **** }
 1326              		.loc 1 1322 0
 1327              		@ sp needed
 1328 0004 7047     		bx	lr
 1329              	.L102:
 1330 0006 C046     		.align	2
 1331              	.L101:
 1332 0008 F8012040 		.word	1075839480
 1333              		.cfi_endproc
 1334              	.LFE36:
 1335              		.size	PWM_Volume_SetInterruptMode, .-PWM_Volume_SetInterruptMode
 1336              		.section	.text.PWM_Volume_Init,"ax",%progbits
 1337              		.align	2
 1338              		.global	PWM_Volume_Init
 1339              		.code	16
 1340              		.thumb_func
 1341              		.type	PWM_Volume_Init, %function
 1342              	PWM_Volume_Init:
 1343              	.LFB1:
  39:Generated_Source\PSoC4/PWM_Volume.c **** 
 1344              		.loc 1 39 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 0
 1347              		@ frame_needed = 0, uses_anonymous_args = 0
 1348 0000 10B5     		push	{r4, lr}
 1349              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 48


 1350              		.cfi_offset 4, -8
 1351              		.cfi_offset 14, -4
  89:Generated_Source\PSoC4/PWM_Volume.c **** 
 1352              		.loc 1 89 0
 1353 0002 0D4C     		ldr	r4, .L104
 1354 0004 8223     		movs	r3, #130
 1355 0006 DB04     		lsls	r3, r3, #19
 1356 0008 2360     		str	r3, [r4]
  95:Generated_Source\PSoC4/PWM_Volume.c ****             
 1357              		.loc 1 95 0
 1358 000a 2368     		ldr	r3, [r4]
 1359 000c 2360     		str	r3, [r4]
 103:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* (PWM_Volume_CY_TCPWM_V2 && PWM_Volume_PWM_UPDOWN_CNT_USED && !PWM_Volume_CY_
 1360              		.loc 1 103 0
 1361 000e 0020     		movs	r0, #0
 1362 0010 FFF7FEFF 		bl	PWM_Volume_WriteCounter
 1363              	.LVL87:
 112:Generated_Source\PSoC4/PWM_Volume.c ****         #endif  /* (PWM_Volume__PWM == PWM_Volume_PWM_MODE) */
 1364              		.loc 1 112 0
 1365 0014 2368     		ldr	r3, [r4]
 1366 0016 2360     		str	r3, [r4]
 116:Generated_Source\PSoC4/PWM_Volume.c ****     
 1367              		.loc 1 116 0
 1368 0018 0C22     		movs	r2, #12
 1369 001a 084B     		ldr	r3, .L104+4
 1370 001c 1A60     		str	r2, [r3]
 119:Generated_Source\PSoC4/PWM_Volume.c **** 
 1371              		.loc 1 119 0
 1372 001e 0120     		movs	r0, #1
 1373 0020 FFF7FEFF 		bl	PWM_Volume_SetInterruptMode
 1374              	.LVL88:
 129:Generated_Source\PSoC4/PWM_Volume.c ****             #endif  /* ( PWM_Volume_PWM_LEFT == PWM_Volume_PWM_ALIGN) */
 1375              		.loc 1 129 0
 1376 0024 3122     		movs	r2, #49
 1377 0026 064B     		ldr	r3, .L104+8
 1378 0028 1A60     		str	r2, [r3]
 146:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_WriteCompare(PWM_Volume_PWM_COMPARE_VALUE);
 1379              		.loc 1 146 0
 1380 002a 1420     		movs	r0, #20
 1381 002c FFF7FEFF 		bl	PWM_Volume_WritePeriod
 1382              	.LVL89:
 147:Generated_Source\PSoC4/PWM_Volume.c **** 
 1383              		.loc 1 147 0
 1384 0030 0E20     		movs	r0, #14
 1385 0032 FFF7FEFF 		bl	PWM_Volume_WriteCompare
 1386              	.LVL90:
 160:Generated_Source\PSoC4/PWM_Volume.c **** 
 1387              		.loc 1 160 0
 1388              		@ sp needed
 1389 0036 10BD     		pop	{r4, pc}
 1390              	.L105:
 1391              		.align	2
 1392              	.L104:
 1393 0038 C0012040 		.word	1075839424
 1394 003c E4012040 		.word	1075839460
 1395 0040 E8012040 		.word	1075839464
 1396              		.cfi_endproc
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 49


 1397              	.LFE1:
 1398              		.size	PWM_Volume_Init, .-PWM_Volume_Init
 1399              		.section	.text.PWM_Volume_Start,"ax",%progbits
 1400              		.align	2
 1401              		.global	PWM_Volume_Start
 1402              		.code	16
 1403              		.thumb_func
 1404              		.type	PWM_Volume_Start, %function
 1405              	PWM_Volume_Start:
 1406              	.LFB3:
 231:Generated_Source\PSoC4/PWM_Volume.c ****     if (0u == PWM_Volume_initVar)
 1407              		.loc 1 231 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411 0000 10B5     		push	{r4, lr}
 1412              		.cfi_def_cfa_offset 8
 1413              		.cfi_offset 4, -8
 1414              		.cfi_offset 14, -4
 232:Generated_Source\PSoC4/PWM_Volume.c ****     {
 1415              		.loc 1 232 0
 1416 0002 064B     		ldr	r3, .L108
 1417 0004 1B78     		ldrb	r3, [r3]
 1418 0006 002B     		cmp	r3, #0
 1419 0008 04D1     		bne	.L107
 234:Generated_Source\PSoC4/PWM_Volume.c ****         PWM_Volume_initVar = 1u;
 1420              		.loc 1 234 0
 1421 000a FFF7FEFF 		bl	PWM_Volume_Init
 1422              	.LVL91:
 235:Generated_Source\PSoC4/PWM_Volume.c ****     }
 1423              		.loc 1 235 0
 1424 000e 0122     		movs	r2, #1
 1425 0010 024B     		ldr	r3, .L108
 1426 0012 1A70     		strb	r2, [r3]
 1427              	.L107:
 238:Generated_Source\PSoC4/PWM_Volume.c **** }
 1428              		.loc 1 238 0
 1429 0014 FFF7FEFF 		bl	PWM_Volume_Enable
 1430              	.LVL92:
 239:Generated_Source\PSoC4/PWM_Volume.c **** 
 1431              		.loc 1 239 0
 1432              		@ sp needed
 1433 0018 10BD     		pop	{r4, pc}
 1434              	.L109:
 1435 001a C046     		.align	2
 1436              	.L108:
 1437 001c 00000000 		.word	.LANCHOR0
 1438              		.cfi_endproc
 1439              	.LFE3:
 1440              		.size	PWM_Volume_Start, .-PWM_Volume_Start
 1441              		.section	.text.PWM_Volume_GetInterruptSourceMasked,"ax",%progbits
 1442              		.align	2
 1443              		.global	PWM_Volume_GetInterruptSourceMasked
 1444              		.code	16
 1445              		.thumb_func
 1446              		.type	PWM_Volume_GetInterruptSourceMasked, %function
 1447              	PWM_Volume_GetInterruptSourceMasked:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 50


 1448              	.LFB37:
1323:Generated_Source\PSoC4/PWM_Volume.c **** 
1324:Generated_Source\PSoC4/PWM_Volume.c **** 
1325:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1326:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_GetInterruptSourceMasked
1327:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1328:Generated_Source\PSoC4/PWM_Volume.c **** *
1329:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1330:Generated_Source\PSoC4/PWM_Volume.c **** *  Gets the interrupt requests masked by the interrupt mask.
1331:Generated_Source\PSoC4/PWM_Volume.c **** *
1332:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1333:Generated_Source\PSoC4/PWM_Volume.c **** *   None
1334:Generated_Source\PSoC4/PWM_Volume.c **** *
1335:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1336:Generated_Source\PSoC4/PWM_Volume.c **** *  Masked interrupt source
1337:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1338:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_TC       - Terminal count mask
1339:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_CC_MATCH - Compare count / capture mask
1340:Generated_Source\PSoC4/PWM_Volume.c **** *
1341:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1342:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_GetInterruptSourceMasked(void)
1343:Generated_Source\PSoC4/PWM_Volume.c **** {
 1449              		.loc 1 1343 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
1344:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_INTERRUPT_MASKED_REG);
 1454              		.loc 1 1344 0
 1455 0000 014B     		ldr	r3, .L111
 1456 0002 1868     		ldr	r0, [r3]
1345:Generated_Source\PSoC4/PWM_Volume.c **** }
 1457              		.loc 1 1345 0
 1458              		@ sp needed
 1459 0004 7047     		bx	lr
 1460              	.L112:
 1461 0006 C046     		.align	2
 1462              	.L111:
 1463 0008 FC012040 		.word	1075839484
 1464              		.cfi_endproc
 1465              	.LFE37:
 1466              		.size	PWM_Volume_GetInterruptSourceMasked, .-PWM_Volume_GetInterruptSourceMasked
 1467              		.section	.text.PWM_Volume_GetInterruptSource,"ax",%progbits
 1468              		.align	2
 1469              		.global	PWM_Volume_GetInterruptSource
 1470              		.code	16
 1471              		.thumb_func
 1472              		.type	PWM_Volume_GetInterruptSource, %function
 1473              	PWM_Volume_GetInterruptSource:
 1474              	.LFB38:
1346:Generated_Source\PSoC4/PWM_Volume.c **** 
1347:Generated_Source\PSoC4/PWM_Volume.c **** 
1348:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1349:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_GetInterruptSource
1350:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1351:Generated_Source\PSoC4/PWM_Volume.c **** *
1352:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 51


1353:Generated_Source\PSoC4/PWM_Volume.c **** *  Gets the interrupt requests (without masking).
1354:Generated_Source\PSoC4/PWM_Volume.c **** *
1355:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1356:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1357:Generated_Source\PSoC4/PWM_Volume.c **** *
1358:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1359:Generated_Source\PSoC4/PWM_Volume.c **** *  Interrupt request value
1360:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1361:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_TC       - Terminal count mask
1362:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_CC_MATCH - Compare count / capture mask
1363:Generated_Source\PSoC4/PWM_Volume.c **** *
1364:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1365:Generated_Source\PSoC4/PWM_Volume.c **** uint32 PWM_Volume_GetInterruptSource(void)
1366:Generated_Source\PSoC4/PWM_Volume.c **** {
 1475              		.loc 1 1366 0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		@ link register save eliminated.
1367:Generated_Source\PSoC4/PWM_Volume.c ****     return (PWM_Volume_INTERRUPT_REQ_REG);
 1480              		.loc 1 1367 0
 1481 0000 014B     		ldr	r3, .L114
 1482 0002 1868     		ldr	r0, [r3]
1368:Generated_Source\PSoC4/PWM_Volume.c **** }
 1483              		.loc 1 1368 0
 1484              		@ sp needed
 1485 0004 7047     		bx	lr
 1486              	.L115:
 1487 0006 C046     		.align	2
 1488              	.L114:
 1489 0008 F0012040 		.word	1075839472
 1490              		.cfi_endproc
 1491              	.LFE38:
 1492              		.size	PWM_Volume_GetInterruptSource, .-PWM_Volume_GetInterruptSource
 1493              		.section	.text.PWM_Volume_ClearInterrupt,"ax",%progbits
 1494              		.align	2
 1495              		.global	PWM_Volume_ClearInterrupt
 1496              		.code	16
 1497              		.thumb_func
 1498              		.type	PWM_Volume_ClearInterrupt, %function
 1499              	PWM_Volume_ClearInterrupt:
 1500              	.LFB39:
1369:Generated_Source\PSoC4/PWM_Volume.c **** 
1370:Generated_Source\PSoC4/PWM_Volume.c **** 
1371:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1372:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_ClearInterrupt
1373:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1374:Generated_Source\PSoC4/PWM_Volume.c **** *
1375:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1376:Generated_Source\PSoC4/PWM_Volume.c **** *  Clears the interrupt request.
1377:Generated_Source\PSoC4/PWM_Volume.c **** *
1378:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1379:Generated_Source\PSoC4/PWM_Volume.c **** *   interruptMask: Mask of interrupts to clear
1380:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1381:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_TC       - Terminal count mask
1382:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_CC_MATCH - Compare count / capture mask
1383:Generated_Source\PSoC4/PWM_Volume.c **** *
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 52


1384:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1385:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1386:Generated_Source\PSoC4/PWM_Volume.c **** *
1387:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1388:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_ClearInterrupt(uint32 interruptMask)
1389:Generated_Source\PSoC4/PWM_Volume.c **** {
 1501              		.loc 1 1389 0
 1502              		.cfi_startproc
 1503              		@ args = 0, pretend = 0, frame = 0
 1504              		@ frame_needed = 0, uses_anonymous_args = 0
 1505              		@ link register save eliminated.
 1506              	.LVL93:
1390:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_INTERRUPT_REQ_REG = interruptMask;
 1507              		.loc 1 1390 0
 1508 0000 014B     		ldr	r3, .L117
 1509 0002 1860     		str	r0, [r3]
1391:Generated_Source\PSoC4/PWM_Volume.c **** }
 1510              		.loc 1 1391 0
 1511              		@ sp needed
 1512 0004 7047     		bx	lr
 1513              	.L118:
 1514 0006 C046     		.align	2
 1515              	.L117:
 1516 0008 F0012040 		.word	1075839472
 1517              		.cfi_endproc
 1518              	.LFE39:
 1519              		.size	PWM_Volume_ClearInterrupt, .-PWM_Volume_ClearInterrupt
 1520              		.section	.text.PWM_Volume_SetInterrupt,"ax",%progbits
 1521              		.align	2
 1522              		.global	PWM_Volume_SetInterrupt
 1523              		.code	16
 1524              		.thumb_func
 1525              		.type	PWM_Volume_SetInterrupt, %function
 1526              	PWM_Volume_SetInterrupt:
 1527              	.LFB40:
1392:Generated_Source\PSoC4/PWM_Volume.c **** 
1393:Generated_Source\PSoC4/PWM_Volume.c **** 
1394:Generated_Source\PSoC4/PWM_Volume.c **** /*******************************************************************************
1395:Generated_Source\PSoC4/PWM_Volume.c **** * Function Name: PWM_Volume_SetInterrupt
1396:Generated_Source\PSoC4/PWM_Volume.c **** ********************************************************************************
1397:Generated_Source\PSoC4/PWM_Volume.c **** *
1398:Generated_Source\PSoC4/PWM_Volume.c **** * Summary:
1399:Generated_Source\PSoC4/PWM_Volume.c **** *  Sets a software interrupt request.
1400:Generated_Source\PSoC4/PWM_Volume.c **** *
1401:Generated_Source\PSoC4/PWM_Volume.c **** * Parameters:
1402:Generated_Source\PSoC4/PWM_Volume.c **** *   interruptMask: Mask of interrupts to set
1403:Generated_Source\PSoC4/PWM_Volume.c **** *   Values:
1404:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_TC       - Terminal count mask
1405:Generated_Source\PSoC4/PWM_Volume.c **** *     - PWM_Volume_INTR_MASK_CC_MATCH - Compare count / capture mask
1406:Generated_Source\PSoC4/PWM_Volume.c **** *
1407:Generated_Source\PSoC4/PWM_Volume.c **** * Return:
1408:Generated_Source\PSoC4/PWM_Volume.c **** *  None
1409:Generated_Source\PSoC4/PWM_Volume.c **** *
1410:Generated_Source\PSoC4/PWM_Volume.c **** *******************************************************************************/
1411:Generated_Source\PSoC4/PWM_Volume.c **** void PWM_Volume_SetInterrupt(uint32 interruptMask)
1412:Generated_Source\PSoC4/PWM_Volume.c **** {
 1528              		.loc 1 1412 0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 53


 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 0
 1531              		@ frame_needed = 0, uses_anonymous_args = 0
 1532              		@ link register save eliminated.
 1533              	.LVL94:
1413:Generated_Source\PSoC4/PWM_Volume.c ****     PWM_Volume_INTERRUPT_SET_REG = interruptMask;
 1534              		.loc 1 1413 0
 1535 0000 014B     		ldr	r3, .L120
 1536 0002 1860     		str	r0, [r3]
1414:Generated_Source\PSoC4/PWM_Volume.c **** }
 1537              		.loc 1 1414 0
 1538              		@ sp needed
 1539 0004 7047     		bx	lr
 1540              	.L121:
 1541 0006 C046     		.align	2
 1542              	.L120:
 1543 0008 F4012040 		.word	1075839476
 1544              		.cfi_endproc
 1545              	.LFE40:
 1546              		.size	PWM_Volume_SetInterrupt, .-PWM_Volume_SetInterrupt
 1547              		.global	PWM_Volume_initVar
 1548              		.bss
 1549              		.set	.LANCHOR0,. + 0
 1550              		.type	PWM_Volume_initVar, %object
 1551              		.size	PWM_Volume_initVar, 1
 1552              	PWM_Volume_initVar:
 1553 0000 00       		.space	1
 1554              		.text
 1555              	.Letext0:
 1556              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1557              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 1558              		.section	.debug_info,"",%progbits
 1559              	.Ldebug_info0:
 1560 0000 03090000 		.4byte	0x903
 1561 0004 0400     		.2byte	0x4
 1562 0006 00000000 		.4byte	.Ldebug_abbrev0
 1563 000a 04       		.byte	0x4
 1564 000b 01       		.uleb128 0x1
 1565 000c 0A040000 		.4byte	.LASF79
 1566 0010 0C       		.byte	0xc
 1567 0011 47010000 		.4byte	.LASF80
 1568 0015 72010000 		.4byte	.LASF81
 1569 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1570 001d 00000000 		.4byte	0
 1571 0021 00000000 		.4byte	.Ldebug_line0
 1572 0025 02       		.uleb128 0x2
 1573 0026 01       		.byte	0x1
 1574 0027 06       		.byte	0x6
 1575 0028 B0000000 		.4byte	.LASF0
 1576 002c 02       		.uleb128 0x2
 1577 002d 01       		.byte	0x1
 1578 002e 08       		.byte	0x8
 1579 002f 5C030000 		.4byte	.LASF1
 1580 0033 02       		.uleb128 0x2
 1581 0034 02       		.byte	0x2
 1582 0035 05       		.byte	0x5
 1583 0036 94030000 		.4byte	.LASF2
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 54


 1584 003a 02       		.uleb128 0x2
 1585 003b 02       		.byte	0x2
 1586 003c 07       		.byte	0x7
 1587 003d 92020000 		.4byte	.LASF3
 1588 0041 02       		.uleb128 0x2
 1589 0042 04       		.byte	0x4
 1590 0043 05       		.byte	0x5
 1591 0044 E5000000 		.4byte	.LASF4
 1592 0048 02       		.uleb128 0x2
 1593 0049 04       		.byte	0x4
 1594 004a 07       		.byte	0x7
 1595 004b 46020000 		.4byte	.LASF5
 1596 004f 02       		.uleb128 0x2
 1597 0050 08       		.byte	0x8
 1598 0051 05       		.byte	0x5
 1599 0052 A2000000 		.4byte	.LASF6
 1600 0056 02       		.uleb128 0x2
 1601 0057 08       		.byte	0x8
 1602 0058 07       		.byte	0x7
 1603 0059 6D000000 		.4byte	.LASF7
 1604 005d 03       		.uleb128 0x3
 1605 005e 04       		.byte	0x4
 1606 005f 05       		.byte	0x5
 1607 0060 696E7400 		.ascii	"int\000"
 1608 0064 02       		.uleb128 0x2
 1609 0065 04       		.byte	0x4
 1610 0066 07       		.byte	0x7
 1611 0067 07020000 		.4byte	.LASF8
 1612 006b 04       		.uleb128 0x4
 1613 006c 41010000 		.4byte	.LASF9
 1614 0070 02       		.byte	0x2
 1615 0071 E401     		.2byte	0x1e4
 1616 0073 2C000000 		.4byte	0x2c
 1617 0077 04       		.uleb128 0x4
 1618 0078 CC010000 		.4byte	.LASF10
 1619 007c 02       		.byte	0x2
 1620 007d E601     		.2byte	0x1e6
 1621 007f 48000000 		.4byte	0x48
 1622 0083 02       		.uleb128 0x2
 1623 0084 04       		.byte	0x4
 1624 0085 04       		.byte	0x4
 1625 0086 3C030000 		.4byte	.LASF11
 1626 008a 02       		.uleb128 0x2
 1627 008b 08       		.byte	0x8
 1628 008c 04       		.byte	0x4
 1629 008d 6B010000 		.4byte	.LASF12
 1630 0091 02       		.uleb128 0x2
 1631 0092 01       		.byte	0x1
 1632 0093 08       		.byte	0x8
 1633 0094 B2040000 		.4byte	.LASF13
 1634 0098 04       		.uleb128 0x4
 1635 0099 CD020000 		.4byte	.LASF14
 1636 009d 02       		.byte	0x2
 1637 009e 9002     		.2byte	0x290
 1638 00a0 A4000000 		.4byte	0xa4
 1639 00a4 05       		.uleb128 0x5
 1640 00a5 77000000 		.4byte	0x77
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 55


 1641 00a9 02       		.uleb128 0x2
 1642 00aa 08       		.byte	0x8
 1643 00ab 04       		.byte	0x4
 1644 00ac F6020000 		.4byte	.LASF15
 1645 00b0 02       		.uleb128 0x2
 1646 00b1 04       		.byte	0x4
 1647 00b2 07       		.byte	0x7
 1648 00b3 ED020000 		.4byte	.LASF16
 1649 00b7 06       		.uleb128 0x6
 1650 00b8 4C030000 		.4byte	.LASF17
 1651 00bc 01       		.byte	0x1
 1652 00bd 0001     		.2byte	0x100
 1653 00bf 00000000 		.4byte	.LFB4
 1654 00c3 1C000000 		.4byte	.LFE4-.LFB4
 1655 00c7 01       		.uleb128 0x1
 1656 00c8 9C       		.byte	0x9c
 1657 00c9 F0000000 		.4byte	0xf0
 1658 00cd 07       		.uleb128 0x7
 1659 00ce DD050000 		.4byte	.LASF19
 1660 00d2 01       		.byte	0x1
 1661 00d3 0201     		.2byte	0x102
 1662 00d5 6B000000 		.4byte	0x6b
 1663 00d9 00000000 		.4byte	.LLST0
 1664 00dd 08       		.uleb128 0x8
 1665 00de 06000000 		.4byte	.LVL0
 1666 00e2 F0080000 		.4byte	0x8f0
 1667 00e6 08       		.uleb128 0x8
 1668 00e7 14000000 		.4byte	.LVL1
 1669 00eb FB080000 		.4byte	0x8fb
 1670 00ef 00       		.byte	0
 1671 00f0 06       		.uleb128 0x6
 1672 00f1 DE030000 		.4byte	.LASF18
 1673 00f5 01       		.byte	0x1
 1674 00f6 2501     		.2byte	0x125
 1675 00f8 00000000 		.4byte	.LFB5
 1676 00fc 28000000 		.4byte	.LFE5-.LFB5
 1677 0100 01       		.uleb128 0x1
 1678 0101 9C       		.byte	0x9c
 1679 0102 39010000 		.4byte	0x139
 1680 0106 09       		.uleb128 0x9
 1681 0107 B7040000 		.4byte	.LASF21
 1682 010b 01       		.byte	0x1
 1683 010c 2501     		.2byte	0x125
 1684 010e 77000000 		.4byte	0x77
 1685 0112 13000000 		.4byte	.LLST1
 1686 0116 07       		.uleb128 0x7
 1687 0117 DD050000 		.4byte	.LASF19
 1688 011b 01       		.byte	0x1
 1689 011c 2701     		.2byte	0x127
 1690 011e 6B000000 		.4byte	0x6b
 1691 0122 3F000000 		.4byte	.LLST2
 1692 0126 08       		.uleb128 0x8
 1693 0127 08000000 		.4byte	.LVL3
 1694 012b F0080000 		.4byte	0x8f0
 1695 012f 08       		.uleb128 0x8
 1696 0130 1C000000 		.4byte	.LVL5
 1697 0134 FB080000 		.4byte	0x8fb
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 56


 1698 0138 00       		.byte	0
 1699 0139 06       		.uleb128 0x6
 1700 013a 50050000 		.4byte	.LASF20
 1701 013e 01       		.byte	0x1
 1702 013f 4601     		.2byte	0x146
 1703 0141 00000000 		.4byte	.LFB6
 1704 0145 28000000 		.4byte	.LFE6-.LFB6
 1705 0149 01       		.uleb128 0x1
 1706 014a 9C       		.byte	0x9c
 1707 014b 82010000 		.4byte	0x182
 1708 014f 09       		.uleb128 0x9
 1709 0150 84000000 		.4byte	.LASF22
 1710 0154 01       		.byte	0x1
 1711 0155 4601     		.2byte	0x146
 1712 0157 77000000 		.4byte	0x77
 1713 015b 52000000 		.4byte	.LLST3
 1714 015f 07       		.uleb128 0x7
 1715 0160 DD050000 		.4byte	.LASF19
 1716 0164 01       		.byte	0x1
 1717 0165 4801     		.2byte	0x148
 1718 0167 6B000000 		.4byte	0x6b
 1719 016b 7E000000 		.4byte	.LLST4
 1720 016f 08       		.uleb128 0x8
 1721 0170 08000000 		.4byte	.LVL7
 1722 0174 F0080000 		.4byte	0x8f0
 1723 0178 08       		.uleb128 0x8
 1724 0179 1C000000 		.4byte	.LVL9
 1725 017d FB080000 		.4byte	0x8fb
 1726 0181 00       		.byte	0
 1727 0182 06       		.uleb128 0x6
 1728 0183 29010000 		.4byte	.LASF23
 1729 0187 01       		.byte	0x1
 1730 0188 6B01     		.2byte	0x16b
 1731 018a 00000000 		.4byte	.LFB7
 1732 018e 28000000 		.4byte	.LFE7-.LFB7
 1733 0192 01       		.uleb128 0x1
 1734 0193 9C       		.byte	0x9c
 1735 0194 CB010000 		.4byte	0x1cb
 1736 0198 09       		.uleb128 0x9
 1737 0199 42030000 		.4byte	.LASF24
 1738 019d 01       		.byte	0x1
 1739 019e 6B01     		.2byte	0x16b
 1740 01a0 77000000 		.4byte	0x77
 1741 01a4 91000000 		.4byte	.LLST5
 1742 01a8 07       		.uleb128 0x7
 1743 01a9 DD050000 		.4byte	.LASF19
 1744 01ad 01       		.byte	0x1
 1745 01ae 6D01     		.2byte	0x16d
 1746 01b0 6B000000 		.4byte	0x6b
 1747 01b4 BD000000 		.4byte	.LLST6
 1748 01b8 08       		.uleb128 0x8
 1749 01b9 08000000 		.4byte	.LVL11
 1750 01bd F0080000 		.4byte	0x8f0
 1751 01c1 08       		.uleb128 0x8
 1752 01c2 1C000000 		.4byte	.LVL13
 1753 01c6 FB080000 		.4byte	0x8fb
 1754 01ca 00       		.byte	0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 57


 1755 01cb 06       		.uleb128 0x6
 1756 01cc 9C040000 		.4byte	.LASF25
 1757 01d0 01       		.byte	0x1
 1758 01d1 8B01     		.2byte	0x18b
 1759 01d3 00000000 		.4byte	.LFB8
 1760 01d7 30000000 		.4byte	.LFE8-.LFB8
 1761 01db 01       		.uleb128 0x1
 1762 01dc 9C       		.byte	0x9c
 1763 01dd 14020000 		.4byte	0x214
 1764 01e1 09       		.uleb128 0x9
 1765 01e2 A5020000 		.4byte	.LASF26
 1766 01e6 01       		.byte	0x1
 1767 01e7 8B01     		.2byte	0x18b
 1768 01e9 77000000 		.4byte	0x77
 1769 01ed D0000000 		.4byte	.LLST7
 1770 01f1 07       		.uleb128 0x7
 1771 01f2 DD050000 		.4byte	.LASF19
 1772 01f6 01       		.byte	0x1
 1773 01f7 8D01     		.2byte	0x18d
 1774 01f9 6B000000 		.4byte	0x6b
 1775 01fd FC000000 		.4byte	.LLST8
 1776 0201 08       		.uleb128 0x8
 1777 0202 08000000 		.4byte	.LVL15
 1778 0206 F0080000 		.4byte	0x8f0
 1779 020a 08       		.uleb128 0x8
 1780 020b 24000000 		.4byte	.LVL16
 1781 020f FB080000 		.4byte	0x8fb
 1782 0213 00       		.byte	0
 1783 0214 06       		.uleb128 0x6
 1784 0215 BC000000 		.4byte	.LASF27
 1785 0219 01       		.byte	0x1
 1786 021a C101     		.2byte	0x1c1
 1787 021c 00000000 		.4byte	.LFB9
 1788 0220 10000000 		.4byte	.LFE9-.LFB9
 1789 0224 01       		.uleb128 0x1
 1790 0225 9C       		.byte	0x9c
 1791 0226 3B020000 		.4byte	0x23b
 1792 022a 09       		.uleb128 0x9
 1793 022b 58020000 		.4byte	.LASF28
 1794 022f 01       		.byte	0x1
 1795 0230 C101     		.2byte	0x1c1
 1796 0232 77000000 		.4byte	0x77
 1797 0236 0F010000 		.4byte	.LLST9
 1798 023a 00       		.byte	0
 1799 023b 06       		.uleb128 0x6
 1800 023c 9E030000 		.4byte	.LASF29
 1801 0240 01       		.byte	0x1
 1802 0241 E501     		.2byte	0x1e5
 1803 0243 00000000 		.4byte	.LFB10
 1804 0247 28000000 		.4byte	.LFE10-.LFB10
 1805 024b 01       		.uleb128 0x1
 1806 024c 9C       		.byte	0x9c
 1807 024d 84020000 		.4byte	0x284
 1808 0251 09       		.uleb128 0x9
 1809 0252 4A060000 		.4byte	.LASF30
 1810 0256 01       		.byte	0x1
 1811 0257 E501     		.2byte	0x1e5
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 58


 1812 0259 77000000 		.4byte	0x77
 1813 025d 30010000 		.4byte	.LLST10
 1814 0261 07       		.uleb128 0x7
 1815 0262 DD050000 		.4byte	.LASF19
 1816 0266 01       		.byte	0x1
 1817 0267 E701     		.2byte	0x1e7
 1818 0269 6B000000 		.4byte	0x6b
 1819 026d 5C010000 		.4byte	.LLST11
 1820 0271 08       		.uleb128 0x8
 1821 0272 08000000 		.4byte	.LVL21
 1822 0276 F0080000 		.4byte	0x8f0
 1823 027a 08       		.uleb128 0x8
 1824 027b 22000000 		.4byte	.LVL23
 1825 027f FB080000 		.4byte	0x8fb
 1826 0283 00       		.byte	0
 1827 0284 06       		.uleb128 0x6
 1828 0285 D4040000 		.4byte	.LASF31
 1829 0289 01       		.byte	0x1
 1830 028a 0702     		.2byte	0x207
 1831 028c 00000000 		.4byte	.LFB11
 1832 0290 28000000 		.4byte	.LFE11-.LFB11
 1833 0294 01       		.uleb128 0x1
 1834 0295 9C       		.byte	0x9c
 1835 0296 CD020000 		.4byte	0x2cd
 1836 029a 09       		.uleb128 0x9
 1837 029b 6A030000 		.4byte	.LASF32
 1838 029f 01       		.byte	0x1
 1839 02a0 0702     		.2byte	0x207
 1840 02a2 77000000 		.4byte	0x77
 1841 02a6 6F010000 		.4byte	.LLST12
 1842 02aa 07       		.uleb128 0x7
 1843 02ab DD050000 		.4byte	.LASF19
 1844 02af 01       		.byte	0x1
 1845 02b0 0902     		.2byte	0x209
 1846 02b2 6B000000 		.4byte	0x6b
 1847 02b6 9B010000 		.4byte	.LLST13
 1848 02ba 08       		.uleb128 0x8
 1849 02bb 08000000 		.4byte	.LVL25
 1850 02bf F0080000 		.4byte	0x8f0
 1851 02c3 08       		.uleb128 0x8
 1852 02c4 22000000 		.4byte	.LVL27
 1853 02c8 FB080000 		.4byte	0x8fb
 1854 02cc 00       		.byte	0
 1855 02cd 06       		.uleb128 0x6
 1856 02ce 64060000 		.4byte	.LASF33
 1857 02d2 01       		.byte	0x1
 1858 02d3 2802     		.2byte	0x228
 1859 02d5 00000000 		.4byte	.LFB12
 1860 02d9 2C000000 		.4byte	.LFE12-.LFB12
 1861 02dd 01       		.uleb128 0x1
 1862 02de 9C       		.byte	0x9c
 1863 02df 16030000 		.4byte	0x316
 1864 02e3 09       		.uleb128 0x9
 1865 02e4 E4010000 		.4byte	.LASF34
 1866 02e8 01       		.byte	0x1
 1867 02e9 2802     		.2byte	0x228
 1868 02eb 77000000 		.4byte	0x77
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 59


 1869 02ef AE010000 		.4byte	.LLST14
 1870 02f3 07       		.uleb128 0x7
 1871 02f4 DD050000 		.4byte	.LASF19
 1872 02f8 01       		.byte	0x1
 1873 02f9 2A02     		.2byte	0x22a
 1874 02fb 6B000000 		.4byte	0x6b
 1875 02ff DA010000 		.4byte	.LLST15
 1876 0303 08       		.uleb128 0x8
 1877 0304 08000000 		.4byte	.LVL29
 1878 0308 F0080000 		.4byte	0x8f0
 1879 030c 08       		.uleb128 0x8
 1880 030d 20000000 		.4byte	.LVL31
 1881 0311 FB080000 		.4byte	0x8fb
 1882 0315 00       		.byte	0
 1883 0316 06       		.uleb128 0x6
 1884 0317 4E000000 		.4byte	.LASF35
 1885 031b 01       		.byte	0x1
 1886 031c 4902     		.2byte	0x249
 1887 031e 00000000 		.4byte	.LFB13
 1888 0322 28000000 		.4byte	.LFE13-.LFB13
 1889 0326 01       		.uleb128 0x1
 1890 0327 9C       		.byte	0x9c
 1891 0328 5F030000 		.4byte	0x35f
 1892 032c 09       		.uleb128 0x9
 1893 032d DF010000 		.4byte	.LASF36
 1894 0331 01       		.byte	0x1
 1895 0332 4902     		.2byte	0x249
 1896 0334 77000000 		.4byte	0x77
 1897 0338 ED010000 		.4byte	.LLST16
 1898 033c 07       		.uleb128 0x7
 1899 033d DD050000 		.4byte	.LASF19
 1900 0341 01       		.byte	0x1
 1901 0342 4B02     		.2byte	0x24b
 1902 0344 6B000000 		.4byte	0x6b
 1903 0348 19020000 		.4byte	.LLST17
 1904 034c 08       		.uleb128 0x8
 1905 034d 08000000 		.4byte	.LVL33
 1906 0351 F0080000 		.4byte	0x8f0
 1907 0355 08       		.uleb128 0x8
 1908 0356 1C000000 		.4byte	.LVL35
 1909 035a FB080000 		.4byte	0x8fb
 1910 035e 00       		.byte	0
 1911 035f 06       		.uleb128 0x6
 1912 0360 32060000 		.4byte	.LASF37
 1913 0364 01       		.byte	0x1
 1914 0365 6702     		.2byte	0x267
 1915 0367 00000000 		.4byte	.LFB14
 1916 036b 10000000 		.4byte	.LFE14-.LFB14
 1917 036f 01       		.uleb128 0x1
 1918 0370 9C       		.byte	0x9c
 1919 0371 86030000 		.4byte	0x386
 1920 0375 09       		.uleb128 0x9
 1921 0376 00000000 		.4byte	.LASF38
 1922 037a 01       		.byte	0x1
 1923 037b 6702     		.2byte	0x267
 1924 037d 77000000 		.4byte	0x77
 1925 0381 2C020000 		.4byte	.LLST18
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 60


 1926 0385 00       		.byte	0
 1927 0386 0A       		.uleb128 0xa
 1928 0387 2F020000 		.4byte	.LASF43
 1929 038b 01       		.byte	0x1
 1930 038c 7B02     		.2byte	0x27b
 1931 038e 77000000 		.4byte	0x77
 1932 0392 00000000 		.4byte	.LFB15
 1933 0396 10000000 		.4byte	.LFE15-.LFB15
 1934 039a 01       		.uleb128 0x1
 1935 039b 9C       		.byte	0x9c
 1936 039c 06       		.uleb128 0x6
 1937 039d ED010000 		.4byte	.LASF39
 1938 03a1 01       		.byte	0x1
 1939 03a2 9802     		.2byte	0x298
 1940 03a4 00000000 		.4byte	.LFB16
 1941 03a8 28000000 		.4byte	.LFE16-.LFB16
 1942 03ac 01       		.uleb128 0x1
 1943 03ad 9C       		.byte	0x9c
 1944 03ae E5030000 		.4byte	0x3e5
 1945 03b2 09       		.uleb128 0x9
 1946 03b3 44050000 		.4byte	.LASF40
 1947 03b7 01       		.byte	0x1
 1948 03b8 9802     		.2byte	0x298
 1949 03ba 77000000 		.4byte	0x77
 1950 03be 4D020000 		.4byte	.LLST19
 1951 03c2 07       		.uleb128 0x7
 1952 03c3 DD050000 		.4byte	.LASF19
 1953 03c7 01       		.byte	0x1
 1954 03c8 9A02     		.2byte	0x29a
 1955 03ca 6B000000 		.4byte	0x6b
 1956 03ce 79020000 		.4byte	.LLST20
 1957 03d2 08       		.uleb128 0x8
 1958 03d3 08000000 		.4byte	.LVL39
 1959 03d7 F0080000 		.4byte	0x8f0
 1960 03db 08       		.uleb128 0x8
 1961 03dc 1C000000 		.4byte	.LVL41
 1962 03e0 FB080000 		.4byte	0x8fb
 1963 03e4 00       		.byte	0
 1964 03e5 06       		.uleb128 0x6
 1965 03e6 7E060000 		.4byte	.LASF41
 1966 03ea 01       		.byte	0x1
 1967 03eb B502     		.2byte	0x2b5
 1968 03ed 00000000 		.4byte	.LFB17
 1969 03f1 10000000 		.4byte	.LFE17-.LFB17
 1970 03f5 01       		.uleb128 0x1
 1971 03f6 9C       		.byte	0x9c
 1972 03f7 0C040000 		.4byte	0x40c
 1973 03fb 09       		.uleb128 0x9
 1974 03fc 66000000 		.4byte	.LASF42
 1975 0400 01       		.byte	0x1
 1976 0401 B502     		.2byte	0x2b5
 1977 0403 77000000 		.4byte	0x77
 1978 0407 8C020000 		.4byte	.LLST21
 1979 040b 00       		.byte	0
 1980 040c 0A       		.uleb128 0xa
 1981 040d 06000000 		.4byte	.LASF44
 1982 0411 01       		.byte	0x1
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 61


 1983 0412 C902     		.2byte	0x2c9
 1984 0414 77000000 		.4byte	0x77
 1985 0418 00000000 		.4byte	.LFB18
 1986 041c 10000000 		.4byte	.LFE18-.LFB18
 1987 0420 01       		.uleb128 0x1
 1988 0421 9C       		.byte	0x9c
 1989 0422 06       		.uleb128 0x6
 1990 0423 22030000 		.4byte	.LASF45
 1991 0427 01       		.byte	0x1
 1992 0428 E302     		.2byte	0x2e3
 1993 042a 00000000 		.4byte	.LFB19
 1994 042e 24000000 		.4byte	.LFE19-.LFB19
 1995 0432 01       		.uleb128 0x1
 1996 0433 9C       		.byte	0x9c
 1997 0434 6B040000 		.4byte	0x46b
 1998 0438 09       		.uleb128 0x9
 1999 0439 59060000 		.4byte	.LASF46
 2000 043d 01       		.byte	0x1
 2001 043e E302     		.2byte	0x2e3
 2002 0440 77000000 		.4byte	0x77
 2003 0444 AD020000 		.4byte	.LLST22
 2004 0448 07       		.uleb128 0x7
 2005 0449 DD050000 		.4byte	.LASF19
 2006 044d 01       		.byte	0x1
 2007 044e E502     		.2byte	0x2e5
 2008 0450 6B000000 		.4byte	0x6b
 2009 0454 D9020000 		.4byte	.LLST23
 2010 0458 08       		.uleb128 0x8
 2011 0459 08000000 		.4byte	.LVL45
 2012 045d F0080000 		.4byte	0x8f0
 2013 0461 08       		.uleb128 0x8
 2014 0462 1E000000 		.4byte	.LVL47
 2015 0466 FB080000 		.4byte	0x8fb
 2016 046a 00       		.byte	0
 2017 046b 06       		.uleb128 0x6
 2018 046c 78020000 		.4byte	.LASF47
 2019 0470 01       		.byte	0x1
 2020 0471 FE02     		.2byte	0x2fe
 2021 0473 00000000 		.4byte	.LFB20
 2022 0477 10000000 		.4byte	.LFE20-.LFB20
 2023 047b 01       		.uleb128 0x1
 2024 047c 9C       		.byte	0x9c
 2025 047d 92040000 		.4byte	0x492
 2026 0481 09       		.uleb128 0x9
 2027 0482 95060000 		.4byte	.LASF48
 2028 0486 01       		.byte	0x1
 2029 0487 FE02     		.2byte	0x2fe
 2030 0489 77000000 		.4byte	0x77
 2031 048d EC020000 		.4byte	.LLST24
 2032 0491 00       		.byte	0
 2033 0492 0A       		.uleb128 0xa
 2034 0493 7B030000 		.4byte	.LASF49
 2035 0497 01       		.byte	0x1
 2036 0498 1203     		.2byte	0x312
 2037 049a 77000000 		.4byte	0x77
 2038 049e 00000000 		.4byte	.LFB21
 2039 04a2 10000000 		.4byte	.LFE21-.LFB21
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 62


 2040 04a6 01       		.uleb128 0x1
 2041 04a7 9C       		.byte	0x9c
 2042 04a8 06       		.uleb128 0x6
 2043 04a9 F1030000 		.4byte	.LASF50
 2044 04ad 01       		.byte	0x1
 2045 04ae 2C03     		.2byte	0x32c
 2046 04b0 00000000 		.4byte	.LFB22
 2047 04b4 28000000 		.4byte	.LFE22-.LFB22
 2048 04b8 01       		.uleb128 0x1
 2049 04b9 9C       		.byte	0x9c
 2050 04ba F1040000 		.4byte	0x4f1
 2051 04be 09       		.uleb128 0x9
 2052 04bf 59060000 		.4byte	.LASF46
 2053 04c3 01       		.byte	0x1
 2054 04c4 2C03     		.2byte	0x32c
 2055 04c6 77000000 		.4byte	0x77
 2056 04ca 0D030000 		.4byte	.LLST25
 2057 04ce 07       		.uleb128 0x7
 2058 04cf DD050000 		.4byte	.LASF19
 2059 04d3 01       		.byte	0x1
 2060 04d4 2E03     		.2byte	0x32e
 2061 04d6 6B000000 		.4byte	0x6b
 2062 04da 39030000 		.4byte	.LLST26
 2063 04de 08       		.uleb128 0x8
 2064 04df 08000000 		.4byte	.LVL51
 2065 04e3 F0080000 		.4byte	0x8f0
 2066 04e7 08       		.uleb128 0x8
 2067 04e8 22000000 		.4byte	.LVL53
 2068 04ec FB080000 		.4byte	0x8fb
 2069 04f0 00       		.byte	0
 2070 04f1 06       		.uleb128 0x6
 2071 04f2 12050000 		.4byte	.LASF51
 2072 04f6 01       		.byte	0x1
 2073 04f7 5103     		.2byte	0x351
 2074 04f9 00000000 		.4byte	.LFB23
 2075 04fd 10000000 		.4byte	.LFE23-.LFB23
 2076 0501 01       		.uleb128 0x1
 2077 0502 9C       		.byte	0x9c
 2078 0503 18050000 		.4byte	0x518
 2079 0507 09       		.uleb128 0x9
 2080 0508 02030000 		.4byte	.LASF52
 2081 050c 01       		.byte	0x1
 2082 050d 5103     		.2byte	0x351
 2083 050f 77000000 		.4byte	0x77
 2084 0513 4C030000 		.4byte	.LLST27
 2085 0517 00       		.byte	0
 2086 0518 0A       		.uleb128 0xa
 2087 0519 12010000 		.4byte	.LASF53
 2088 051d 01       		.byte	0x1
 2089 051e 8403     		.2byte	0x384
 2090 0520 77000000 		.4byte	0x77
 2091 0524 00000000 		.4byte	.LFB24
 2092 0528 10000000 		.4byte	.LFE24-.LFB24
 2093 052c 01       		.uleb128 0x1
 2094 052d 9C       		.byte	0x9c
 2095 052e 06       		.uleb128 0x6
 2096 052f 14020000 		.4byte	.LASF54
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 63


 2097 0533 01       		.byte	0x1
 2098 0534 BA03     		.2byte	0x3ba
 2099 0536 00000000 		.4byte	.LFB25
 2100 053a 10000000 		.4byte	.LFE25-.LFB25
 2101 053e 01       		.uleb128 0x1
 2102 053f 9C       		.byte	0x9c
 2103 0540 55050000 		.4byte	0x555
 2104 0544 09       		.uleb128 0x9
 2105 0545 99050000 		.4byte	.LASF55
 2106 0549 01       		.byte	0x1
 2107 054a BA03     		.2byte	0x3ba
 2108 054c 77000000 		.4byte	0x77
 2109 0550 6D030000 		.4byte	.LLST28
 2110 0554 00       		.byte	0
 2111 0555 0A       		.uleb128 0xa
 2112 0556 EE050000 		.4byte	.LASF56
 2113 055a 01       		.byte	0x1
 2114 055b E803     		.2byte	0x3e8
 2115 055d 77000000 		.4byte	0x77
 2116 0561 00000000 		.4byte	.LFB26
 2117 0565 10000000 		.4byte	.LFE26-.LFB26
 2118 0569 01       		.uleb128 0x1
 2119 056a 9C       		.byte	0x9c
 2120 056b 0A       		.uleb128 0xa
 2121 056c 8B000000 		.4byte	.LASF57
 2122 0570 01       		.byte	0x1
 2123 0571 1604     		.2byte	0x416
 2124 0573 77000000 		.4byte	0x77
 2125 0577 00000000 		.4byte	.LFB27
 2126 057b 10000000 		.4byte	.LFE27-.LFB27
 2127 057f 01       		.uleb128 0x1
 2128 0580 9C       		.byte	0x9c
 2129 0581 0A       		.uleb128 0xa
 2130 0582 D3020000 		.4byte	.LASF58
 2131 0586 01       		.byte	0x1
 2132 0587 2B04     		.2byte	0x42b
 2133 0589 77000000 		.4byte	0x77
 2134 058d 00000000 		.4byte	.LFB28
 2135 0591 10000000 		.4byte	.LFE28-.LFB28
 2136 0595 01       		.uleb128 0x1
 2137 0596 9C       		.byte	0x9c
 2138 0597 06       		.uleb128 0x6
 2139 0598 B3020000 		.4byte	.LASF59
 2140 059c 01       		.byte	0x1
 2141 059d 4604     		.2byte	0x446
 2142 059f 00000000 		.4byte	.LFB29
 2143 05a3 24000000 		.4byte	.LFE29-.LFB29
 2144 05a7 01       		.uleb128 0x1
 2145 05a8 9C       		.byte	0x9c
 2146 05a9 E0050000 		.4byte	0x5e0
 2147 05ad 09       		.uleb128 0x9
 2148 05ae D3010000 		.4byte	.LASF60
 2149 05b2 01       		.byte	0x1
 2150 05b3 4604     		.2byte	0x446
 2151 05b5 77000000 		.4byte	0x77
 2152 05b9 8E030000 		.4byte	.LLST29
 2153 05bd 07       		.uleb128 0x7
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 64


 2154 05be DD050000 		.4byte	.LASF19
 2155 05c2 01       		.byte	0x1
 2156 05c3 4804     		.2byte	0x448
 2157 05c5 6B000000 		.4byte	0x6b
 2158 05c9 BA030000 		.4byte	.LLST30
 2159 05cd 08       		.uleb128 0x8
 2160 05ce 08000000 		.4byte	.LVL59
 2161 05d2 F0080000 		.4byte	0x8f0
 2162 05d6 08       		.uleb128 0x8
 2163 05d7 1C000000 		.4byte	.LVL61
 2164 05db FB080000 		.4byte	0x8fb
 2165 05df 00       		.byte	0
 2166 05e0 06       		.uleb128 0x6
 2167 05e1 19060000 		.4byte	.LASF61
 2168 05e5 01       		.byte	0x1
 2169 05e6 6704     		.2byte	0x467
 2170 05e8 00000000 		.4byte	.LFB30
 2171 05ec 24000000 		.4byte	.LFE30-.LFB30
 2172 05f0 01       		.uleb128 0x1
 2173 05f1 9C       		.byte	0x9c
 2174 05f2 29060000 		.4byte	0x629
 2175 05f6 09       		.uleb128 0x9
 2176 05f7 D3010000 		.4byte	.LASF60
 2177 05fb 01       		.byte	0x1
 2178 05fc 6704     		.2byte	0x467
 2179 05fe 77000000 		.4byte	0x77
 2180 0602 CD030000 		.4byte	.LLST31
 2181 0606 07       		.uleb128 0x7
 2182 0607 DD050000 		.4byte	.LASF19
 2183 060b 01       		.byte	0x1
 2184 060c 6904     		.2byte	0x469
 2185 060e 6B000000 		.4byte	0x6b
 2186 0612 F9030000 		.4byte	.LLST32
 2187 0616 08       		.uleb128 0x8
 2188 0617 08000000 		.4byte	.LVL63
 2189 061b F0080000 		.4byte	0x8f0
 2190 061f 08       		.uleb128 0x8
 2191 0620 1E000000 		.4byte	.LVL65
 2192 0624 FB080000 		.4byte	0x8fb
 2193 0628 00       		.byte	0
 2194 0629 06       		.uleb128 0x6
 2195 062a BC040000 		.4byte	.LASF62
 2196 062e 01       		.byte	0x1
 2197 062f 8804     		.2byte	0x488
 2198 0631 00000000 		.4byte	.LFB31
 2199 0635 28000000 		.4byte	.LFE31-.LFB31
 2200 0639 01       		.uleb128 0x1
 2201 063a 9C       		.byte	0x9c
 2202 063b 72060000 		.4byte	0x672
 2203 063f 09       		.uleb128 0x9
 2204 0640 D3010000 		.4byte	.LASF60
 2205 0644 01       		.byte	0x1
 2206 0645 8804     		.2byte	0x488
 2207 0647 77000000 		.4byte	0x77
 2208 064b 0C040000 		.4byte	.LLST33
 2209 064f 07       		.uleb128 0x7
 2210 0650 DD050000 		.4byte	.LASF19
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 65


 2211 0654 01       		.byte	0x1
 2212 0655 8A04     		.2byte	0x48a
 2213 0657 6B000000 		.4byte	0x6b
 2214 065b 38040000 		.4byte	.LLST34
 2215 065f 08       		.uleb128 0x8
 2216 0660 08000000 		.4byte	.LVL67
 2217 0664 F0080000 		.4byte	0x8f0
 2218 0668 08       		.uleb128 0x8
 2219 0669 1E000000 		.4byte	.LVL69
 2220 066d FB080000 		.4byte	0x8fb
 2221 0671 00       		.byte	0
 2222 0672 06       		.uleb128 0x6
 2223 0673 A4050000 		.4byte	.LASF63
 2224 0677 01       		.byte	0x1
 2225 0678 A804     		.2byte	0x4a8
 2226 067a 00000000 		.4byte	.LFB32
 2227 067e 24000000 		.4byte	.LFE32-.LFB32
 2228 0682 01       		.uleb128 0x1
 2229 0683 9C       		.byte	0x9c
 2230 0684 BB060000 		.4byte	0x6bb
 2231 0688 09       		.uleb128 0x9
 2232 0689 D3010000 		.4byte	.LASF60
 2233 068d 01       		.byte	0x1
 2234 068e A804     		.2byte	0x4a8
 2235 0690 77000000 		.4byte	0x77
 2236 0694 4B040000 		.4byte	.LLST35
 2237 0698 07       		.uleb128 0x7
 2238 0699 DD050000 		.4byte	.LASF19
 2239 069d 01       		.byte	0x1
 2240 069e AA04     		.2byte	0x4aa
 2241 06a0 6B000000 		.4byte	0x6b
 2242 06a4 77040000 		.4byte	.LLST36
 2243 06a8 08       		.uleb128 0x8
 2244 06a9 08000000 		.4byte	.LVL71
 2245 06ad F0080000 		.4byte	0x8f0
 2246 06b1 08       		.uleb128 0x8
 2247 06b2 1E000000 		.4byte	.LVL73
 2248 06b6 FB080000 		.4byte	0x8fb
 2249 06ba 00       		.byte	0
 2250 06bb 06       		.uleb128 0x6
 2251 06bc C6030000 		.4byte	.LASF64
 2252 06c0 01       		.byte	0x1
 2253 06c1 C904     		.2byte	0x4c9
 2254 06c3 00000000 		.4byte	.LFB33
 2255 06c7 24000000 		.4byte	.LFE33-.LFB33
 2256 06cb 01       		.uleb128 0x1
 2257 06cc 9C       		.byte	0x9c
 2258 06cd 04070000 		.4byte	0x704
 2259 06d1 09       		.uleb128 0x9
 2260 06d2 D3010000 		.4byte	.LASF60
 2261 06d6 01       		.byte	0x1
 2262 06d7 C904     		.2byte	0x4c9
 2263 06d9 77000000 		.4byte	0x77
 2264 06dd 8A040000 		.4byte	.LLST37
 2265 06e1 07       		.uleb128 0x7
 2266 06e2 DD050000 		.4byte	.LASF19
 2267 06e6 01       		.byte	0x1
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 66


 2268 06e7 CB04     		.2byte	0x4cb
 2269 06e9 6B000000 		.4byte	0x6b
 2270 06ed B6040000 		.4byte	.LLST38
 2271 06f1 08       		.uleb128 0x8
 2272 06f2 08000000 		.4byte	.LVL75
 2273 06f6 F0080000 		.4byte	0x8f0
 2274 06fa 08       		.uleb128 0x8
 2275 06fb 1E000000 		.4byte	.LVL77
 2276 06ff FB080000 		.4byte	0x8fb
 2277 0703 00       		.byte	0
 2278 0704 06       		.uleb128 0x6
 2279 0705 F0040000 		.4byte	.LASF65
 2280 0709 01       		.byte	0x1
 2281 070a F104     		.2byte	0x4f1
 2282 070c 00000000 		.4byte	.LFB34
 2283 0710 1C000000 		.4byte	.LFE34-.LFB34
 2284 0714 01       		.uleb128 0x1
 2285 0715 9C       		.byte	0x9c
 2286 0716 5D070000 		.4byte	0x75d
 2287 071a 09       		.uleb128 0x9
 2288 071b DF010000 		.4byte	.LASF36
 2289 071f 01       		.byte	0x1
 2290 0720 F104     		.2byte	0x4f1
 2291 0722 77000000 		.4byte	0x77
 2292 0726 C9040000 		.4byte	.LLST39
 2293 072a 09       		.uleb128 0x9
 2294 072b 0A050000 		.4byte	.LASF66
 2295 072f 01       		.byte	0x1
 2296 0730 F104     		.2byte	0x4f1
 2297 0732 77000000 		.4byte	0x77
 2298 0736 F5040000 		.4byte	.LLST40
 2299 073a 07       		.uleb128 0x7
 2300 073b DD050000 		.4byte	.LASF19
 2301 073f 01       		.byte	0x1
 2302 0740 F304     		.2byte	0x4f3
 2303 0742 6B000000 		.4byte	0x6b
 2304 0746 21050000 		.4byte	.LLST41
 2305 074a 08       		.uleb128 0x8
 2306 074b 0A000000 		.4byte	.LVL79
 2307 074f F0080000 		.4byte	0x8f0
 2308 0753 08       		.uleb128 0x8
 2309 0754 14000000 		.4byte	.LVL81
 2310 0758 FB080000 		.4byte	0x8fb
 2311 075c 00       		.byte	0
 2312 075d 0B       		.uleb128 0xb
 2313 075e CB050000 		.4byte	.LASF67
 2314 0762 01       		.byte	0x1
 2315 0763 B1       		.byte	0xb1
 2316 0764 00000000 		.4byte	.LFB2
 2317 0768 24000000 		.4byte	.LFE2-.LFB2
 2318 076c 01       		.uleb128 0x1
 2319 076d 9C       		.byte	0x9c
 2320 076e A8070000 		.4byte	0x7a8
 2321 0772 0C       		.uleb128 0xc
 2322 0773 DD050000 		.4byte	.LASF19
 2323 0777 01       		.byte	0x1
 2324 0778 B3       		.byte	0xb3
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 67


 2325 0779 6B000000 		.4byte	0x6b
 2326 077d 34050000 		.4byte	.LLST42
 2327 0781 08       		.uleb128 0x8
 2328 0782 06000000 		.4byte	.LVL83
 2329 0786 F0080000 		.4byte	0x8f0
 2330 078a 08       		.uleb128 0x8
 2331 078b 14000000 		.4byte	.LVL84
 2332 078f FB080000 		.4byte	0x8fb
 2333 0793 0D       		.uleb128 0xd
 2334 0794 1C000000 		.4byte	.LVL85
 2335 0798 04070000 		.4byte	0x704
 2336 079c 0E       		.uleb128 0xe
 2337 079d 01       		.uleb128 0x1
 2338 079e 50       		.byte	0x50
 2339 079f 01       		.uleb128 0x1
 2340 07a0 38       		.byte	0x38
 2341 07a1 0E       		.uleb128 0xe
 2342 07a2 01       		.uleb128 0x1
 2343 07a3 51       		.byte	0x51
 2344 07a4 01       		.uleb128 0x1
 2345 07a5 48       		.byte	0x48
 2346 07a6 00       		.byte	0
 2347 07a7 00       		.byte	0
 2348 07a8 0A       		.uleb128 0xa
 2349 07a9 65050000 		.4byte	.LASF68
 2350 07ad 01       		.byte	0x1
 2351 07ae 0E05     		.2byte	0x50e
 2352 07b0 77000000 		.4byte	0x77
 2353 07b4 00000000 		.4byte	.LFB35
 2354 07b8 14000000 		.4byte	.LFE35-.LFB35
 2355 07bc 01       		.uleb128 0x1
 2356 07bd 9C       		.byte	0x9c
 2357 07be 06       		.uleb128 0x6
 2358 07bf 1C000000 		.4byte	.LASF69
 2359 07c3 01       		.byte	0x1
 2360 07c4 2705     		.2byte	0x527
 2361 07c6 00000000 		.4byte	.LFB36
 2362 07ca 0C000000 		.4byte	.LFE36-.LFB36
 2363 07ce 01       		.uleb128 0x1
 2364 07cf 9C       		.byte	0x9c
 2365 07d0 E3070000 		.4byte	0x7e3
 2366 07d4 0F       		.uleb128 0xf
 2367 07d5 B8030000 		.4byte	.LASF70
 2368 07d9 01       		.byte	0x1
 2369 07da 2705     		.2byte	0x527
 2370 07dc 77000000 		.4byte	0x77
 2371 07e0 01       		.uleb128 0x1
 2372 07e1 50       		.byte	0x50
 2373 07e2 00       		.byte	0
 2374 07e3 0B       		.uleb128 0xb
 2375 07e4 BB050000 		.4byte	.LASF71
 2376 07e8 01       		.byte	0x1
 2377 07e9 26       		.byte	0x26
 2378 07ea 00000000 		.4byte	.LFB1
 2379 07ee 44000000 		.4byte	.LFE1-.LFB1
 2380 07f2 01       		.uleb128 0x1
 2381 07f3 9C       		.byte	0x9c
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 68


 2382 07f4 41080000 		.4byte	0x841
 2383 07f8 10       		.uleb128 0x10
 2384 07f9 14000000 		.4byte	.LVL87
 2385 07fd 5F030000 		.4byte	0x35f
 2386 0801 0B080000 		.4byte	0x80b
 2387 0805 0E       		.uleb128 0xe
 2388 0806 01       		.uleb128 0x1
 2389 0807 50       		.byte	0x50
 2390 0808 01       		.uleb128 0x1
 2391 0809 30       		.byte	0x30
 2392 080a 00       		.byte	0
 2393 080b 10       		.uleb128 0x10
 2394 080c 24000000 		.4byte	.LVL88
 2395 0810 BE070000 		.4byte	0x7be
 2396 0814 1E080000 		.4byte	0x81e
 2397 0818 0E       		.uleb128 0xe
 2398 0819 01       		.uleb128 0x1
 2399 081a 50       		.byte	0x50
 2400 081b 01       		.uleb128 0x1
 2401 081c 31       		.byte	0x31
 2402 081d 00       		.byte	0
 2403 081e 10       		.uleb128 0x10
 2404 081f 30000000 		.4byte	.LVL89
 2405 0823 E5030000 		.4byte	0x3e5
 2406 0827 31080000 		.4byte	0x831
 2407 082b 0E       		.uleb128 0xe
 2408 082c 01       		.uleb128 0x1
 2409 082d 50       		.byte	0x50
 2410 082e 01       		.uleb128 0x1
 2411 082f 44       		.byte	0x44
 2412 0830 00       		.byte	0
 2413 0831 0D       		.uleb128 0xd
 2414 0832 36000000 		.4byte	.LVL90
 2415 0836 F1040000 		.4byte	0x4f1
 2416 083a 0E       		.uleb128 0xe
 2417 083b 01       		.uleb128 0x1
 2418 083c 50       		.byte	0x50
 2419 083d 01       		.uleb128 0x1
 2420 083e 3E       		.byte	0x3e
 2421 083f 00       		.byte	0
 2422 0840 00       		.byte	0
 2423 0841 0B       		.uleb128 0xb
 2424 0842 08060000 		.4byte	.LASF72
 2425 0846 01       		.byte	0x1
 2426 0847 E6       		.byte	0xe6
 2427 0848 00000000 		.4byte	.LFB3
 2428 084c 20000000 		.4byte	.LFE3-.LFB3
 2429 0850 01       		.uleb128 0x1
 2430 0851 9C       		.byte	0x9c
 2431 0852 69080000 		.4byte	0x869
 2432 0856 08       		.uleb128 0x8
 2433 0857 0E000000 		.4byte	.LVL91
 2434 085b E3070000 		.4byte	0x7e3
 2435 085f 08       		.uleb128 0x8
 2436 0860 18000000 		.4byte	.LVL92
 2437 0864 5D070000 		.4byte	0x75d
 2438 0868 00       		.byte	0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 69


 2439 0869 0A       		.uleb128 0xa
 2440 086a EE000000 		.4byte	.LASF73
 2441 086e 01       		.byte	0x1
 2442 086f 3E05     		.2byte	0x53e
 2443 0871 77000000 		.4byte	0x77
 2444 0875 00000000 		.4byte	.LFB37
 2445 0879 0C000000 		.4byte	.LFE37-.LFB37
 2446 087d 01       		.uleb128 0x1
 2447 087e 9C       		.byte	0x9c
 2448 087f 0A       		.uleb128 0xa
 2449 0880 7B050000 		.4byte	.LASF74
 2450 0884 01       		.byte	0x1
 2451 0885 5505     		.2byte	0x555
 2452 0887 77000000 		.4byte	0x77
 2453 088b 00000000 		.4byte	.LFB38
 2454 088f 0C000000 		.4byte	.LFE38-.LFB38
 2455 0893 01       		.uleb128 0x1
 2456 0894 9C       		.byte	0x9c
 2457 0895 06       		.uleb128 0x6
 2458 0896 2A050000 		.4byte	.LASF75
 2459 089a 01       		.byte	0x1
 2460 089b 6C05     		.2byte	0x56c
 2461 089d 00000000 		.4byte	.LFB39
 2462 08a1 0C000000 		.4byte	.LFE39-.LFB39
 2463 08a5 01       		.uleb128 0x1
 2464 08a6 9C       		.byte	0x9c
 2465 08a7 BA080000 		.4byte	0x8ba
 2466 08ab 0F       		.uleb128 0xf
 2467 08ac B8030000 		.4byte	.LASF70
 2468 08b0 01       		.byte	0x1
 2469 08b1 6C05     		.2byte	0x56c
 2470 08b3 77000000 		.4byte	0x77
 2471 08b7 01       		.uleb128 0x1
 2472 08b8 50       		.byte	0x50
 2473 08b9 00       		.byte	0
 2474 08ba 06       		.uleb128 0x6
 2475 08bb 0A030000 		.4byte	.LASF76
 2476 08bf 01       		.byte	0x1
 2477 08c0 8305     		.2byte	0x583
 2478 08c2 00000000 		.4byte	.LFB40
 2479 08c6 0C000000 		.4byte	.LFE40-.LFB40
 2480 08ca 01       		.uleb128 0x1
 2481 08cb 9C       		.byte	0x9c
 2482 08cc DF080000 		.4byte	0x8df
 2483 08d0 0F       		.uleb128 0xf
 2484 08d1 B8030000 		.4byte	.LASF70
 2485 08d5 01       		.byte	0x1
 2486 08d6 8305     		.2byte	0x583
 2487 08d8 77000000 		.4byte	0x77
 2488 08dc 01       		.uleb128 0x1
 2489 08dd 50       		.byte	0x50
 2490 08de 00       		.byte	0
 2491 08df 11       		.uleb128 0x11
 2492 08e0 D2000000 		.4byte	.LASF82
 2493 08e4 01       		.byte	0x1
 2494 08e5 15       		.byte	0x15
 2495 08e6 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 70


 2496 08ea 05       		.uleb128 0x5
 2497 08eb 03       		.byte	0x3
 2498 08ec 00000000 		.4byte	PWM_Volume_initVar
 2499 08f0 12       		.uleb128 0x12
 2500 08f1 61020000 		.4byte	.LASF77
 2501 08f5 61020000 		.4byte	.LASF77
 2502 08f9 03       		.byte	0x3
 2503 08fa E5       		.byte	0xe5
 2504 08fb 12       		.uleb128 0x12
 2505 08fc 38000000 		.4byte	.LASF78
 2506 0900 38000000 		.4byte	.LASF78
 2507 0904 03       		.byte	0x3
 2508 0905 E6       		.byte	0xe6
 2509 0906 00       		.byte	0
 2510              		.section	.debug_abbrev,"",%progbits
 2511              	.Ldebug_abbrev0:
 2512 0000 01       		.uleb128 0x1
 2513 0001 11       		.uleb128 0x11
 2514 0002 01       		.byte	0x1
 2515 0003 25       		.uleb128 0x25
 2516 0004 0E       		.uleb128 0xe
 2517 0005 13       		.uleb128 0x13
 2518 0006 0B       		.uleb128 0xb
 2519 0007 03       		.uleb128 0x3
 2520 0008 0E       		.uleb128 0xe
 2521 0009 1B       		.uleb128 0x1b
 2522 000a 0E       		.uleb128 0xe
 2523 000b 55       		.uleb128 0x55
 2524 000c 17       		.uleb128 0x17
 2525 000d 11       		.uleb128 0x11
 2526 000e 01       		.uleb128 0x1
 2527 000f 10       		.uleb128 0x10
 2528 0010 17       		.uleb128 0x17
 2529 0011 00       		.byte	0
 2530 0012 00       		.byte	0
 2531 0013 02       		.uleb128 0x2
 2532 0014 24       		.uleb128 0x24
 2533 0015 00       		.byte	0
 2534 0016 0B       		.uleb128 0xb
 2535 0017 0B       		.uleb128 0xb
 2536 0018 3E       		.uleb128 0x3e
 2537 0019 0B       		.uleb128 0xb
 2538 001a 03       		.uleb128 0x3
 2539 001b 0E       		.uleb128 0xe
 2540 001c 00       		.byte	0
 2541 001d 00       		.byte	0
 2542 001e 03       		.uleb128 0x3
 2543 001f 24       		.uleb128 0x24
 2544 0020 00       		.byte	0
 2545 0021 0B       		.uleb128 0xb
 2546 0022 0B       		.uleb128 0xb
 2547 0023 3E       		.uleb128 0x3e
 2548 0024 0B       		.uleb128 0xb
 2549 0025 03       		.uleb128 0x3
 2550 0026 08       		.uleb128 0x8
 2551 0027 00       		.byte	0
 2552 0028 00       		.byte	0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 71


 2553 0029 04       		.uleb128 0x4
 2554 002a 16       		.uleb128 0x16
 2555 002b 00       		.byte	0
 2556 002c 03       		.uleb128 0x3
 2557 002d 0E       		.uleb128 0xe
 2558 002e 3A       		.uleb128 0x3a
 2559 002f 0B       		.uleb128 0xb
 2560 0030 3B       		.uleb128 0x3b
 2561 0031 05       		.uleb128 0x5
 2562 0032 49       		.uleb128 0x49
 2563 0033 13       		.uleb128 0x13
 2564 0034 00       		.byte	0
 2565 0035 00       		.byte	0
 2566 0036 05       		.uleb128 0x5
 2567 0037 35       		.uleb128 0x35
 2568 0038 00       		.byte	0
 2569 0039 49       		.uleb128 0x49
 2570 003a 13       		.uleb128 0x13
 2571 003b 00       		.byte	0
 2572 003c 00       		.byte	0
 2573 003d 06       		.uleb128 0x6
 2574 003e 2E       		.uleb128 0x2e
 2575 003f 01       		.byte	0x1
 2576 0040 3F       		.uleb128 0x3f
 2577 0041 19       		.uleb128 0x19
 2578 0042 03       		.uleb128 0x3
 2579 0043 0E       		.uleb128 0xe
 2580 0044 3A       		.uleb128 0x3a
 2581 0045 0B       		.uleb128 0xb
 2582 0046 3B       		.uleb128 0x3b
 2583 0047 05       		.uleb128 0x5
 2584 0048 27       		.uleb128 0x27
 2585 0049 19       		.uleb128 0x19
 2586 004a 11       		.uleb128 0x11
 2587 004b 01       		.uleb128 0x1
 2588 004c 12       		.uleb128 0x12
 2589 004d 06       		.uleb128 0x6
 2590 004e 40       		.uleb128 0x40
 2591 004f 18       		.uleb128 0x18
 2592 0050 9742     		.uleb128 0x2117
 2593 0052 19       		.uleb128 0x19
 2594 0053 01       		.uleb128 0x1
 2595 0054 13       		.uleb128 0x13
 2596 0055 00       		.byte	0
 2597 0056 00       		.byte	0
 2598 0057 07       		.uleb128 0x7
 2599 0058 34       		.uleb128 0x34
 2600 0059 00       		.byte	0
 2601 005a 03       		.uleb128 0x3
 2602 005b 0E       		.uleb128 0xe
 2603 005c 3A       		.uleb128 0x3a
 2604 005d 0B       		.uleb128 0xb
 2605 005e 3B       		.uleb128 0x3b
 2606 005f 05       		.uleb128 0x5
 2607 0060 49       		.uleb128 0x49
 2608 0061 13       		.uleb128 0x13
 2609 0062 02       		.uleb128 0x2
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 72


 2610 0063 17       		.uleb128 0x17
 2611 0064 00       		.byte	0
 2612 0065 00       		.byte	0
 2613 0066 08       		.uleb128 0x8
 2614 0067 898201   		.uleb128 0x4109
 2615 006a 00       		.byte	0
 2616 006b 11       		.uleb128 0x11
 2617 006c 01       		.uleb128 0x1
 2618 006d 31       		.uleb128 0x31
 2619 006e 13       		.uleb128 0x13
 2620 006f 00       		.byte	0
 2621 0070 00       		.byte	0
 2622 0071 09       		.uleb128 0x9
 2623 0072 05       		.uleb128 0x5
 2624 0073 00       		.byte	0
 2625 0074 03       		.uleb128 0x3
 2626 0075 0E       		.uleb128 0xe
 2627 0076 3A       		.uleb128 0x3a
 2628 0077 0B       		.uleb128 0xb
 2629 0078 3B       		.uleb128 0x3b
 2630 0079 05       		.uleb128 0x5
 2631 007a 49       		.uleb128 0x49
 2632 007b 13       		.uleb128 0x13
 2633 007c 02       		.uleb128 0x2
 2634 007d 17       		.uleb128 0x17
 2635 007e 00       		.byte	0
 2636 007f 00       		.byte	0
 2637 0080 0A       		.uleb128 0xa
 2638 0081 2E       		.uleb128 0x2e
 2639 0082 00       		.byte	0
 2640 0083 3F       		.uleb128 0x3f
 2641 0084 19       		.uleb128 0x19
 2642 0085 03       		.uleb128 0x3
 2643 0086 0E       		.uleb128 0xe
 2644 0087 3A       		.uleb128 0x3a
 2645 0088 0B       		.uleb128 0xb
 2646 0089 3B       		.uleb128 0x3b
 2647 008a 05       		.uleb128 0x5
 2648 008b 27       		.uleb128 0x27
 2649 008c 19       		.uleb128 0x19
 2650 008d 49       		.uleb128 0x49
 2651 008e 13       		.uleb128 0x13
 2652 008f 11       		.uleb128 0x11
 2653 0090 01       		.uleb128 0x1
 2654 0091 12       		.uleb128 0x12
 2655 0092 06       		.uleb128 0x6
 2656 0093 40       		.uleb128 0x40
 2657 0094 18       		.uleb128 0x18
 2658 0095 9742     		.uleb128 0x2117
 2659 0097 19       		.uleb128 0x19
 2660 0098 00       		.byte	0
 2661 0099 00       		.byte	0
 2662 009a 0B       		.uleb128 0xb
 2663 009b 2E       		.uleb128 0x2e
 2664 009c 01       		.byte	0x1
 2665 009d 3F       		.uleb128 0x3f
 2666 009e 19       		.uleb128 0x19
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 73


 2667 009f 03       		.uleb128 0x3
 2668 00a0 0E       		.uleb128 0xe
 2669 00a1 3A       		.uleb128 0x3a
 2670 00a2 0B       		.uleb128 0xb
 2671 00a3 3B       		.uleb128 0x3b
 2672 00a4 0B       		.uleb128 0xb
 2673 00a5 27       		.uleb128 0x27
 2674 00a6 19       		.uleb128 0x19
 2675 00a7 11       		.uleb128 0x11
 2676 00a8 01       		.uleb128 0x1
 2677 00a9 12       		.uleb128 0x12
 2678 00aa 06       		.uleb128 0x6
 2679 00ab 40       		.uleb128 0x40
 2680 00ac 18       		.uleb128 0x18
 2681 00ad 9742     		.uleb128 0x2117
 2682 00af 19       		.uleb128 0x19
 2683 00b0 01       		.uleb128 0x1
 2684 00b1 13       		.uleb128 0x13
 2685 00b2 00       		.byte	0
 2686 00b3 00       		.byte	0
 2687 00b4 0C       		.uleb128 0xc
 2688 00b5 34       		.uleb128 0x34
 2689 00b6 00       		.byte	0
 2690 00b7 03       		.uleb128 0x3
 2691 00b8 0E       		.uleb128 0xe
 2692 00b9 3A       		.uleb128 0x3a
 2693 00ba 0B       		.uleb128 0xb
 2694 00bb 3B       		.uleb128 0x3b
 2695 00bc 0B       		.uleb128 0xb
 2696 00bd 49       		.uleb128 0x49
 2697 00be 13       		.uleb128 0x13
 2698 00bf 02       		.uleb128 0x2
 2699 00c0 17       		.uleb128 0x17
 2700 00c1 00       		.byte	0
 2701 00c2 00       		.byte	0
 2702 00c3 0D       		.uleb128 0xd
 2703 00c4 898201   		.uleb128 0x4109
 2704 00c7 01       		.byte	0x1
 2705 00c8 11       		.uleb128 0x11
 2706 00c9 01       		.uleb128 0x1
 2707 00ca 31       		.uleb128 0x31
 2708 00cb 13       		.uleb128 0x13
 2709 00cc 00       		.byte	0
 2710 00cd 00       		.byte	0
 2711 00ce 0E       		.uleb128 0xe
 2712 00cf 8A8201   		.uleb128 0x410a
 2713 00d2 00       		.byte	0
 2714 00d3 02       		.uleb128 0x2
 2715 00d4 18       		.uleb128 0x18
 2716 00d5 9142     		.uleb128 0x2111
 2717 00d7 18       		.uleb128 0x18
 2718 00d8 00       		.byte	0
 2719 00d9 00       		.byte	0
 2720 00da 0F       		.uleb128 0xf
 2721 00db 05       		.uleb128 0x5
 2722 00dc 00       		.byte	0
 2723 00dd 03       		.uleb128 0x3
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 74


 2724 00de 0E       		.uleb128 0xe
 2725 00df 3A       		.uleb128 0x3a
 2726 00e0 0B       		.uleb128 0xb
 2727 00e1 3B       		.uleb128 0x3b
 2728 00e2 05       		.uleb128 0x5
 2729 00e3 49       		.uleb128 0x49
 2730 00e4 13       		.uleb128 0x13
 2731 00e5 02       		.uleb128 0x2
 2732 00e6 18       		.uleb128 0x18
 2733 00e7 00       		.byte	0
 2734 00e8 00       		.byte	0
 2735 00e9 10       		.uleb128 0x10
 2736 00ea 898201   		.uleb128 0x4109
 2737 00ed 01       		.byte	0x1
 2738 00ee 11       		.uleb128 0x11
 2739 00ef 01       		.uleb128 0x1
 2740 00f0 31       		.uleb128 0x31
 2741 00f1 13       		.uleb128 0x13
 2742 00f2 01       		.uleb128 0x1
 2743 00f3 13       		.uleb128 0x13
 2744 00f4 00       		.byte	0
 2745 00f5 00       		.byte	0
 2746 00f6 11       		.uleb128 0x11
 2747 00f7 34       		.uleb128 0x34
 2748 00f8 00       		.byte	0
 2749 00f9 03       		.uleb128 0x3
 2750 00fa 0E       		.uleb128 0xe
 2751 00fb 3A       		.uleb128 0x3a
 2752 00fc 0B       		.uleb128 0xb
 2753 00fd 3B       		.uleb128 0x3b
 2754 00fe 0B       		.uleb128 0xb
 2755 00ff 49       		.uleb128 0x49
 2756 0100 13       		.uleb128 0x13
 2757 0101 3F       		.uleb128 0x3f
 2758 0102 19       		.uleb128 0x19
 2759 0103 02       		.uleb128 0x2
 2760 0104 18       		.uleb128 0x18
 2761 0105 00       		.byte	0
 2762 0106 00       		.byte	0
 2763 0107 12       		.uleb128 0x12
 2764 0108 2E       		.uleb128 0x2e
 2765 0109 00       		.byte	0
 2766 010a 3F       		.uleb128 0x3f
 2767 010b 19       		.uleb128 0x19
 2768 010c 3C       		.uleb128 0x3c
 2769 010d 19       		.uleb128 0x19
 2770 010e 6E       		.uleb128 0x6e
 2771 010f 0E       		.uleb128 0xe
 2772 0110 03       		.uleb128 0x3
 2773 0111 0E       		.uleb128 0xe
 2774 0112 3A       		.uleb128 0x3a
 2775 0113 0B       		.uleb128 0xb
 2776 0114 3B       		.uleb128 0x3b
 2777 0115 0B       		.uleb128 0xb
 2778 0116 00       		.byte	0
 2779 0117 00       		.byte	0
 2780 0118 00       		.byte	0
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 75


 2781              		.section	.debug_loc,"",%progbits
 2782              	.Ldebug_loc0:
 2783              	.LLST0:
 2784 0000 06000000 		.4byte	.LVL0
 2785 0004 13000000 		.4byte	.LVL1-1
 2786 0008 0100     		.2byte	0x1
 2787 000a 50       		.byte	0x50
 2788 000b 00000000 		.4byte	0
 2789 000f 00000000 		.4byte	0
 2790              	.LLST1:
 2791 0013 00000000 		.4byte	.LVL2
 2792 0017 07000000 		.4byte	.LVL3-1
 2793 001b 0100     		.2byte	0x1
 2794 001d 50       		.byte	0x50
 2795 001e 07000000 		.4byte	.LVL3-1
 2796 0022 16000000 		.4byte	.LVL4
 2797 0026 0100     		.2byte	0x1
 2798 0028 54       		.byte	0x54
 2799 0029 16000000 		.4byte	.LVL4
 2800 002d 28000000 		.4byte	.LFE5
 2801 0031 0400     		.2byte	0x4
 2802 0033 F3       		.byte	0xf3
 2803 0034 01       		.uleb128 0x1
 2804 0035 50       		.byte	0x50
 2805 0036 9F       		.byte	0x9f
 2806 0037 00000000 		.4byte	0
 2807 003b 00000000 		.4byte	0
 2808              	.LLST2:
 2809 003f 08000000 		.4byte	.LVL3
 2810 0043 1B000000 		.4byte	.LVL5-1
 2811 0047 0100     		.2byte	0x1
 2812 0049 50       		.byte	0x50
 2813 004a 00000000 		.4byte	0
 2814 004e 00000000 		.4byte	0
 2815              	.LLST3:
 2816 0052 00000000 		.4byte	.LVL6
 2817 0056 07000000 		.4byte	.LVL7-1
 2818 005a 0100     		.2byte	0x1
 2819 005c 50       		.byte	0x50
 2820 005d 07000000 		.4byte	.LVL7-1
 2821 0061 16000000 		.4byte	.LVL8
 2822 0065 0100     		.2byte	0x1
 2823 0067 54       		.byte	0x54
 2824 0068 16000000 		.4byte	.LVL8
 2825 006c 28000000 		.4byte	.LFE6
 2826 0070 0400     		.2byte	0x4
 2827 0072 F3       		.byte	0xf3
 2828 0073 01       		.uleb128 0x1
 2829 0074 50       		.byte	0x50
 2830 0075 9F       		.byte	0x9f
 2831 0076 00000000 		.4byte	0
 2832 007a 00000000 		.4byte	0
 2833              	.LLST4:
 2834 007e 08000000 		.4byte	.LVL7
 2835 0082 1B000000 		.4byte	.LVL9-1
 2836 0086 0100     		.2byte	0x1
 2837 0088 50       		.byte	0x50
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 76


 2838 0089 00000000 		.4byte	0
 2839 008d 00000000 		.4byte	0
 2840              	.LLST5:
 2841 0091 00000000 		.4byte	.LVL10
 2842 0095 07000000 		.4byte	.LVL11-1
 2843 0099 0100     		.2byte	0x1
 2844 009b 50       		.byte	0x50
 2845 009c 07000000 		.4byte	.LVL11-1
 2846 00a0 16000000 		.4byte	.LVL12
 2847 00a4 0100     		.2byte	0x1
 2848 00a6 54       		.byte	0x54
 2849 00a7 16000000 		.4byte	.LVL12
 2850 00ab 28000000 		.4byte	.LFE7
 2851 00af 0400     		.2byte	0x4
 2852 00b1 F3       		.byte	0xf3
 2853 00b2 01       		.uleb128 0x1
 2854 00b3 50       		.byte	0x50
 2855 00b4 9F       		.byte	0x9f
 2856 00b5 00000000 		.4byte	0
 2857 00b9 00000000 		.4byte	0
 2858              	.LLST6:
 2859 00bd 08000000 		.4byte	.LVL11
 2860 00c1 1B000000 		.4byte	.LVL13-1
 2861 00c5 0100     		.2byte	0x1
 2862 00c7 50       		.byte	0x50
 2863 00c8 00000000 		.4byte	0
 2864 00cc 00000000 		.4byte	0
 2865              	.LLST7:
 2866 00d0 00000000 		.4byte	.LVL14
 2867 00d4 07000000 		.4byte	.LVL15-1
 2868 00d8 0100     		.2byte	0x1
 2869 00da 50       		.byte	0x50
 2870 00db 07000000 		.4byte	.LVL15-1
 2871 00df 24000000 		.4byte	.LVL17
 2872 00e3 0100     		.2byte	0x1
 2873 00e5 54       		.byte	0x54
 2874 00e6 24000000 		.4byte	.LVL17
 2875 00ea 30000000 		.4byte	.LFE8
 2876 00ee 0400     		.2byte	0x4
 2877 00f0 F3       		.byte	0xf3
 2878 00f1 01       		.uleb128 0x1
 2879 00f2 50       		.byte	0x50
 2880 00f3 9F       		.byte	0x9f
 2881 00f4 00000000 		.4byte	0
 2882 00f8 00000000 		.4byte	0
 2883              	.LLST8:
 2884 00fc 08000000 		.4byte	.LVL15
 2885 0100 23000000 		.4byte	.LVL16-1
 2886 0104 0100     		.2byte	0x1
 2887 0106 50       		.byte	0x50
 2888 0107 00000000 		.4byte	0
 2889 010b 00000000 		.4byte	0
 2890              	.LLST9:
 2891 010f 00000000 		.4byte	.LVL18
 2892 0113 04000000 		.4byte	.LVL19
 2893 0117 0100     		.2byte	0x1
 2894 0119 50       		.byte	0x50
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 77


 2895 011a 04000000 		.4byte	.LVL19
 2896 011e 10000000 		.4byte	.LFE9
 2897 0122 0400     		.2byte	0x4
 2898 0124 F3       		.byte	0xf3
 2899 0125 01       		.uleb128 0x1
 2900 0126 50       		.byte	0x50
 2901 0127 9F       		.byte	0x9f
 2902 0128 00000000 		.4byte	0
 2903 012c 00000000 		.4byte	0
 2904              	.LLST10:
 2905 0130 00000000 		.4byte	.LVL20
 2906 0134 07000000 		.4byte	.LVL21-1
 2907 0138 0100     		.2byte	0x1
 2908 013a 50       		.byte	0x50
 2909 013b 07000000 		.4byte	.LVL21-1
 2910 013f 1A000000 		.4byte	.LVL22
 2911 0143 0100     		.2byte	0x1
 2912 0145 54       		.byte	0x54
 2913 0146 1A000000 		.4byte	.LVL22
 2914 014a 28000000 		.4byte	.LFE10
 2915 014e 0400     		.2byte	0x4
 2916 0150 F3       		.byte	0xf3
 2917 0151 01       		.uleb128 0x1
 2918 0152 50       		.byte	0x50
 2919 0153 9F       		.byte	0x9f
 2920 0154 00000000 		.4byte	0
 2921 0158 00000000 		.4byte	0
 2922              	.LLST11:
 2923 015c 08000000 		.4byte	.LVL21
 2924 0160 21000000 		.4byte	.LVL23-1
 2925 0164 0100     		.2byte	0x1
 2926 0166 50       		.byte	0x50
 2927 0167 00000000 		.4byte	0
 2928 016b 00000000 		.4byte	0
 2929              	.LLST12:
 2930 016f 00000000 		.4byte	.LVL24
 2931 0173 07000000 		.4byte	.LVL25-1
 2932 0177 0100     		.2byte	0x1
 2933 0179 50       		.byte	0x50
 2934 017a 07000000 		.4byte	.LVL25-1
 2935 017e 1A000000 		.4byte	.LVL26
 2936 0182 0100     		.2byte	0x1
 2937 0184 54       		.byte	0x54
 2938 0185 1A000000 		.4byte	.LVL26
 2939 0189 28000000 		.4byte	.LFE11
 2940 018d 0400     		.2byte	0x4
 2941 018f F3       		.byte	0xf3
 2942 0190 01       		.uleb128 0x1
 2943 0191 50       		.byte	0x50
 2944 0192 9F       		.byte	0x9f
 2945 0193 00000000 		.4byte	0
 2946 0197 00000000 		.4byte	0
 2947              	.LLST13:
 2948 019b 08000000 		.4byte	.LVL25
 2949 019f 21000000 		.4byte	.LVL27-1
 2950 01a3 0100     		.2byte	0x1
 2951 01a5 50       		.byte	0x50
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 78


 2952 01a6 00000000 		.4byte	0
 2953 01aa 00000000 		.4byte	0
 2954              	.LLST14:
 2955 01ae 00000000 		.4byte	.LVL28
 2956 01b2 07000000 		.4byte	.LVL29-1
 2957 01b6 0100     		.2byte	0x1
 2958 01b8 50       		.byte	0x50
 2959 01b9 07000000 		.4byte	.LVL29-1
 2960 01bd 16000000 		.4byte	.LVL30
 2961 01c1 0100     		.2byte	0x1
 2962 01c3 54       		.byte	0x54
 2963 01c4 16000000 		.4byte	.LVL30
 2964 01c8 2C000000 		.4byte	.LFE12
 2965 01cc 0400     		.2byte	0x4
 2966 01ce F3       		.byte	0xf3
 2967 01cf 01       		.uleb128 0x1
 2968 01d0 50       		.byte	0x50
 2969 01d1 9F       		.byte	0x9f
 2970 01d2 00000000 		.4byte	0
 2971 01d6 00000000 		.4byte	0
 2972              	.LLST15:
 2973 01da 08000000 		.4byte	.LVL29
 2974 01de 1F000000 		.4byte	.LVL31-1
 2975 01e2 0100     		.2byte	0x1
 2976 01e4 50       		.byte	0x50
 2977 01e5 00000000 		.4byte	0
 2978 01e9 00000000 		.4byte	0
 2979              	.LLST16:
 2980 01ed 00000000 		.4byte	.LVL32
 2981 01f1 07000000 		.4byte	.LVL33-1
 2982 01f5 0100     		.2byte	0x1
 2983 01f7 50       		.byte	0x50
 2984 01f8 07000000 		.4byte	.LVL33-1
 2985 01fc 16000000 		.4byte	.LVL34
 2986 0200 0100     		.2byte	0x1
 2987 0202 54       		.byte	0x54
 2988 0203 16000000 		.4byte	.LVL34
 2989 0207 28000000 		.4byte	.LFE13
 2990 020b 0400     		.2byte	0x4
 2991 020d F3       		.byte	0xf3
 2992 020e 01       		.uleb128 0x1
 2993 020f 50       		.byte	0x50
 2994 0210 9F       		.byte	0x9f
 2995 0211 00000000 		.4byte	0
 2996 0215 00000000 		.4byte	0
 2997              	.LLST17:
 2998 0219 08000000 		.4byte	.LVL33
 2999 021d 1B000000 		.4byte	.LVL35-1
 3000 0221 0100     		.2byte	0x1
 3001 0223 50       		.byte	0x50
 3002 0224 00000000 		.4byte	0
 3003 0228 00000000 		.4byte	0
 3004              	.LLST18:
 3005 022c 00000000 		.4byte	.LVL36
 3006 0230 02000000 		.4byte	.LVL37
 3007 0234 0100     		.2byte	0x1
 3008 0236 50       		.byte	0x50
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 79


 3009 0237 02000000 		.4byte	.LVL37
 3010 023b 10000000 		.4byte	.LFE14
 3011 023f 0400     		.2byte	0x4
 3012 0241 F3       		.byte	0xf3
 3013 0242 01       		.uleb128 0x1
 3014 0243 50       		.byte	0x50
 3015 0244 9F       		.byte	0x9f
 3016 0245 00000000 		.4byte	0
 3017 0249 00000000 		.4byte	0
 3018              	.LLST19:
 3019 024d 00000000 		.4byte	.LVL38
 3020 0251 07000000 		.4byte	.LVL39-1
 3021 0255 0100     		.2byte	0x1
 3022 0257 50       		.byte	0x50
 3023 0258 07000000 		.4byte	.LVL39-1
 3024 025c 16000000 		.4byte	.LVL40
 3025 0260 0100     		.2byte	0x1
 3026 0262 54       		.byte	0x54
 3027 0263 16000000 		.4byte	.LVL40
 3028 0267 28000000 		.4byte	.LFE16
 3029 026b 0400     		.2byte	0x4
 3030 026d F3       		.byte	0xf3
 3031 026e 01       		.uleb128 0x1
 3032 026f 50       		.byte	0x50
 3033 0270 9F       		.byte	0x9f
 3034 0271 00000000 		.4byte	0
 3035 0275 00000000 		.4byte	0
 3036              	.LLST20:
 3037 0279 08000000 		.4byte	.LVL39
 3038 027d 1B000000 		.4byte	.LVL41-1
 3039 0281 0100     		.2byte	0x1
 3040 0283 50       		.byte	0x50
 3041 0284 00000000 		.4byte	0
 3042 0288 00000000 		.4byte	0
 3043              	.LLST21:
 3044 028c 00000000 		.4byte	.LVL42
 3045 0290 02000000 		.4byte	.LVL43
 3046 0294 0100     		.2byte	0x1
 3047 0296 50       		.byte	0x50
 3048 0297 02000000 		.4byte	.LVL43
 3049 029b 10000000 		.4byte	.LFE17
 3050 029f 0400     		.2byte	0x4
 3051 02a1 F3       		.byte	0xf3
 3052 02a2 01       		.uleb128 0x1
 3053 02a3 50       		.byte	0x50
 3054 02a4 9F       		.byte	0x9f
 3055 02a5 00000000 		.4byte	0
 3056 02a9 00000000 		.4byte	0
 3057              	.LLST22:
 3058 02ad 00000000 		.4byte	.LVL44
 3059 02b1 07000000 		.4byte	.LVL45-1
 3060 02b5 0100     		.2byte	0x1
 3061 02b7 50       		.byte	0x50
 3062 02b8 07000000 		.4byte	.LVL45-1
 3063 02bc 16000000 		.4byte	.LVL46
 3064 02c0 0100     		.2byte	0x1
 3065 02c2 54       		.byte	0x54
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 80


 3066 02c3 16000000 		.4byte	.LVL46
 3067 02c7 24000000 		.4byte	.LFE19
 3068 02cb 0400     		.2byte	0x4
 3069 02cd F3       		.byte	0xf3
 3070 02ce 01       		.uleb128 0x1
 3071 02cf 50       		.byte	0x50
 3072 02d0 9F       		.byte	0x9f
 3073 02d1 00000000 		.4byte	0
 3074 02d5 00000000 		.4byte	0
 3075              	.LLST23:
 3076 02d9 08000000 		.4byte	.LVL45
 3077 02dd 1D000000 		.4byte	.LVL47-1
 3078 02e1 0100     		.2byte	0x1
 3079 02e3 50       		.byte	0x50
 3080 02e4 00000000 		.4byte	0
 3081 02e8 00000000 		.4byte	0
 3082              	.LLST24:
 3083 02ec 00000000 		.4byte	.LVL48
 3084 02f0 02000000 		.4byte	.LVL49
 3085 02f4 0100     		.2byte	0x1
 3086 02f6 50       		.byte	0x50
 3087 02f7 02000000 		.4byte	.LVL49
 3088 02fb 10000000 		.4byte	.LFE20
 3089 02ff 0400     		.2byte	0x4
 3090 0301 F3       		.byte	0xf3
 3091 0302 01       		.uleb128 0x1
 3092 0303 50       		.byte	0x50
 3093 0304 9F       		.byte	0x9f
 3094 0305 00000000 		.4byte	0
 3095 0309 00000000 		.4byte	0
 3096              	.LLST25:
 3097 030d 00000000 		.4byte	.LVL50
 3098 0311 07000000 		.4byte	.LVL51-1
 3099 0315 0100     		.2byte	0x1
 3100 0317 50       		.byte	0x50
 3101 0318 07000000 		.4byte	.LVL51-1
 3102 031c 1A000000 		.4byte	.LVL52
 3103 0320 0100     		.2byte	0x1
 3104 0322 54       		.byte	0x54
 3105 0323 1A000000 		.4byte	.LVL52
 3106 0327 28000000 		.4byte	.LFE22
 3107 032b 0400     		.2byte	0x4
 3108 032d F3       		.byte	0xf3
 3109 032e 01       		.uleb128 0x1
 3110 032f 50       		.byte	0x50
 3111 0330 9F       		.byte	0x9f
 3112 0331 00000000 		.4byte	0
 3113 0335 00000000 		.4byte	0
 3114              	.LLST26:
 3115 0339 08000000 		.4byte	.LVL51
 3116 033d 21000000 		.4byte	.LVL53-1
 3117 0341 0100     		.2byte	0x1
 3118 0343 50       		.byte	0x50
 3119 0344 00000000 		.4byte	0
 3120 0348 00000000 		.4byte	0
 3121              	.LLST27:
 3122 034c 00000000 		.4byte	.LVL54
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 81


 3123 0350 02000000 		.4byte	.LVL55
 3124 0354 0100     		.2byte	0x1
 3125 0356 50       		.byte	0x50
 3126 0357 02000000 		.4byte	.LVL55
 3127 035b 10000000 		.4byte	.LFE23
 3128 035f 0400     		.2byte	0x4
 3129 0361 F3       		.byte	0xf3
 3130 0362 01       		.uleb128 0x1
 3131 0363 50       		.byte	0x50
 3132 0364 9F       		.byte	0x9f
 3133 0365 00000000 		.4byte	0
 3134 0369 00000000 		.4byte	0
 3135              	.LLST28:
 3136 036d 00000000 		.4byte	.LVL56
 3137 0371 02000000 		.4byte	.LVL57
 3138 0375 0100     		.2byte	0x1
 3139 0377 50       		.byte	0x50
 3140 0378 02000000 		.4byte	.LVL57
 3141 037c 10000000 		.4byte	.LFE25
 3142 0380 0400     		.2byte	0x4
 3143 0382 F3       		.byte	0xf3
 3144 0383 01       		.uleb128 0x1
 3145 0384 50       		.byte	0x50
 3146 0385 9F       		.byte	0x9f
 3147 0386 00000000 		.4byte	0
 3148 038a 00000000 		.4byte	0
 3149              	.LLST29:
 3150 038e 00000000 		.4byte	.LVL58
 3151 0392 07000000 		.4byte	.LVL59-1
 3152 0396 0100     		.2byte	0x1
 3153 0398 50       		.byte	0x50
 3154 0399 07000000 		.4byte	.LVL59-1
 3155 039d 16000000 		.4byte	.LVL60
 3156 03a1 0100     		.2byte	0x1
 3157 03a3 54       		.byte	0x54
 3158 03a4 16000000 		.4byte	.LVL60
 3159 03a8 24000000 		.4byte	.LFE29
 3160 03ac 0400     		.2byte	0x4
 3161 03ae F3       		.byte	0xf3
 3162 03af 01       		.uleb128 0x1
 3163 03b0 50       		.byte	0x50
 3164 03b1 9F       		.byte	0x9f
 3165 03b2 00000000 		.4byte	0
 3166 03b6 00000000 		.4byte	0
 3167              	.LLST30:
 3168 03ba 08000000 		.4byte	.LVL59
 3169 03be 1B000000 		.4byte	.LVL61-1
 3170 03c2 0100     		.2byte	0x1
 3171 03c4 50       		.byte	0x50
 3172 03c5 00000000 		.4byte	0
 3173 03c9 00000000 		.4byte	0
 3174              	.LLST31:
 3175 03cd 00000000 		.4byte	.LVL62
 3176 03d1 07000000 		.4byte	.LVL63-1
 3177 03d5 0100     		.2byte	0x1
 3178 03d7 50       		.byte	0x50
 3179 03d8 07000000 		.4byte	.LVL63-1
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 82


 3180 03dc 16000000 		.4byte	.LVL64
 3181 03e0 0100     		.2byte	0x1
 3182 03e2 54       		.byte	0x54
 3183 03e3 16000000 		.4byte	.LVL64
 3184 03e7 24000000 		.4byte	.LFE30
 3185 03eb 0400     		.2byte	0x4
 3186 03ed F3       		.byte	0xf3
 3187 03ee 01       		.uleb128 0x1
 3188 03ef 50       		.byte	0x50
 3189 03f0 9F       		.byte	0x9f
 3190 03f1 00000000 		.4byte	0
 3191 03f5 00000000 		.4byte	0
 3192              	.LLST32:
 3193 03f9 08000000 		.4byte	.LVL63
 3194 03fd 1D000000 		.4byte	.LVL65-1
 3195 0401 0100     		.2byte	0x1
 3196 0403 50       		.byte	0x50
 3197 0404 00000000 		.4byte	0
 3198 0408 00000000 		.4byte	0
 3199              	.LLST33:
 3200 040c 00000000 		.4byte	.LVL66
 3201 0410 07000000 		.4byte	.LVL67-1
 3202 0414 0100     		.2byte	0x1
 3203 0416 50       		.byte	0x50
 3204 0417 07000000 		.4byte	.LVL67-1
 3205 041b 16000000 		.4byte	.LVL68
 3206 041f 0100     		.2byte	0x1
 3207 0421 54       		.byte	0x54
 3208 0422 16000000 		.4byte	.LVL68
 3209 0426 28000000 		.4byte	.LFE31
 3210 042a 0400     		.2byte	0x4
 3211 042c F3       		.byte	0xf3
 3212 042d 01       		.uleb128 0x1
 3213 042e 50       		.byte	0x50
 3214 042f 9F       		.byte	0x9f
 3215 0430 00000000 		.4byte	0
 3216 0434 00000000 		.4byte	0
 3217              	.LLST34:
 3218 0438 08000000 		.4byte	.LVL67
 3219 043c 1D000000 		.4byte	.LVL69-1
 3220 0440 0100     		.2byte	0x1
 3221 0442 50       		.byte	0x50
 3222 0443 00000000 		.4byte	0
 3223 0447 00000000 		.4byte	0
 3224              	.LLST35:
 3225 044b 00000000 		.4byte	.LVL70
 3226 044f 07000000 		.4byte	.LVL71-1
 3227 0453 0100     		.2byte	0x1
 3228 0455 50       		.byte	0x50
 3229 0456 07000000 		.4byte	.LVL71-1
 3230 045a 16000000 		.4byte	.LVL72
 3231 045e 0100     		.2byte	0x1
 3232 0460 54       		.byte	0x54
 3233 0461 16000000 		.4byte	.LVL72
 3234 0465 24000000 		.4byte	.LFE32
 3235 0469 0400     		.2byte	0x4
 3236 046b F3       		.byte	0xf3
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 83


 3237 046c 01       		.uleb128 0x1
 3238 046d 50       		.byte	0x50
 3239 046e 9F       		.byte	0x9f
 3240 046f 00000000 		.4byte	0
 3241 0473 00000000 		.4byte	0
 3242              	.LLST36:
 3243 0477 08000000 		.4byte	.LVL71
 3244 047b 1D000000 		.4byte	.LVL73-1
 3245 047f 0100     		.2byte	0x1
 3246 0481 50       		.byte	0x50
 3247 0482 00000000 		.4byte	0
 3248 0486 00000000 		.4byte	0
 3249              	.LLST37:
 3250 048a 00000000 		.4byte	.LVL74
 3251 048e 07000000 		.4byte	.LVL75-1
 3252 0492 0100     		.2byte	0x1
 3253 0494 50       		.byte	0x50
 3254 0495 07000000 		.4byte	.LVL75-1
 3255 0499 16000000 		.4byte	.LVL76
 3256 049d 0100     		.2byte	0x1
 3257 049f 54       		.byte	0x54
 3258 04a0 16000000 		.4byte	.LVL76
 3259 04a4 24000000 		.4byte	.LFE33
 3260 04a8 0400     		.2byte	0x4
 3261 04aa F3       		.byte	0xf3
 3262 04ab 01       		.uleb128 0x1
 3263 04ac 50       		.byte	0x50
 3264 04ad 9F       		.byte	0x9f
 3265 04ae 00000000 		.4byte	0
 3266 04b2 00000000 		.4byte	0
 3267              	.LLST38:
 3268 04b6 08000000 		.4byte	.LVL75
 3269 04ba 1D000000 		.4byte	.LVL77-1
 3270 04be 0100     		.2byte	0x1
 3271 04c0 50       		.byte	0x50
 3272 04c1 00000000 		.4byte	0
 3273 04c5 00000000 		.4byte	0
 3274              	.LLST39:
 3275 04c9 00000000 		.4byte	.LVL78
 3276 04cd 09000000 		.4byte	.LVL79-1
 3277 04d1 0100     		.2byte	0x1
 3278 04d3 50       		.byte	0x50
 3279 04d4 09000000 		.4byte	.LVL79-1
 3280 04d8 0C000000 		.4byte	.LVL80
 3281 04dc 0100     		.2byte	0x1
 3282 04de 54       		.byte	0x54
 3283 04df 0C000000 		.4byte	.LVL80
 3284 04e3 1C000000 		.4byte	.LFE34
 3285 04e7 0400     		.2byte	0x4
 3286 04e9 F3       		.byte	0xf3
 3287 04ea 01       		.uleb128 0x1
 3288 04eb 50       		.byte	0x50
 3289 04ec 9F       		.byte	0x9f
 3290 04ed 00000000 		.4byte	0
 3291 04f1 00000000 		.4byte	0
 3292              	.LLST40:
 3293 04f5 00000000 		.4byte	.LVL78
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 84


 3294 04f9 09000000 		.4byte	.LVL79-1
 3295 04fd 0100     		.2byte	0x1
 3296 04ff 51       		.byte	0x51
 3297 0500 09000000 		.4byte	.LVL79-1
 3298 0504 14000000 		.4byte	.LVL82
 3299 0508 0100     		.2byte	0x1
 3300 050a 55       		.byte	0x55
 3301 050b 14000000 		.4byte	.LVL82
 3302 050f 1C000000 		.4byte	.LFE34
 3303 0513 0400     		.2byte	0x4
 3304 0515 F3       		.byte	0xf3
 3305 0516 01       		.uleb128 0x1
 3306 0517 51       		.byte	0x51
 3307 0518 9F       		.byte	0x9f
 3308 0519 00000000 		.4byte	0
 3309 051d 00000000 		.4byte	0
 3310              	.LLST41:
 3311 0521 0A000000 		.4byte	.LVL79
 3312 0525 13000000 		.4byte	.LVL81-1
 3313 0529 0100     		.2byte	0x1
 3314 052b 50       		.byte	0x50
 3315 052c 00000000 		.4byte	0
 3316 0530 00000000 		.4byte	0
 3317              	.LLST42:
 3318 0534 06000000 		.4byte	.LVL83
 3319 0538 13000000 		.4byte	.LVL84-1
 3320 053c 0100     		.2byte	0x1
 3321 053e 50       		.byte	0x50
 3322 053f 00000000 		.4byte	0
 3323 0543 00000000 		.4byte	0
 3324              		.section	.debug_aranges,"",%progbits
 3325 0000 54010000 		.4byte	0x154
 3326 0004 0200     		.2byte	0x2
 3327 0006 00000000 		.4byte	.Ldebug_info0
 3328 000a 04       		.byte	0x4
 3329 000b 00       		.byte	0
 3330 000c 0000     		.2byte	0
 3331 000e 0000     		.2byte	0
 3332 0010 00000000 		.4byte	.LFB4
 3333 0014 1C000000 		.4byte	.LFE4-.LFB4
 3334 0018 00000000 		.4byte	.LFB5
 3335 001c 28000000 		.4byte	.LFE5-.LFB5
 3336 0020 00000000 		.4byte	.LFB6
 3337 0024 28000000 		.4byte	.LFE6-.LFB6
 3338 0028 00000000 		.4byte	.LFB7
 3339 002c 28000000 		.4byte	.LFE7-.LFB7
 3340 0030 00000000 		.4byte	.LFB8
 3341 0034 30000000 		.4byte	.LFE8-.LFB8
 3342 0038 00000000 		.4byte	.LFB9
 3343 003c 10000000 		.4byte	.LFE9-.LFB9
 3344 0040 00000000 		.4byte	.LFB10
 3345 0044 28000000 		.4byte	.LFE10-.LFB10
 3346 0048 00000000 		.4byte	.LFB11
 3347 004c 28000000 		.4byte	.LFE11-.LFB11
 3348 0050 00000000 		.4byte	.LFB12
 3349 0054 2C000000 		.4byte	.LFE12-.LFB12
 3350 0058 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 85


 3351 005c 28000000 		.4byte	.LFE13-.LFB13
 3352 0060 00000000 		.4byte	.LFB14
 3353 0064 10000000 		.4byte	.LFE14-.LFB14
 3354 0068 00000000 		.4byte	.LFB15
 3355 006c 10000000 		.4byte	.LFE15-.LFB15
 3356 0070 00000000 		.4byte	.LFB16
 3357 0074 28000000 		.4byte	.LFE16-.LFB16
 3358 0078 00000000 		.4byte	.LFB17
 3359 007c 10000000 		.4byte	.LFE17-.LFB17
 3360 0080 00000000 		.4byte	.LFB18
 3361 0084 10000000 		.4byte	.LFE18-.LFB18
 3362 0088 00000000 		.4byte	.LFB19
 3363 008c 24000000 		.4byte	.LFE19-.LFB19
 3364 0090 00000000 		.4byte	.LFB20
 3365 0094 10000000 		.4byte	.LFE20-.LFB20
 3366 0098 00000000 		.4byte	.LFB21
 3367 009c 10000000 		.4byte	.LFE21-.LFB21
 3368 00a0 00000000 		.4byte	.LFB22
 3369 00a4 28000000 		.4byte	.LFE22-.LFB22
 3370 00a8 00000000 		.4byte	.LFB23
 3371 00ac 10000000 		.4byte	.LFE23-.LFB23
 3372 00b0 00000000 		.4byte	.LFB24
 3373 00b4 10000000 		.4byte	.LFE24-.LFB24
 3374 00b8 00000000 		.4byte	.LFB25
 3375 00bc 10000000 		.4byte	.LFE25-.LFB25
 3376 00c0 00000000 		.4byte	.LFB26
 3377 00c4 10000000 		.4byte	.LFE26-.LFB26
 3378 00c8 00000000 		.4byte	.LFB27
 3379 00cc 10000000 		.4byte	.LFE27-.LFB27
 3380 00d0 00000000 		.4byte	.LFB28
 3381 00d4 10000000 		.4byte	.LFE28-.LFB28
 3382 00d8 00000000 		.4byte	.LFB29
 3383 00dc 24000000 		.4byte	.LFE29-.LFB29
 3384 00e0 00000000 		.4byte	.LFB30
 3385 00e4 24000000 		.4byte	.LFE30-.LFB30
 3386 00e8 00000000 		.4byte	.LFB31
 3387 00ec 28000000 		.4byte	.LFE31-.LFB31
 3388 00f0 00000000 		.4byte	.LFB32
 3389 00f4 24000000 		.4byte	.LFE32-.LFB32
 3390 00f8 00000000 		.4byte	.LFB33
 3391 00fc 24000000 		.4byte	.LFE33-.LFB33
 3392 0100 00000000 		.4byte	.LFB34
 3393 0104 1C000000 		.4byte	.LFE34-.LFB34
 3394 0108 00000000 		.4byte	.LFB2
 3395 010c 24000000 		.4byte	.LFE2-.LFB2
 3396 0110 00000000 		.4byte	.LFB35
 3397 0114 14000000 		.4byte	.LFE35-.LFB35
 3398 0118 00000000 		.4byte	.LFB36
 3399 011c 0C000000 		.4byte	.LFE36-.LFB36
 3400 0120 00000000 		.4byte	.LFB1
 3401 0124 44000000 		.4byte	.LFE1-.LFB1
 3402 0128 00000000 		.4byte	.LFB3
 3403 012c 20000000 		.4byte	.LFE3-.LFB3
 3404 0130 00000000 		.4byte	.LFB37
 3405 0134 0C000000 		.4byte	.LFE37-.LFB37
 3406 0138 00000000 		.4byte	.LFB38
 3407 013c 0C000000 		.4byte	.LFE38-.LFB38
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 86


 3408 0140 00000000 		.4byte	.LFB39
 3409 0144 0C000000 		.4byte	.LFE39-.LFB39
 3410 0148 00000000 		.4byte	.LFB40
 3411 014c 0C000000 		.4byte	.LFE40-.LFB40
 3412 0150 00000000 		.4byte	0
 3413 0154 00000000 		.4byte	0
 3414              		.section	.debug_ranges,"",%progbits
 3415              	.Ldebug_ranges0:
 3416 0000 00000000 		.4byte	.LFB4
 3417 0004 1C000000 		.4byte	.LFE4
 3418 0008 00000000 		.4byte	.LFB5
 3419 000c 28000000 		.4byte	.LFE5
 3420 0010 00000000 		.4byte	.LFB6
 3421 0014 28000000 		.4byte	.LFE6
 3422 0018 00000000 		.4byte	.LFB7
 3423 001c 28000000 		.4byte	.LFE7
 3424 0020 00000000 		.4byte	.LFB8
 3425 0024 30000000 		.4byte	.LFE8
 3426 0028 00000000 		.4byte	.LFB9
 3427 002c 10000000 		.4byte	.LFE9
 3428 0030 00000000 		.4byte	.LFB10
 3429 0034 28000000 		.4byte	.LFE10
 3430 0038 00000000 		.4byte	.LFB11
 3431 003c 28000000 		.4byte	.LFE11
 3432 0040 00000000 		.4byte	.LFB12
 3433 0044 2C000000 		.4byte	.LFE12
 3434 0048 00000000 		.4byte	.LFB13
 3435 004c 28000000 		.4byte	.LFE13
 3436 0050 00000000 		.4byte	.LFB14
 3437 0054 10000000 		.4byte	.LFE14
 3438 0058 00000000 		.4byte	.LFB15
 3439 005c 10000000 		.4byte	.LFE15
 3440 0060 00000000 		.4byte	.LFB16
 3441 0064 28000000 		.4byte	.LFE16
 3442 0068 00000000 		.4byte	.LFB17
 3443 006c 10000000 		.4byte	.LFE17
 3444 0070 00000000 		.4byte	.LFB18
 3445 0074 10000000 		.4byte	.LFE18
 3446 0078 00000000 		.4byte	.LFB19
 3447 007c 24000000 		.4byte	.LFE19
 3448 0080 00000000 		.4byte	.LFB20
 3449 0084 10000000 		.4byte	.LFE20
 3450 0088 00000000 		.4byte	.LFB21
 3451 008c 10000000 		.4byte	.LFE21
 3452 0090 00000000 		.4byte	.LFB22
 3453 0094 28000000 		.4byte	.LFE22
 3454 0098 00000000 		.4byte	.LFB23
 3455 009c 10000000 		.4byte	.LFE23
 3456 00a0 00000000 		.4byte	.LFB24
 3457 00a4 10000000 		.4byte	.LFE24
 3458 00a8 00000000 		.4byte	.LFB25
 3459 00ac 10000000 		.4byte	.LFE25
 3460 00b0 00000000 		.4byte	.LFB26
 3461 00b4 10000000 		.4byte	.LFE26
 3462 00b8 00000000 		.4byte	.LFB27
 3463 00bc 10000000 		.4byte	.LFE27
 3464 00c0 00000000 		.4byte	.LFB28
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 87


 3465 00c4 10000000 		.4byte	.LFE28
 3466 00c8 00000000 		.4byte	.LFB29
 3467 00cc 24000000 		.4byte	.LFE29
 3468 00d0 00000000 		.4byte	.LFB30
 3469 00d4 24000000 		.4byte	.LFE30
 3470 00d8 00000000 		.4byte	.LFB31
 3471 00dc 28000000 		.4byte	.LFE31
 3472 00e0 00000000 		.4byte	.LFB32
 3473 00e4 24000000 		.4byte	.LFE32
 3474 00e8 00000000 		.4byte	.LFB33
 3475 00ec 24000000 		.4byte	.LFE33
 3476 00f0 00000000 		.4byte	.LFB34
 3477 00f4 1C000000 		.4byte	.LFE34
 3478 00f8 00000000 		.4byte	.LFB2
 3479 00fc 24000000 		.4byte	.LFE2
 3480 0100 00000000 		.4byte	.LFB35
 3481 0104 14000000 		.4byte	.LFE35
 3482 0108 00000000 		.4byte	.LFB36
 3483 010c 0C000000 		.4byte	.LFE36
 3484 0110 00000000 		.4byte	.LFB1
 3485 0114 44000000 		.4byte	.LFE1
 3486 0118 00000000 		.4byte	.LFB3
 3487 011c 20000000 		.4byte	.LFE3
 3488 0120 00000000 		.4byte	.LFB37
 3489 0124 0C000000 		.4byte	.LFE37
 3490 0128 00000000 		.4byte	.LFB38
 3491 012c 0C000000 		.4byte	.LFE38
 3492 0130 00000000 		.4byte	.LFB39
 3493 0134 0C000000 		.4byte	.LFE39
 3494 0138 00000000 		.4byte	.LFB40
 3495 013c 0C000000 		.4byte	.LFE40
 3496 0140 00000000 		.4byte	0
 3497 0144 00000000 		.4byte	0
 3498              		.section	.debug_line,"",%progbits
 3499              	.Ldebug_line0:
 3500 0000 7F030000 		.section	.debug_str,"MS",%progbits,1
 3500      02005200 
 3500      00000201 
 3500      FB0E0D00 
 3500      01010101 
 3501              	.LASF38:
 3502 0000 636F756E 		.ascii	"count\000"
 3502      7400
 3503              	.LASF44:
 3504 0006 50574D5F 		.ascii	"PWM_Volume_ReadPeriod\000"
 3504      566F6C75 
 3504      6D655F52 
 3504      65616450 
 3504      6572696F 
 3505              	.LASF69:
 3506 001c 50574D5F 		.ascii	"PWM_Volume_SetInterruptMode\000"
 3506      566F6C75 
 3506      6D655F53 
 3506      6574496E 
 3506      74657272 
 3507              	.LASF78:
 3508 0038 43794578 		.ascii	"CyExitCriticalSection\000"
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 88


 3508      69744372 
 3508      69746963 
 3508      616C5365 
 3508      6374696F 
 3509              	.LASF35:
 3510 004e 50574D5F 		.ascii	"PWM_Volume_SetPWMInvert\000"
 3510      566F6C75 
 3510      6D655F53 
 3510      65745057 
 3510      4D496E76 
 3511              	.LASF42:
 3512 0066 70657269 		.ascii	"period\000"
 3512      6F6400
 3513              	.LASF7:
 3514 006d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3514      206C6F6E 
 3514      6720756E 
 3514      7369676E 
 3514      65642069 
 3515              	.LASF22:
 3516 0084 71644D6F 		.ascii	"qdMode\000"
 3516      646500
 3517              	.LASF57:
 3518 008b 50574D5F 		.ascii	"PWM_Volume_ReadCapture\000"
 3518      566F6C75 
 3518      6D655F52 
 3518      65616443 
 3518      61707475 
 3519              	.LASF6:
 3520 00a2 6C6F6E67 		.ascii	"long long int\000"
 3520      206C6F6E 
 3520      6720696E 
 3520      7400
 3521              	.LASF0:
 3522 00b0 7369676E 		.ascii	"signed char\000"
 3522      65642063 
 3522      68617200 
 3523              	.LASF27:
 3524 00bc 50574D5F 		.ascii	"PWM_Volume_SetPWMMode\000"
 3524      566F6C75 
 3524      6D655F53 
 3524      65745057 
 3524      4D4D6F64 
 3525              	.LASF82:
 3526 00d2 50574D5F 		.ascii	"PWM_Volume_initVar\000"
 3526      566F6C75 
 3526      6D655F69 
 3526      6E697456 
 3526      617200
 3527              	.LASF4:
 3528 00e5 6C6F6E67 		.ascii	"long int\000"
 3528      20696E74 
 3528      00
 3529              	.LASF73:
 3530 00ee 50574D5F 		.ascii	"PWM_Volume_GetInterruptSourceMasked\000"
 3530      566F6C75 
 3530      6D655F47 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 89


 3530      6574496E 
 3530      74657272 
 3531              	.LASF53:
 3532 0112 50574D5F 		.ascii	"PWM_Volume_ReadCompare\000"
 3532      566F6C75 
 3532      6D655F52 
 3532      65616443 
 3532      6F6D7061 
 3533              	.LASF23:
 3534 0129 50574D5F 		.ascii	"PWM_Volume_SetPrescaler\000"
 3534      566F6C75 
 3534      6D655F53 
 3534      65745072 
 3534      65736361 
 3535              	.LASF9:
 3536 0141 75696E74 		.ascii	"uint8\000"
 3536      3800
 3537              	.LASF80:
 3538 0147 47656E65 		.ascii	"Generated_Source\\PSoC4\\PWM_Volume.c\000"
 3538      72617465 
 3538      645F536F 
 3538      75726365 
 3538      5C50536F 
 3539              	.LASF12:
 3540 016b 646F7562 		.ascii	"double\000"
 3540      6C6500
 3541              	.LASF81:
 3542 0172 433A5C47 		.ascii	"C:\\GEA_Cypress_proj\\NGFL\\Tuning_SW\\_old\\NGFLUI"
 3542      45415F43 
 3542      79707265 
 3542      73735F70 
 3542      726F6A5C 
 3543 01a0 2E637977 		.ascii	".cywrk.Archive01\\NGFLUI\\NGFLUI_Vikram.cydsn\000"
 3543      726B2E41 
 3543      72636869 
 3543      76653031 
 3543      5C4E4746 
 3544              	.LASF10:
 3545 01cc 75696E74 		.ascii	"uint32\000"
 3545      333200
 3546              	.LASF60:
 3547 01d3 74726967 		.ascii	"triggerMode\000"
 3547      6765724D 
 3547      6F646500 
 3548              	.LASF36:
 3549 01df 6D61736B 		.ascii	"mask\000"
 3549      00
 3550              	.LASF34:
 3551 01e4 64656164 		.ascii	"deadTime\000"
 3551      54696D65 
 3551      00
 3552              	.LASF39:
 3553 01ed 50574D5F 		.ascii	"PWM_Volume_SetCounterMode\000"
 3553      566F6C75 
 3553      6D655F53 
 3553      6574436F 
 3553      756E7465 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 90


 3554              	.LASF8:
 3555 0207 756E7369 		.ascii	"unsigned int\000"
 3555      676E6564 
 3555      20696E74 
 3555      00
 3556              	.LASF54:
 3557 0214 50574D5F 		.ascii	"PWM_Volume_WriteCompareBuf\000"
 3557      566F6C75 
 3557      6D655F57 
 3557      72697465 
 3557      436F6D70 
 3558              	.LASF43:
 3559 022f 50574D5F 		.ascii	"PWM_Volume_ReadCounter\000"
 3559      566F6C75 
 3559      6D655F52 
 3559      65616443 
 3559      6F756E74 
 3560              	.LASF5:
 3561 0246 6C6F6E67 		.ascii	"long unsigned int\000"
 3561      20756E73 
 3561      69676E65 
 3561      6420696E 
 3561      7400
 3562              	.LASF28:
 3563 0258 6D6F6465 		.ascii	"modeMask\000"
 3563      4D61736B 
 3563      00
 3564              	.LASF77:
 3565 0261 4379456E 		.ascii	"CyEnterCriticalSection\000"
 3565      74657243 
 3565      72697469 
 3565      63616C53 
 3565      65637469 
 3566              	.LASF47:
 3567 0278 50574D5F 		.ascii	"PWM_Volume_WritePeriodBuf\000"
 3567      566F6C75 
 3567      6D655F57 
 3567      72697465 
 3567      50657269 
 3568              	.LASF3:
 3569 0292 73686F72 		.ascii	"short unsigned int\000"
 3569      7420756E 
 3569      7369676E 
 3569      65642069 
 3569      6E7400
 3570              	.LASF26:
 3571 02a5 6F6E6553 		.ascii	"oneShotEnable\000"
 3571      686F7445 
 3571      6E61626C 
 3571      6500
 3572              	.LASF59:
 3573 02b3 50574D5F 		.ascii	"PWM_Volume_SetCaptureMode\000"
 3573      566F6C75 
 3573      6D655F53 
 3573      65744361 
 3573      70747572 
 3574              	.LASF14:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 91


 3575 02cd 72656733 		.ascii	"reg32\000"
 3575      3200
 3576              	.LASF58:
 3577 02d3 50574D5F 		.ascii	"PWM_Volume_ReadCaptureBuf\000"
 3577      566F6C75 
 3577      6D655F52 
 3577      65616443 
 3577      61707475 
 3578              	.LASF16:
 3579 02ed 73697A65 		.ascii	"sizetype\000"
 3579      74797065 
 3579      00
 3580              	.LASF15:
 3581 02f6 6C6F6E67 		.ascii	"long double\000"
 3581      20646F75 
 3581      626C6500 
 3582              	.LASF52:
 3583 0302 636F6D70 		.ascii	"compare\000"
 3583      61726500 
 3584              	.LASF76:
 3585 030a 50574D5F 		.ascii	"PWM_Volume_SetInterrupt\000"
 3585      566F6C75 
 3585      6D655F53 
 3585      6574496E 
 3585      74657272 
 3586              	.LASF45:
 3587 0322 50574D5F 		.ascii	"PWM_Volume_SetCompareSwap\000"
 3587      566F6C75 
 3587      6D655F53 
 3587      6574436F 
 3587      6D706172 
 3588              	.LASF11:
 3589 033c 666C6F61 		.ascii	"float\000"
 3589      7400
 3590              	.LASF24:
 3591 0342 70726573 		.ascii	"prescaler\000"
 3591      63616C65 
 3591      7200
 3592              	.LASF17:
 3593 034c 50574D5F 		.ascii	"PWM_Volume_Stop\000"
 3593      566F6C75 
 3593      6D655F53 
 3593      746F7000 
 3594              	.LASF1:
 3595 035c 756E7369 		.ascii	"unsigned char\000"
 3595      676E6564 
 3595      20636861 
 3595      7200
 3596              	.LASF32:
 3597 036a 73746F70 		.ascii	"stopOnKillEnable\000"
 3597      4F6E4B69 
 3597      6C6C456E 
 3597      61626C65 
 3597      00
 3598              	.LASF49:
 3599 037b 50574D5F 		.ascii	"PWM_Volume_ReadPeriodBuf\000"
 3599      566F6C75 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 92


 3599      6D655F52 
 3599      65616450 
 3599      6572696F 
 3600              	.LASF2:
 3601 0394 73686F72 		.ascii	"short int\000"
 3601      7420696E 
 3601      7400
 3602              	.LASF29:
 3603 039e 50574D5F 		.ascii	"PWM_Volume_SetPWMSyncKill\000"
 3603      566F6C75 
 3603      6D655F53 
 3603      65745057 
 3603      4D53796E 
 3604              	.LASF70:
 3605 03b8 696E7465 		.ascii	"interruptMask\000"
 3605      72727570 
 3605      744D6173 
 3605      6B00
 3606              	.LASF64:
 3607 03c6 50574D5F 		.ascii	"PWM_Volume_SetCountMode\000"
 3607      566F6C75 
 3607      6D655F53 
 3607      6574436F 
 3607      756E744D 
 3608              	.LASF18:
 3609 03de 50574D5F 		.ascii	"PWM_Volume_SetMode\000"
 3609      566F6C75 
 3609      6D655F53 
 3609      65744D6F 
 3609      646500
 3610              	.LASF50:
 3611 03f1 50574D5F 		.ascii	"PWM_Volume_SetPeriodSwap\000"
 3611      566F6C75 
 3611      6D655F53 
 3611      65745065 
 3611      72696F64 
 3612              	.LASF79:
 3613 040a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3613      43313120 
 3613      352E342E 
 3613      31203230 
 3613      31363036 
 3614 043d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0plus -mthumb -"
 3614      20726576 
 3614      6973696F 
 3614      6E203233 
 3614      37373135 
 3615 0470 67202D4F 		.ascii	"g -Og -ffunction-sections -ffat-lto-objects\000"
 3615      67202D66 
 3615      66756E63 
 3615      74696F6E 
 3615      2D736563 
 3616              	.LASF25:
 3617 049c 50574D5F 		.ascii	"PWM_Volume_SetOneShot\000"
 3617      566F6C75 
 3617      6D655F53 
 3617      65744F6E 
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 93


 3617      6553686F 
 3618              	.LASF13:
 3619 04b2 63686172 		.ascii	"char\000"
 3619      00
 3620              	.LASF21:
 3621 04b7 6D6F6465 		.ascii	"mode\000"
 3621      00
 3622              	.LASF62:
 3623 04bc 50574D5F 		.ascii	"PWM_Volume_SetStartMode\000"
 3623      566F6C75 
 3623      6D655F53 
 3623      65745374 
 3623      6172744D 
 3624              	.LASF31:
 3625 04d4 50574D5F 		.ascii	"PWM_Volume_SetPWMStopOnKill\000"
 3625      566F6C75 
 3625      6D655F53 
 3625      65745057 
 3625      4D53746F 
 3626              	.LASF65:
 3627 04f0 50574D5F 		.ascii	"PWM_Volume_TriggerCommand\000"
 3627      566F6C75 
 3627      6D655F54 
 3627      72696767 
 3627      6572436F 
 3628              	.LASF66:
 3629 050a 636F6D6D 		.ascii	"command\000"
 3629      616E6400 
 3630              	.LASF51:
 3631 0512 50574D5F 		.ascii	"PWM_Volume_WriteCompare\000"
 3631      566F6C75 
 3631      6D655F57 
 3631      72697465 
 3631      436F6D70 
 3632              	.LASF75:
 3633 052a 50574D5F 		.ascii	"PWM_Volume_ClearInterrupt\000"
 3633      566F6C75 
 3633      6D655F43 
 3633      6C656172 
 3633      496E7465 
 3634              	.LASF40:
 3635 0544 636F756E 		.ascii	"counterMode\000"
 3635      7465724D 
 3635      6F646500 
 3636              	.LASF20:
 3637 0550 50574D5F 		.ascii	"PWM_Volume_SetQDMode\000"
 3637      566F6C75 
 3637      6D655F53 
 3637      65745144 
 3637      4D6F6465 
 3638              	.LASF68:
 3639 0565 50574D5F 		.ascii	"PWM_Volume_ReadStatus\000"
 3639      566F6C75 
 3639      6D655F52 
 3639      65616453 
 3639      74617475 
 3640              	.LASF74:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 94


 3641 057b 50574D5F 		.ascii	"PWM_Volume_GetInterruptSource\000"
 3641      566F6C75 
 3641      6D655F47 
 3641      6574496E 
 3641      74657272 
 3642              	.LASF55:
 3643 0599 636F6D70 		.ascii	"compareBuf\000"
 3643      61726542 
 3643      756600
 3644              	.LASF63:
 3645 05a4 50574D5F 		.ascii	"PWM_Volume_SetStopMode\000"
 3645      566F6C75 
 3645      6D655F53 
 3645      65745374 
 3645      6F704D6F 
 3646              	.LASF71:
 3647 05bb 50574D5F 		.ascii	"PWM_Volume_Init\000"
 3647      566F6C75 
 3647      6D655F49 
 3647      6E697400 
 3648              	.LASF67:
 3649 05cb 50574D5F 		.ascii	"PWM_Volume_Enable\000"
 3649      566F6C75 
 3649      6D655F45 
 3649      6E61626C 
 3649      6500
 3650              	.LASF19:
 3651 05dd 656E6162 		.ascii	"enableInterrupts\000"
 3651      6C65496E 
 3651      74657272 
 3651      75707473 
 3651      00
 3652              	.LASF56:
 3653 05ee 50574D5F 		.ascii	"PWM_Volume_ReadCompareBuf\000"
 3653      566F6C75 
 3653      6D655F52 
 3653      65616443 
 3653      6F6D7061 
 3654              	.LASF72:
 3655 0608 50574D5F 		.ascii	"PWM_Volume_Start\000"
 3655      566F6C75 
 3655      6D655F53 
 3655      74617274 
 3655      00
 3656              	.LASF61:
 3657 0619 50574D5F 		.ascii	"PWM_Volume_SetReloadMode\000"
 3657      566F6C75 
 3657      6D655F53 
 3657      65745265 
 3657      6C6F6164 
 3658              	.LASF37:
 3659 0632 50574D5F 		.ascii	"PWM_Volume_WriteCounter\000"
 3659      566F6C75 
 3659      6D655F57 
 3659      72697465 
 3659      436F756E 
 3660              	.LASF30:
ARM GAS  C:\Users\220036~1\AppData\Local\Temp\ccTxdLec.s 			page 95


 3661 064a 73796E63 		.ascii	"syncKillEnable\000"
 3661      4B696C6C 
 3661      456E6162 
 3661      6C6500
 3662              	.LASF46:
 3663 0659 73776170 		.ascii	"swapEnable\000"
 3663      456E6162 
 3663      6C6500
 3664              	.LASF33:
 3665 0664 50574D5F 		.ascii	"PWM_Volume_SetPWMDeadTime\000"
 3665      566F6C75 
 3665      6D655F53 
 3665      65745057 
 3665      4D446561 
 3666              	.LASF41:
 3667 067e 50574D5F 		.ascii	"PWM_Volume_WritePeriod\000"
 3667      566F6C75 
 3667      6D655F57 
 3667      72697465 
 3667      50657269 
 3668              	.LASF48:
 3669 0695 70657269 		.ascii	"periodBuf\000"
 3669      6F644275 
 3669      6600
 3670              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
